#include "cBinds.bah"

#define len(a ptr) uint
#define panic(s str)

const null = <ptr>0
const true = <bool>1
const false = <bool>0

const strLenSize = 4

struct Bah_Array_Type {
	data: ptr
	length: uint
	realLength: uint
	elemSize: uint
}

__bah_strlenSTR(s str) uint32 {
    if <ptr>s == null {
        return 0
    }
    return *(<uint32*>s)
}

__bah_arrayLength(a Bah_Array_Type*) uint {
    if a == null {
        return 0
    }

    return a.length
}

__bah_compareStr(a str, b str) bool {
    if len(a) != len(b) {
        return false
    }

    i=0; for i < len(a), i++ {
        if a[i] != b[i] {
            return false
        }
    }

    return true
}

cStr(s str) char* {
	if <ptr>s == null {
		return null
	}
	return <char*>(<uint><ptr>s + strLenSize)
}

cArr(arr Bah_Array_Type*) ptr {
    return arr.data
}

clear(arr Bah_Array_Type*) {
    arr.length = 0
}

//Used for deleting an element from an array by its index.
//This will keep the order of the elements.
delete(arr Bah_Array_Type*, i uint) {
    if i >= arr.length || i < 0 {
        return
    }
	if i == arr.length - 1 {
		arr.length--
		return
	}
    elemSize int = arr.elemSize
    data char* = arr.data
    destOffset = elemSize * i
    i++
    offset = elemSize * i
    src char* = <int>data + <int>offset
    dest char* = <int>data + <int>destOffset
    rightNB = arr.length - i

    memmove(dest, src, rightNB * elemSize)
    arr.length--
}

//Like delete() but for a range.
//deleteRange(arr, 1, 3) will delete elements at indexes [1, 2, 3]
deleteRange(arr Bah_Array_Type*, from uint, to uint) {
    if from == to {
        delete(arr, from)
        return
    }


    length = arr.length
    
    elemSize int = arr.elemSize
    data char* = arr.data
    size = elemSize * (to - from)
    dest ptr = <int>data + elemSize * from
    src ptr = <int>dest + size + elemSize
    rightNB = length - to - 1

    memmove(dest, src, rightNB * elemSize)
    arr.length -= (to - from + 1)
}

#include "gc.bah"
#include "channel.bah"

print(s str) {
    write(1, s, len(s))
}

printInt(i int) {
    s = buffer 66

    s[65] = <char>0
    
    subZero = false

    if i == 0 {
        println("0")
        return
    }

    if i < 0 {
        subZero = true
        i = 0-i
    }

    ind = 64

    for i != 0, i /= 10 {
        conv = i % 10
        conv += 48
        s[ind] = <char>conv
        ind--
    }

    if subZero {
        putchar('-')
    }

    i=ind+1; for i < 65, i++ {
        putchar(s[i])
    }

    putchar(<char>10)
}

println(s str) {
    if <ptr>s == null {
        s = ""
    }
    write(1, s+"\n", len(s)+1)
    // puts(s)
}

backtrace(levelStart uint) {
    basePointer = <uint>$rbp

    println("Backtrace:")

    for levelStart > 0, levelStart-- {
        basePointer = *<uint*>(basePointer)
        currPtr = *<uint*>(basePointer + 8)
    }

    for basePointer != 0, basePointer = *<uint*>(basePointer) {
        currPtr = *<uint*>(basePointer + 8)
        fnName = ""

        debugInfos = <uint*>$debug
        for *debugInfos != 0 {
            fnAddress = *debugInfos
            debugInfos = <uint*>(<uint>debugInfos + 8)
            fnAddressEnd = *debugInfos
            debugInfos = <uint*>(<uint>debugInfos + 8)
            fnName = <str>debugInfos

            if currPtr >= fnAddress && currPtr <= fnAddressEnd {
                break
            }


            debugInfos = <uint*>(<uint>debugInfos + 5 + len(fnName))
        }

        lineNb = 0
        fileNb = 0
        fileName = "?"
        foundGreater = false

        debugLines = <byte*>$debugLines
        for *debugLines != <byte>0 {
            type = *debugLines
            debugLines = <byte*>(<uint>debugLines + 1)

            if type == 1 {
                debugLines = <byte*>(<uint>debugLines + 4)
                fileName = <str>debugLines
                debugLines = <byte*>(<uint>debugLines + 5 + len(fileName))
            }

            if type == 2 {
                addr = *<uint*>(debugLines)
                debugLines = <byte*>(<uint>debugLines + 8)
                currFileNb = *<int32*>debugLines
                debugLines = <byte*>(<uint>debugLines + 4)
                currLineNb = *<int32*>debugLines
                debugLines = <byte*>(<uint>debugLines + 4)

                if foundGreater && currPtr <= addr {
                    break
                }

                if currPtr >= addr {
                    foundGreater = true
                    lineNb = currLineNb
                    fileNb = currFileNb
                }

            }
        }

        if *debugLines != 2 {
            lineNb = 0
        }

        debugLines = <byte*>$debugLines
        for *debugLines != <byte>0 {
            type = *debugLines
            debugLines = <byte*>(<uint>debugLines + 1)

            if type == 1 {
                currFileNb = *<int32*>debugLines
                debugLines = <byte*>(<uint>debugLines + 4)
                fileName = <str>debugLines

                if currFileNb == fileNb {
                    break
                }

                debugLines = <byte*>(<uint>debugLines + 5 + len(fileName))
            }

            if type == 2 {
                debugLines = <byte*>(<uint>debugLines + 16)
            }
        }

        if lineNb == 0 && fileNb == 0 {
            print("\t\033[32mRecompile with -debug to see this frame.\033[m\n")
            continue
            // fnName = "no debug information"
            // fileName = "<out of range>"
        }

        print("\t\033[33m")
        print(fnName)
        print("\033[m() \033[32m")
        print(fileName)
        if lineNb != 0 {
            print(":")
            printInt(lineNb)
		    print("\033[m")
        } else {
            print("\033[m\n")
        }

    }
}

__Bah_panic(e str, loc str) {
    print("panic(")
    print(loc)
    print("): ")
    print(e)
    print("\n")
    backtrace(0)
    exit(1)
}

onMemoryError function()str = null

//Used by the compiler, called when a memory error occurs.
__Bah_segfault_handle(sig int32, info ptr, ctx ptr) {
	res = ""
	if onMemoryError != null {
		res = onMemoryError()
	}

    currPtr = *<uint*>(<uint>ctx + 168)
    rbp = *<uint*>(<uint>ctx + 120)

    fnName = ""

    debugInfos = <uint*>$debug
    for *debugInfos != 0 {
        fnAddress = *debugInfos
        debugInfos = <uint*>(<uint>debugInfos + 8)
        fnAddressEnd = *debugInfos
        debugInfos = <uint*>(<uint>debugInfos + 8)
        fnName = <str>debugInfos

        if currPtr >= fnAddress && currPtr <= fnAddressEnd {
            break
        }


        debugInfos = <uint*>(<uint>debugInfos + 5 + len(fnName))
    }

    lineNb = 0
    fileNb = 0
    fileName = "?"
    foundGreater = false

    debugLines = <byte*>$debugLines
    for *debugLines != <byte>0 {
        type = *debugLines
        debugLines = <byte*>(<uint>debugLines + 1)

        if type == 1 {
            debugLines = <byte*>(<uint>debugLines + 4)
            fileName = <str>debugLines
            debugLines = <byte*>(<uint>debugLines + 5 + len(fileName))
        }

        if type == 2 {
            addr = *<uint*>(debugLines)
            debugLines = <byte*>(<uint>debugLines + 8)
            currFileNb = *<int32*>debugLines
            debugLines = <byte*>(<uint>debugLines + 4)
            currLineNb = *<int32*>debugLines
            debugLines = <byte*>(<uint>debugLines + 4)

            if foundGreater && currPtr <= addr {
                break
            }

            if currPtr >= addr {
                foundGreater = true
                lineNb = currLineNb
                fileNb = currFileNb
            }

        }
    }

    if *debugLines != 2 {
        lineNb = 0
    }

    debugLines = <byte*>$debugLines
    for *debugLines != <byte>0 {
        type = *debugLines
        debugLines = <byte*>(<uint>debugLines + 1)

        if type == 1 {
            currFileNb = *<int32*>debugLines
            debugLines = <byte*>(<uint>debugLines + 4)
            fileName = <str>debugLines

            if currFileNb == fileNb {
                break
            }

            debugLines = <byte*>(<uint>debugLines + 5 + len(fileName))
        }

        if type == 2 {
            debugLines = <byte*>(<uint>debugLines + 16)
        }
    }

    if lineNb == 0 && fileNb == 0 {
        fnName = "no debug information"
        fileName = "<out of range>"
    }

    print("===Memory Erorr (segfault)===\n")
    print("\t\033[33m")
    print(fnName)
    print("\033[m() \033[32m")
    print(fileName)
    if lineNb != 0 {
        print(":")
        printInt(lineNb)
        print("\033[m")
    } else {
        print("\033[m\n")
    }

    backtrace(2)
    exit(139)
}

//Used to register __Bah_segfault_handle().
__Bah_init_segfaultHandle() bool {
    action = sigaction{
        sa_handler: __Bah_segfault_handle
        sa_flags: SA_SIGINFO
    }
    sigaction(SIGSEGV, &action, null)

	// signal(SIGSEGV, __Bah_segfault_handle)
	return true
}

#init __Bah_init_segfaultHandle()

#define uintToStr(u uint) str

__Bah_realocate_arr(arr Bah_Array_Type*, index uint) {
    if arr == null {
        panic("Trying to set value of null array.")
        return
    }

    if index >= arr.length {
        arr.length = index + 1
    }

    if index < arr.realLength {
        return
    }


    // if index != arr.realLength {
    //     puts("nope!")
    // }

    orl = arr.realLength

    if arr.realLength == 0 {
        arr.realLength = 64
    } else {
        arr.realLength *= 2
    }
    arr.data = memoryRealloc(arr.data, arr.realLength * arr.elemSize)
}

//Used for pre-allocating a number of element to an array.
//The content of the array is not initialized, it may contain garbage.
allocateArray(arr Bah_Array_Type*, nbElems uint) {
    arr.length = nbElems
    arr.realLength = nbElems
    arr.data = memoryAlloc(nbElems * arr.elemSize)
}

buffToStr(b char*) str {
    l = strlen(b)
    r uint32* = memoryAllocSTR(l + 5)
    *r = l
    memcpy(<ptr>(<uint>r+4), b, l)
    return <str>r
}

cStrToBah(b char*) str {
    if b == null {
        return null
    }
    l = strlen(b)
    r uint32* = memoryAllocSTR(l + 5)
    *r = l
    memcpy(<ptr>(<uint>r+4), b, l)
    return <str>r
}

__bah_argsToArr(argc uint, argv char**) []str {
    arr = []str

    i=0; for i < argc, i++ {
        arr[i] = buffToStr(*<char**>(<uint>argv + i * sizeof(ptr)))
    }

    return arr
}

//Used by the compiler for operations like str[start:end].
strSubstitute(s str, i uint, l uint) str {
	size = l - i
	if i < 0 || size < 0 || size > len(s) {
		panic("builtin: str substitution out of bounds violation.")
	}
	ns uint32* = memoryAllocSTR(size+5)
    *ns = size
	memcpy(<ptr>(<uint><ptr>ns + strLenSize), <ptr>(<uint><ptr>s + i + strLenSize), size)
	return <str>ns
}

//Used by the compiler for operations like array[start:end].
arraySubstitute(arr Bah_Array_Type*, i int, l int) Bah_Array_Type* {
	length = l - i
	if i < 0 || length < 0 || length > arr.length {
		panic("builtin: array substitution out of bounds violation.")
	}
	offset int = i * arr.elemSize

	na = new Bah_Array_Type {
        elemSize: arr.elemSize
        length: length
    }

	size = length * arr.elemSize
	realSize = length * arr.elemSize
	data = memoryAlloc(size)
	oData = arr.data
	memcpy(data, <ptr>(<uint>oData + offset), realSize)
	na.data = data
	return na
}

//Used to convert an array of characters to a str.
arrToStr(arr []char) str {
    strLen = len(arr)
    if len(arr) > 0 && arr[len(arr)-1] == <char>0 {
        strLen--
    }
    a Bah_Array_Type* = arr
    str str = memoryAllocSTR(strLen+5)
    memcpy(<ptr>(<uint><ptr>str + strLenSize), a.data, strLen)
    ln uint32* = str
    *ln = strLen
    return str
}

//Used to convert a str into an array of characters.
strToArr(str str) []char {
    strLen = len(str)
    arr = []char
    a Bah_Array_Type* = arr
    a.data = memoryAlloc(strLen+1)
    memcpy(a.data, <ptr>(<uint><ptr>str + strLenSize), strLen)
    a.length = strLen
    
    return arr
}

//This is used to efficiently construct strs character by character.
//Note that if you want to create a substring of a string efficiently, you can use str[from:to] instead.
struct strBuilder {
    buff: str
    length: uint32

	//Internal function
    _init() {
        this.buff = memoryAllocSTR(65 + strLenSize)
        this.length = 64
    }

	//Used for appending a character to the end of the str.
    append(c char) {
        ln uint32* = this.buff
        l = *ln
        if l >= this.length {
            this.length *= 2
            b = memoryRealloc(this.buff, strLenSize + this.length + 1)
            this.buff = b
			ln = <uint32*>this.buff
        }
        pc = <char*>(<uint><ptr>this.buff + strLenSize + l)
        *pc = c

        *ln = l + 1
    }

	//Used for getting the resulting str.
    str() str {
        return this.buff
    }

}

//need to find wtf is hapening here
// #init putchar(<char>0) //fixes bug where libc not initialized if not called from main thread.