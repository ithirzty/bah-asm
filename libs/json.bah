#import "string.bah"
#import "iostream.bah"
#import "reflect.bah"
#import "rope.bah"


const JSON_TYPE_STRING = 0
const JSON_TYPE_INT = 1
const JSON_TYPE_FLOAT = 2
const JSON_TYPE_ARRAY = 3
const JSON_TYPE_MAP = 4

#define toJson(e reflectElement) str
#define json_scan_inner(this ptr, e reflectElement)

//Returns true if the type is a pointer type. This means that the reflectElement.value of this type will always
//be a pointer to a value.
//Note that for the str type, not passing a pointer to a str is already a pointer. 
const jsonIsPtrType = reflectIsPtrType

//A single element of a json document.
//This can be a map, an array, an int, a float or a string.
//If the element is of type array (or map), all of its children will be contained in an array, the .children field.
struct jsonElement {
    type: int
    key: str
    content: str
    children: []jsonElement*

    contentFinal: bool
    from: int
    to: int

    //If the current element is of type map, this method is used to get a children element mapped to this key.
    get(key str) jsonElement* {
        l = len(this.children)
        i=0; for i < l {
            elem = this.children[i]
            if len(elem.key) == 0 {
                i++
                continue
            }
            fc = elem.key[0]
            if fc == <char>34 {
                nk = []char
                lk = len(elem.key)
                j=1; for j < lk - 1 {
                    c = (elem.key)[j]
                    nk[j-1] = c
                    j++
                }
                if arrToStr(nk) == key {
                    return elem
                }
            } else {
                if elem.key == key {
                    return elem
                }
            }
            i++
        }
        z = <ptr>0
        return z
    }

    //To get the current element as a str no matter its type.
    //Use this and never .content because the content is lazy-loaded and is not rarely equal to .str()
    str() str {
        if this.contentFinal == false {
            this.content = this.content[this.from : this.to]
            this.contentFinal = true
        }
        return this.content
    }


    //Used for scanning the JSON element in a var.
    //Warning: that in the scanned result, values will be allocated and initialized only if they are referenced in json.
    // when scanning {myArr: []}, elem.myArr will be initialized with a length of zero,
    //  but scanning {myArr:   }, elem.myArr will be null.
    scan(e reflectElement) {
        //str type is already a pointer. Passing a str will not be converted in a pointer to a str by the compiler.
        if e.type == "str" {
            panic("json: cannot scan to str, try scanning to &"+e.name+".")
        }
        json_scan_inner(this, e)
    }

}
//Internal function: scanning a jsonElement in a reflecElement.
json_scan_inner(thisp ptr, e reflectElement) {
    this jsonElement* = thisp
    if this == null {
        return
    }

    //dereferencing the mutable members of the refleElement to prevent undefined behavior.
    type = e.type
    value = e.value

    if value == null {
        return
    }

    //if there is multiple pointer levels, dereference until the pointer level == 1.
    nb = 0 //the number of nested pointers
    if e.isArray == false {
        if type[len(type)-1] == '*' {
            nb++
        }
        i = len(type)-1; for i >= 1, i-- {
            if type[i] == '*' && type[i-1] == '*' {
                value = *(<ptr*>value)
                nb++
            } else {
                break
            }
        }
        if nb > 0 {
            type = type[:len(type)-nb]
        }
    }

    //trying to scan a value at an address that has not been allocated.
    if value == null {
        return
    }

    //The reflectElement is a structure.
    //.structLayout contains a template for every member of the structure.
    if e.isStruct {
        i=0; for i < len(e.structLayout), i++ {
            member = e.structLayout[i]
            jmemb = this.get(member.name)
            
            //there is no json member with this name
            if jmemb == null {
                continue
            }

            //If the member is of type pointer, we need to allocated memory and inject
            //the pointer to the allocated memory as the member's value.
            if jsonIsPtrType(member.type) && member.type != "str" { //str will not count as a pointer because we dont 
                member.value = memoryAlloc(member.size)             //want to acces the content of the str (chars) but the address of the chars.
                json_scan_inner(jmemb, member)
                p = <ptr*>(<uint>value + member.offset)
                *p = member.value
            } else { //Else, we scan directly the value to the member's address
                member.value = <ptr>(<uint>value + member.offset)
                json_scan_inner(jmemb, member)
            }
        }        
        return
    }

    //The reflectElement is an array.
    //.arrayElement contains a template for every element of the array.
    if e.isArray {
        arr Bah_Array_Type* = value //converting the pointer to the internal Bah_Array_Type to access its length and others

        isPtr = e.arrayElem.type != "str" && jsonIsPtrType(e.arrayElem.type) //str will not count as a pointer because we dont want
        //                                                                     to acces the content of the str (chars) but the address of the chars.
        if isPtr {
            arr.elemSize = sizeof(ptr) //if the elements are pointers, reflectElement.size != sizeof(ptr) but to the
        } else {                       //size of the memory that should be allocated to fit the value of the ptr.
            arr.elemSize = e.arrayElem.size
        }
        allocateArray(arr, len(this.children)) //allocate enough space in the array to fit all the elements.
        elem = *(e.arrayElem) //dereference .arrayElement to prevent undefined behavior.
        
        i=<uint>0; for i < len(this.children), i++ {
            //If the element is of type pointer, we should allocate memory to scan to and inject the pointer to the allocated
            //memory as the array's element.
            if isPtr {
                elem.value = memoryAlloc(elem.size)
                elemp = <ptr*>(<uint>arr.data + i * sizeof(ptr))
                *elemp = elem.value
                json_scan_inner(this.children[i], elem)
            } else { //we can scan directly to the array's element address.
                elem.value = <ptr>(<uint>arr.data + i * arr.elemSize)
                json_scan_inner(this.children[i], elem)
            }
            
        }

        return
    }

    //is tuple
    if e.isStruct == false && len(e.structLayout) != 0 {
        i=0; for i < len(this.children), i++ {
            if i >= len(e.structLayout) {
                break
            }

            m = e.structLayout[i]

            if jsonIsPtrType(m.type) && m.type != "str" {
                m.value = memoryAlloc(m.size)
                json_scan_inner(this.children[i], m)
                p = <ptr*>(<uint>value + m.offset)
                *p = m.value
            } else {
                m.value = <ptr>(<uint>value + m.offset)
                json_scan_inner(this.children[i], m)
            }
        }
    }

    //For all primitive types, value will be a pointer, the address to which we need to scan the data.

    if this.str() == "null" {
        return
    }

    if type == "str" {
        v = <str*>value
        *v = this.str()
        return
    }

    if type == "int" {
        v = <int*>value
        *v = strToInt(this.str())
        return
    }

    if type == "int32" {
        v = <int32*>value
        *v = strToInt(this.str())
        return
    }

    if type == "int16" {
        v = <int16*>value
        *v = strToInt(this.str())
        return
    }

    if type == "uint" {
        v = <uint*>value
        *v = strToUint(this.str())
        return
    }

    if type == "uint32" {
        v = <uint32*>value
        *v = strToUint(this.str())
        return
    }

    if type == "uint16" {
        v = <uint16*>value
        *v = strToUint(this.str())
        return
    }

    if type == "byte" || type == "char" {
        v = <byte*>value
        *v = strToUint(this.str())
        return
    }

    if type == "float" {
        v = <float*>value
        *v = strToFloat(this.str())
        return
    }

    if type == "float32" {
        v = <float32*>value
        *v = strToFloat(this.str())
        return
    }

    if type == "bool" {
        v = (<bool*>value)
        if this.str() == "true" || strToInt(this.str()) > 0 {
            *v = true
            
        } else {
            *v = false
        }
    }

}

jError = "" //Inner variable containing the last parsing error.

//Internal function called by parseJson().
parseJson_inner(s str, ip uint*, l uint) jsonElement* {
    jError = ""
    i = *ip

    for i < l, i++ {
        if isSpace(s[i]) == false {
            break
        }
    }
    
    j = new jsonElement {
        content: s
        from: i
        to: l
    }
    j.children = []jsonElement*

    if s[i] == '[' {
        j.type = JSON_TYPE_ARRAY
        i++
        for i < l, i++ {
            if isSpace(s[i]) == false {
                break
            }
        }
        if s[i] != ']' {
            for i < l, i++ {
                child = parseJson_inner(s, &i, l)
                if child == null {
                    return null
                }
                j.children[len(j.children)] = child
                for i < l, i++ {
                    if isSpace(s[i]) == false {
                        break
                    }
                }

                if s[i] != ',' {
                    if s[i] != ']' {
                        jError = "json: expected array separator (got: "+charToStr(s[i])+") (pos: "+uintToStr(i)+")"
                        return null
                    }
                    i++
                    break
                }

                for i < l, i++ {
                    if isSpace(s[i]) == false {
                        break
                    }
                }

            }
        } else {
            i++
        }
        j.to = i
    } else if s[i] == '{' {
        j.type = JSON_TYPE_MAP
        i++
        for i < l, i++ {
            if isSpace(s[i]) == false {
                break
            }
        }
        if s[i] != '}' {
            for i < l, i++ {
                for i < l, i++ {
                    if isSpace(s[i]) == false {
                        break
                    }
                }
                if s[i] != '"' {
                    jError = "json: expected string as map key (pos: "+uintToStr(i)+")"
                    return null
                }
                i++
                ns = i
                for i < l, i++ {
                    if s[i] == '"' && s[i-1] != <char>92 {
                        break
                    }
                }
                name = s[ns:i]
                i++

                for i < l, i++ {
                    if isSpace(s[i]) == false {
                        break
                    }
                }

                if s[i] != ':' {
                    jError = "json: expected : between key and value (got: "+intToStr(<int>s[i])+") (pos: "+uintToStr(i)+")"
                    return null
                }

                i++


                child = parseJson_inner(s, &i, l)
                if child == null {
                    return null
                }
                child.key = name
                j.children[len(j.children)] = child
                
                for i < l, i++ {
                    if isSpace(s[i]) == false {
                        break
                    }
                }

                if s[i] != ',' {
                    if s[i] != '}' {
                        jError = "json: expected map separator (pos: "+uintToStr(i)+")"
                        return null
                    }
                    i++
                    break
                }
            }
        } else {
            i++
        }
        j.to = i
    } else if s[i] == '"' {
        j.type = JSON_TYPE_STRING
        i++
        j.from = i
        mem = []char
        for i < l, i++ {
            if s[i] == '"' {
                break
            }
            if s[i] == <char>92 {
                if len(mem) == 0 {
                    mem = strToArr(s[j.from:i])
                }
                if s[i+1] == 'r' {
                    mem[len(mem)] = <char>13
                } else if s[i+1] == 'n' {
                    mem[len(mem)] = <char>10
                } else {
                    mem[len(mem)] = s[i+1]
                }
                i++
                continue
            }
            if len(mem) != 0 {
                mem[len(mem)] = s[i]
            }
        }
        if len(mem) != 0 {
            j.contentFinal = true
            j.content = arrToStr(mem)
        }
        j.to = i
        i++
    } else if isNumber(s[i]) || s[i] == '-' {
        j.type = JSON_TYPE_INT
        i++
        for i < l, i++ {
            if isNumber(s[i]) == false {
                if s[i] == '.' {
                    j.type = JSON_TYPE_FLOAT
                } else {
                    break
                }
            }
        }
        j.to = i
    } else {
        si = i
        for i < l, i++ {
            if isLetter(s[i]) == false {
                break
            }
        }
        s = s[si:i]
        if s == "true" || s == "false" || s == "null" {
            j.type = JSON_TYPE_INT
            j.content = s
            j.contentFinal = true
        }
    }

    *ip = i
    return j
}

//To parse a json document.
//This will return a pointer to the main element.
//This new version of parseJson() uses lazy parsing.
parseJson(s str) jsonElement* {
    l = len(s)
    i = <uint>0
    return parseJson_inner(s, &i, l)
}

//Returns weither a char is a valid string json char.
json_isPrintable(c char) bool {
    if c < 32 {
        return false
    }
    return c != 127 && c != 129 && c != 141 && c != 143 && c != 144 && c != 157
}

//Used for escaping strings for json marshalling.
jsonEscapeStr(s str) str {
    if <ptr>s == null {
        return ""
    }
    r = strBuilder{}
    l = len(s)

    i=0; for i < l, i++ {
        c = s[i]
        if c == <char>34 {
            r.append(<char>92)
        } else if c == <char>10 {
                r.append(<char>92)
                r.append('n')
                continue
        } else if c == <char>13 {
                r.append(<char>92)
                r.append('r')
                continue
        }
        if json_isPrintable(c) == false {
            if <byte>c == <byte>195 {
                r.append(c)
                r.append(s[i+1])
                i++
            }
            continue
        }
        r.append(c)
    }

    return r.str()
}


//Converting a var into json, this is used by toJson() internally.
//You can pass pretty much anything to this function.
//Because we dont need a pointer to the value but only the value, you can pass a pointer or directly the value
//that will be automatically converted to a pointer by the compiler.
//s = "test"
// toJson(s)
toJsonRope(e reflectElement) rope* {
    //dereferencing the mutable members of the refleElement to prevent undefined behavior.
    type = e.type
    value = e.value

    if value == null {
        return rope("null")
    }

    //Unwrapping nested pointers so "value" is always a pointer, containg the address of the value.
    //Note that reflectElement.value of an array cannot be a nested pointer and this step
    //must be skipped for arrays are '*' at the end of an array type is not a nested array
    //pointer but an array of pointer: if arr = []str, &arr != []str* but &arr[0] == str*.
    if e.isArray == false {
        nb = 0
        if type[len(type)-1] == '*' {
            //As str type is already a pointer to chars, if we encounter a pointer to a str, we need to
            //dereference it one level further.
            //Note that .value of int is the same as the .value of int* because the compiler will always
            //give a pointer as .value.
            if strHasPrefix(type, "str*") {
                value = *(<ptr*>value)
            }
            nb++
        }
        i = len(type)-1; for i >= 1, i-- {
            if type[i] == '*' && type[i-1] == '*' {
                value = *(<ptr*>value)
                nb++
            } else {
                break
            }
        }
        if nb > 0 {
            type = type[:len(type)-nb]
        }
    }

    if value == null {
        return rope("null")
    }

    //If the reflectElement is a structure, we need to convert all of its members
    //as described by the .structLayout array.
    if e.isStruct {
        r = rope("{")

        i=0; for i < len(e.structLayout), i++ {
            member = e.structLayout[i]

            //the address of the member is the base address of the structure + the offset ammount
            //of the member
            member.value = <ptr>(<uint>value + member.offset)

            //If the member is a pointer, its actual value is a pointer to a pointer.
            //We can either add a '*' to the member.type (would be slower and not work for arrays).
            //Or, as below, we shall dereference it one level so that the value given to the next
            //toJsonRope() call has been applied the same conversion as the one done by the compiler.
            if jsonIsPtrType(member.type) {
                member.value = *(<ptr*>member.value)
            }

            res rope*

            if member.value != null {
                res = toJsonRope(member)
            } else {
                res = rope("null")
            }

            //As we cannot access null address, we can skip its conversion.
            r += rope("\""+jsonEscapeStr(member.name)+"\": ") + res
            if i+1 < len(e.structLayout) {
                r += rope(", ")
            }
        }

        return r + rope("}")   
    }

    //is tuple
    if e.isStruct == false && len(e.structLayout) != 0 {
        r = rope("[")
        i=0; for i < len(e.structLayout), i++ {
            m = e.structLayout[i]
            
            m.value = <ptr>(<uint>e.value + m.offset)
            
            if jsonIsPtrType(m.type) {
                m.value = *<ptr*>m.value
            }

            r += toJsonRope(m)

            if i+1 < len(e.structLayout) {
                r += rope(", ")
            }
        }

        return r + rope("]")
    }

    //If the reflectElement is an array, we need to convert all of its elements
    ///as described by .arrayElem.
    if e.isArray {
        r = rope("[")
        arr Bah_Array_Type* = value
        isPtr = jsonIsPtrType(e.arrayElem.type)
        elem = *(e.arrayElem) //dereferencing .arrayElem to prevent undefined behavior.
        i=0; for i < arr.length, i++ {
            elem.value = <ptr>(<uint>arr.data + i * arr.elemSize)

            //If the element is a pointer, its actual value is a pointer to a pointer.
            //We can either add a '*' to the elem.type (would be slower and not work for arrays).
            //Or, as below, we shall dereference it one level so that the value given to the next
            //toJsonRope() call has been applied the same conversion as the one done by the compiler.
            if isPtr {
                elem.value = *(<ptr*>elem.value)
            }

            r += toJsonRope(elem)
            if i+1 < arr.length {
                r += rope(", ")
            }
        }

        return r + rope("]")
    }

    //For all primitive types below, "value" is a pointer containing the address of the value
    //that we need to convert.

    if type == "str" {
        return rope("\""+jsonEscapeStr(<str>value)+"\"")
    }

    if type == "int" {
        return rope(intToStr(*(<int*>value)))
    }

    if type == "int32" {
        return rope(intToStr(<int>*(<int32*>value)))
    }

    if type == "int16" {
        return rope(intToStr(<int>*(<int16*>value)))
    }

    if type == "char" {
        return rope(intToStr(<int>*(<char*>value)))
    }

    if type == "uint" {
        return rope(uintToStr(*(<uint*>value)))
    }

    if type == "uint32" {
        return rope(uintToStr(*(<uint32*>value)))
    }

    if type == "uint16" {
        return rope(uintToStr(<uint>*(<uint16*>value)))
    }

    if type == "byte" {
        return rope(uintToStr(<uint>*(<byte*>value)))
    }

    if type == "float" {
        return rope(floatToStr(*(<float*>value)))
    }

    if type == "bool" {
        v = *(<bool*>value)
        if v {
            return rope("true")
            
        }
        return rope("false")
    }
    
    return rope("null")
}

//Converting a var into json, this uses by toJsonRope() internally.
//You can pass pretty much anything to this function.
//Because we dont need a pointer to the value but only the value, you can pass a pointer or directly the value
//that will be automatically converted to a pointer by the compiler.
//s = "test"
// toJson(s)
toJson(e reflectElement) str {
    return toJsonRope(e).toStr()
}