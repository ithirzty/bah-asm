#windows {
    #include "<wincrypt.h>"
}

#import "time.bah"
#import "iostream.bah"

#define srand(i int32)
#define rand() int32
RAND_SEEDED = false

//Used for seeding the pseudo-random number generator.
//If two instances of a PRNG have the same seed, they will have the same output.
seedRandom(i int) {
    srand(i)
    RAND_SEEDED = 1
}

//This generates a pseudo random integer in the range of min and max.
//*Note: this is not cryptographically safe. This output of this function can be predicted.*
//*Note: `max` should not be equal to `0`.*
randomInRange(min int, max int) int {
    if RAND_SEEDED == false {
        srand(time(0)+getTimeUnix())
        RAND_SEEDED = true
    }

    range = max - min
    i = rand() % range + 1

    i += min

    return i
}

#windows {
    #define! HCRYPTPROV int
    #define! CryptGenRandom(hp HCRYPTPROV, l int, buff int*)
}

//Used for generating a random integer.
//The ouput of this function uses the os specified way of generating a random int.
//This is slower than the PRNG but cannot be predicted. It does not need to be seeded.
cryptoRand() int {
    #linux {
        fs = fileStream{}
        fs.open("/dev/urandom", "r")
        c = fs.getChar()
        fs.close()
        i = <int>c
    }
    #darwin {
        fs = fileStream{}
        fs.open("/dev/urandom", "r")
        c = fs.getChar()
        fs.close()
        i = <int>c
    }
    #windows {
        hp HCRYPTPROV
        buff int* = memoryAlloc(SIZE_OF_INT)
        CryptGenRandom(hp, 1, buff)
        i = *buff
    }
    return i
}

//Example
// #include "iostream.bah"
// #include "rand.bah"
// main() {
// i = randomInRange(0, 100)
// s = intToString(i)
// println(s)
// }
