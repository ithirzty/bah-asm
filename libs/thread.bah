
#cLib "lpthread"

#define pthread_t uint

const PTHREAD_DETACHED            = 0x1
const PTHREAD_SCOPE_SYSTEM        = 0x2
const PTHREAD_INHERIT_SCHED       = 0x4
const PTHREAD_NOFLOAT             = 0x8

const PTHREAD_CREATE_DETACHED     = PTHREAD_DETACHED
const PTHREAD_CREATE_JOINABLE     = 0

struct pthread_cond_t {
    size: buffer:48
}

struct pthread_mutex_t {
    size: buffer:40
}

struct pthread_attr_t {
    size: buffer:56
}

#define GC_thread_create(id pthread_t*, attr pthread_attr_t*, func ptr, args ptr) int32
#define GC_thread_join(id pthread_t, ret ptr) int32

#define pthread_mutex_init(lock pthread_mutex_t*, m uint)
#define pthread_mutex_lock(lock pthread_mutex_t*)
#define pthread_mutex_unlock(lock pthread_mutex_t*)
#define pthread_mutex_destroy(lock pthread_mutex_t*)
#define pthread_cond_init(cond pthread_cond_t*, attr pthread_attr_t*) int32
#define pthread_cond_signal(cond pthread_cond_t*) int32
#define pthread_cond_destroy(cond pthread_cond_t*) int32
#define pthread_cond_wait(cond pthread_cond_t*, mut pthread_mutex_t*) int32
#define pthread_attr_init(attr pthread_attr_t *) int32
#define pthread_attr_setstack(attr pthread_attr_t*, stck ptr, size uint) int32
#define pthread_attr_getstack(attr pthread_attr_t*, stck ptr*, size uint*) int32
#define pthread_attr_getstacksize(attr pthread_attr_t*, size uint*) int32
#define pthread_self() pthread_t
#define pthread_create(id pthread_t*, attr pthread_attr_t*, func ptr, args ptr) int32
#define pthread_join(id pthread_t, ret ptr) int32
#define pthread_attr_destroy(attr pthread_attr_t*)
#define pthread_getattr_np(t pthread_t, attr pthread_attr_t*) int32
#define pthread_attr_setdetachstate(attr pthread_attr_t*, state int32) int32
#define pthread_exit(retval ptr)

#define __thread_create(id pthread_t*, attr pthread_attr_t*, func ptr, args ptr) int32
#define __thread_join(id pthread_t, ret ptr) int32

// #gc {
//     #linux {
//         #define GC_pthread_create(id pthread_t*, attr pthread_attr_t*, func ptr, args ptr) int32
//         #define GC_pthread_join(id pthread_t, ret ptr) int32
//         const __thread_create = GC_pthread_create
//         const __thread_join = GC_pthread_join
//     }
//     #darwin {
//         #define GC_pthread_create(id pthread_t*, attr pthread_attr_t*, func ptr, args ptr) int32
//         #define GC_pthread_join(id pthread_t, ret ptr) int32
//         const __thread_create = GC_pthread_create
//         const __thread_join = GC_pthread_join
//     }
//     #windows {
//         const __thread_create = pthread_create
//         const __thread_join = pthread_join 
//     }

// }

// #rcp {
//     const __thread_create = pthread_create
//     const __thread_join = pthread_join
// }

// #altMem {
    const __thread_create = GC_thread_create
    const __thread_join = GC_thread_join
// }

// __thread_create(id pthread_t*, attr pthread_attr_t*, func ptr, args ptr) int32 {
//     return 0
// }

// __thread_join(id pthread_t, ret ptr) int32 {
//     return 0
// }

const currentThread = pthread_self

//This structure implements a mutex.
//A mutex is a thread safe lock.
//*Note: the mutex needs to be initiated ans destroyed when you finished using it.*
struct mutex {
    id: pthread_mutex_t*

    //This initiaties the mutex.
    //You do not need to initiate the mutex when creating it with mutex().
    init() {
        this.id = memoryAlloc(sizeof(pthread_mutex_t))
        pthread_mutex_init(this.id, 0)
    }

    //This locks the mutex.
    //Every other thread trying to lock it will need to wait for it to be unlocked.
    lock() {
        pthread_mutex_lock(this.id)
    }

    //This unlocks the mutex.
    unlock() {
        pthread_mutex_unlock(this.id)
    }

    //This destroyes the mutex.
    destroy() {
        pthread_mutex_destroy(this.id)
    }

}

//This is a condition that while not true blocks the calling thread.
struct mutexCondition {
    id: pthread_cond_t

    //To initiate a condition.
    //You do not need to initiate the condition when creating it with mutexCondition().
    init() {
        pthread_cond_init(&this.id, null)
    }

    //To wait for another thread to signal that the condition may be true.
    //Usage:
    //for condition {
    // mutexCond.wait()
    //}
    wait(m mutex) {
        mid = m.id
        pthread_cond_wait(&this.id, mid)
    }

    //To signal a single thread that the condition may be true.
    send() {
        pthread_cond_signal(&this.id)
    }

    //To destroy the condition.
    destroy() {
        pthread_cond_destroy(&this.id)
    }

}

//Generates a mutexCondition and initiates it.
mutexCondition() mutexCondition {
    m = mutexCondition{}
    m.init()
    return m
}

//A wrapper for a thread.
//Note that for less advanced operation, you can use the keyword async.
struct thread {
    id: pthread_t
    
    //This will need to ne set by the user.
    //The specified function will be the entry point for the thread.
    handle: function(ptr)

    //This will launch the thread.
    create() {
        __thread_create(&this.id, null, this.handle, null)   
    }

    //This will launch the thread by passing to its entry point funtion an argument.
    //The argument can only be a pointer.
    createWithArg(arg ptr) {
        __thread_create(&this.id, null, this.handle, arg) 
    }

    //This waits until the thread has finished executting.
    wait() {
        __thread_join(this.id, null)
    }
}

//This initiates a mutex and returns it.
mutex() mutex {
    m = mutex{}
    m.init()
    return m
}

#define GC_removeCurrentThread(val ptr)

const real_pthread_exit = pthread_exit
const pthread_exit = GC_removeCurrentThread

//Example
// #include "iostream.bah"
// #include "thread.bah"
// printHello() {
// println("Hello")
// }
// main() {
// t = thread{}
// t.handle = &printHello
// t.create()
// t.wait()
// }
