__Bah_iostream_stdinputBuffer = ""
__Bah_iostream_stdinputBufferLength = 0

//Returns the text inputed by the user inside the terminal.
stdinput() str {
    response = ""
    nDataLength = 0
    if __Bah_iostream_stdinputBufferLength > 0 {
        response = __Bah_iostream_stdinputBuffer
        nDataLength = __Bah_iostream_stdinputBufferLength
    } else {
        buff = buffer 1025
        nDataLength = read(0,<ptr>buff,1024)
        if nDataLength < 1024 {
            response += buffToStr(<char*>buff)
        } else {
            for nDataLength > 0 {
                response += buffToStr(<char*>buff)
                if nDataLength < 1024 {
                    trimAmm = 1024 - nDataLength
                    response = response[:len(response) - trimAmm]
                    break
                } else {
                    nDataLength = read(0,<ptr>buff,1024)
                }
            }
        }
    }
    if response[nDataLength-1] == <char>10 {
        response = response[:len(response) - 1]
    }

    i=0; for i < nDataLength, i++ {
        if response[i] == <char>10 {
            __Bah_iostream_stdinputBuffer = response[i+1:]
            __Bah_iostream_stdinputBufferLength = nDataLength - i
            return response[:i]
        }
    }

    __Bah_iostream_stdinputBuffer = ""
    __Bah_iostream_stdinputBufferLength = 0

    return response
}

//A wrapper that makes file manipulation easier.
//*Note: after openning a file, you will need to close it.*
//**Warning:** fileStream can be many, many times slower than fileMap.
//So it is recommended to **use fileMap as much as possible**.
struct fileStream {
    handle: ptr
    name: str

    //Checks if the current opened file is valid or not.
    isValid() bool {
        return this.handle != null
    }

    //Opens a file by its name.
    //The differents modes can be found [here](https://koor.fr/C/cstdio/fopen.wp).
    open(path str, mode str) {
        this.name = path
        #windows {
            if mode == "r" {
                mode = "rb"
            } else if mode == "r+" {
                mode = "rb+"
            }
        }
        this.handle = fopen(path, mode)
    }

    //Closes an opennend connection to a file.
    close() {
        if this.isValid() == false {
            return
        }
        fclose(this.handle)
        this.handle = null
    }

    //Returns the position of the file reader.
    getPos() int {
        if this.isValid() == false {
            return 0
        }
        return ftell(this.handle)
    }

    //Set the position of the file reader.
    setPos(i int) {
        if this.isValid() == false {
            return
        }
        fseek(this.handle, i, 0)
    }

    //Returns the size of a file in bytes.
    getSize() int {
        if this.isValid() == false {
            return -1
        }
        oldPos = this.getPos()
        fseek(this.handle, 0, 2)
        size int = ftell(this.handle)
        this.setPos(oldPos)
        return size
    }

    //Sets the reading cursor to the beginning of the file.
    rewind() {
        rewind(this.handle)
    }

    //Returns a char at the current reading cursor in the file and moves the reading cursor to the next char.
    getChar() char {
        c = getc(this.handle)
        return c
    }

    //Adds a character to the file.
    setChar(c char) {
        fputc(c, this.handle)
    }

    //Creates a file by name.
    createFile(path str) {
        this.open(path, "w")
        this.close()
    }

    //Writes the opened file with the specified content.
    writeFile(content str) int {
        if this.isValid() == false {
            return -1
        }

        fwrite(content, len(content), 1, this.handle)

        return 1
    }

    //Serialize a pointer and write it to a file.
    //a: the pointer to serialize
    //s: sizeof() the pointer's content
    writePtr(a ptr, s uint) {
        fwrite(a, s, 1, this.handle)
    }

    //Read a file and unserialize its content to a pointer.
    //a: the pointer to unserialize
    //s: sizeof() the pointer's content.
    readPtr(a ptr, s uint) int {
        return fread(a, s, 1, this.handle)
    }

    //Returns the content of the opened file.
    readContent() str {
        if this.isValid() == false {
            return "invalid"
        }

        sz = this.getSize()
        r uint32* = memoryAllocSTR(sz + 6)
        fread(<ptr>(<uint>r + 4), 1, sz, this.handle)
        *r = sz
        return <str>r
    }

    //Returns the file's content as an array of bytes (char).
    readBytes() []char {
        r = []char
        allocateArray(<Bah_Array_Type*>r, this.getSize())
        this.readPtr(cArr(<Bah_Array_Type*>r), len(r))
        return r
    }

    //Write an array of bytes (char) to a file.
    writeBytes(d []char) {
        this.writePtr(cArr(<Bah_Array_Type*>d), len(d))
    }

    _end() {
        if this.isValid() {
            println("iostream: warning, auto-closing file: '"+this.name+"'.")
            this.close()
        }
    }

}

//Returns a list of all files found inside the specified directory.
listFiles(dir str) []str {
    d = opendir(dir)
    if d == null {
        return null
    }
    files = []str
    file = readdir(d)
    for file != null {
        lf = len(files)
        name = cStrToBah(<char*>file.d_name)
        if name != "." && name != ".." {
            files[lf] = name
        }
        file = readdir(d)
    }
    closedir(d)
    return files
}


//Checks if a file exists.
fileExists(path str) bool {
    buf stat
    return stat(path, &buf) == 0
}

isFolder(path str) bool {
    s stat
    if stat(path, &s) != 0 {
        return false
    }
    if s.st_mode & S_IFDIR != 0 {
        return true
    }
    return false
}

//Removes a file. 'name' should be the file name, returns true if the file was deleted.
removeFile(name str) bool {
    if remove(name) == 0 {
        return true
    }
    return false
}

//Get the timestamp of the last modification of a file.
getLastModified(name str) int {
    attr stat
    stat(name, &attr)
    return attr.st_ctim.tv_sec
}


#linux {
    makeDir(path str, m int32) bool {
        return mkdir(path, m) != -1
    }
}
#darwin {
    makeDir(path str, m int32) bool {
        return mkdir(path, m) != -1
    }
}
#windows {
    __windows_mkdir(s str, m int) bool {
        return mkdir(s) != -1
    }
    const makeDir = __windows_mkdir
}
