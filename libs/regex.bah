#import "iostream.bah"
#import "string.bah"


const REGEX_TYPE_WORD = 1
const REGEX_TYPE_DIGIT = 2
const REGEX_TYPE_BOUNDARY = 3
const REGEX_TYPE_START = 4
const REGEX_TYPE_END = 5
const REGEX_TYPE_TEXT = 6
const REGEX_TYPE_GROUP_START = 7
const REGEX_TYPE_GROUP_END = 8
const REGEX_TYPE_SPACE = 9
const REGEX_TYPE_ALL = 10
const REGEX_TYPE_RANGE = 11

//An internal structure implementing a range quantifier.
struct regexRange {
    min: char
    max: char
}

//An internal structure implementing a single regex token.
struct regexToken {
    type: int
    quantifierMin: int = 1
    quantifierMax: int = 1
    content: char
    invert: int
    range: []regexRange*

    match: string
}

//An internal function that tries to match a character to a token.
matchToken(tp ptr, c char) int {
    t regexToken* = tp
    if t.type == REGEX_TYPE_WORD {
        if isAlphaNumeric(c) {
            if t.invert == 1 {
                return 0
            }
            return 1
        } else {
            if t.invert == 0 {
            return 0
            }
        }
    } else if t.type == REGEX_TYPE_DIGIT {
        if isNumber(c) {
            if t.invert == 1 {
                return 0
            }
            return 1
        } else {
            if t.invert == 0 {
            return 0
            }
        }
    } else if t.type == REGEX_TYPE_SPACE {
        if isSpace(c) {
            if t.invert == 1 {
                return 0
            }
            return 1
        } else {
            if t.invert == 0 {
            return 0
            }
        }
    } else if t.type == REGEX_TYPE_TEXT {
        if c == t.content {
            return 1
        }
    } else if t.type == REGEX_TYPE_ALL {
        return 1
    } else if t.type == REGEX_TYPE_RANGE {
        i=0; for i < len(t.range) {
            range = t.range[i]
            if c >= range.min {
                if c <= range.max {
                    return 1
                }
            }
            i++
        }
    }
    return 0
}

//A wrapper for a regex parser.
//This is the ouput of compileRegex().
//This structure should not be used by multiple functions at the same time.
struct regex {
    tokens: []regexToken*
    groups: []ptr

    //An internal function to process a string.
    //This should not be used if you are not trying to extend the implementation of regexes. 
    procesString(cps str, si int) int {
        clear(this.groups)
        i=0;for i<len(this.tokens) {
            t = this.tokens[i]
            t.match = string("")
            i++
        }
        s = string(cps)
        maxS = s.length - 1

        isGroup = 0
        alreadyInserted = []int

        isDelimited = 0

        i = 0;for i<len(this.tokens) {
            t = this.tokens[i]

            if t.type == REGEX_TYPE_GROUP_START {
                isGroup = 1
                ga = []regexToken*
                lg = len(this.groups)
                this.groups[lg] = ga
                i++
                continue
            } else if t.type == REGEX_TYPE_GROUP_END {
                isGroup = 0
                i++
                continue
            } else if isGroup == 1 {
                found = 0
                glm1 = len(this.groups) - 1
                cg = []regexToken*
                cg = this.groups[glm1]
                aii=0;for aii < len(alreadyInserted) {
                    ai = alreadyInserted[aii]
                    if ai == i {
                        found = 1
                        break
                    }
                    aii++
                }
                if found == 0 {
                    lai = len(alreadyInserted)
                    alreadyInserted[lai] = i
                    lcg = len(cg)
                    cg[lcg] = t
                }
            } else if t.type == REGEX_TYPE_END {
                if si < s.length {
                    return 0
                }
                i++
                continue
            } else if t.type == REGEX_TYPE_START {
                if si != 0 {
                    return 2
                }
                i++
                continue
            }

            currentMatch = 0

            for si < s.length {
                c = s.charAt(si)

                if matchToken(t, c) {
                    currentMatch++
                    if t.match.length == 0 {
                        t.match = string("")

                    }
                    t.match.append(charToStr(c))
                } else {
                    break
                }

                if t.quantifierMax != -1 {
                    if currentMatch == t.quantifierMax {
                        si++
                        break
                    }
                }

                si++
            }

            if currentMatch < t.quantifierMin {
                canGoBack = 0
                goBackLength = 0
                goBackI = i-1
                ppt = t
                for canGoBack == 0 {
                    if goBackI < 0 {
                        return 0
                    }
                    pt = this.tokens[goBackI]
                    if pt.type == REGEX_TYPE_GROUP_START {
                        goBackI--
                        continue
                    } else if pt.type == REGEX_TYPE_GROUP_END {
                        goBackI--
                        continue
                    }
                    if pt == null {
                        return 0
                    }
                    ppt.match.set("")
                    goBackMatchI = pt.match.length-1
                    nm = string("")
                    nbMatches = 0
                    for goBackMatchI >= 0 {
                        goBackLength++
                        gbc = pt.match.charAt(goBackMatchI)
                        if matchToken(ppt, gbc) {
                            nbMatches++
                            if ppt.quantifierMax == -1 {
                                if nbMatches >= ppt.quantifierMin {
                                    canGoBack = 1
                                    maxNm = pt.match.length - goBackLength
                                    nmI=0;for nmI<maxNm {
                                        nmc = pt.match.charAt(nmI)
                                        nm.append(charToStr(nmc))
                                        nmI++
                                    }
                                    pt.match.set(nm.str())
                                    if maxNm == 0 {
                                        canGoBack = 0
                                        goBackI--
                                        continue
                                    }
                                    
                                    break
                                }
                            } else if nbMatches <= ppt.quantifierMax {
                                if nbMatches >= ppt.quantifierMin {
                                    canGoBack = 1
                                    maxNm = pt.match.length - goBackLength
                                    nmI=0;for nmI<maxNm {
                                        nmc = pt.match.charAt(nmI)
                                        nm.append(charToStr(nmc))
                                        nmI++
                                    }
                                    pt.match.set(nm.str())
                                    if maxNm == 0 {
                                        canGoBack = 0
                                        goBackI--
                                        continue
                                    }
                                    
                                    break
                                }
                            }
                        }
                        goBackMatchI--
                    }

                    if goBackMatchI < 0 {
                        return 0
                    }

                    ppt = pt
                }

                if canGoBack == 0 {
                    return 0
                }

                si -= goBackLength
                

                i = goBackI+1
                continue

                return 0
            }

            i++
        }

        //TODO: if string end not reached on END token
        // if si < s.length {
        //     return 0
        // }

        return 1

    }

    //This tries to match a string to a regex. If the regex matches the string, this will return 1.
    matchString(s str) int {
        si = strlen(s)
        r int
        i=0;for i < si { 
            r = this.procesString(s, i)
            if r == 1 {
                break
            } else if r == 2 {
                return 0
            }
            i++
        }
        return r
    }

    //This tries to match every group of the regex to a substring and returns an array of str.
    findAllSubstring(s str) []str {
        si = strlen(s)
        r int
        i=0;for i < si { 
            r = this.procesString(s, i)
            if r == 1 {
                break
            } else if r == 2 {
                a = []str
                return a
            }
            i++
        }
        if r == 0 {
            a = []str
            return a
        }
        a = []str
        i=0;for i < len(this.groups) {
            g = []regexToken*
            g = this.groups[i]
            gs = string("")
            gi=0;for gi<len(g) {
                t = g[gi]
                gs.append(t.match.str())
                gi++
            }
            la = len(a)
            a[la] = gs.str()
            i++
        }

        return a
    }

}

//This is used to parse a regex expression and returns a pointer to its instance.
compileRegex(cpexpr str) regex* {
    regex = new regex
    expr = string(cpexpr)

    i=0; for i<expr.length {
        c = expr.charAt(i)
        tk = new regexToken
        tk.match = string("")
        if c == <char>92 {
            nc = expr.charAt(i+1)
            if nc == '^' {
                tk.type = REGEX_TYPE_TEXT
                tk.content = nc
                i++
            } else if nc == '$' {
                tk.type = REGEX_TYPE_TEXT
                tk.content = nc
                i++
            } else if nc == '(' {
                tk.type = REGEX_TYPE_TEXT
                tk.content = nc
                i++
            } else if nc == ')' {
                tk.type = REGEX_TYPE_TEXT
                tk.content = nc
                i++
            } else if nc == '.' {
                tk.type = REGEX_TYPE_TEXT
                tk.content = nc
                i++
            } else if nc == '{' {
                tk.type = REGEX_TYPE_TEXT
                tk.content = nc
                i++
            } else if nc == '}' {
                tk.type = REGEX_TYPE_TEXT
                tk.content = nc
                i++
            }
        } else if c == '^' {
            tk.type = REGEX_TYPE_START
        } else if c == '$' {
            tk.type = REGEX_TYPE_END
        } else if c == '(' {
            tk.type = REGEX_TYPE_GROUP_START
        } else if c == ')' {
            tk.type = REGEX_TYPE_GROUP_END
        } else if c == '.' {
            tk.type = REGEX_TYPE_ALL
        } else if c == '[' {
            tk.type = REGEX_TYPE_RANGE
            i++
            for i < expr.length {
                c = expr.charAt(i)            
                if c == ']' {
                    if expr.charAt(i-1) != <char>92 {
                        break
                    }
                }
                range = new regexRange
                if expr.charAt(i+1) == '-' {
                    range.min = c
                    range.max = expr.charAt(i+2)
                    i += 2
                } else {
                    range.min = c
                    range.max = c

                }
                ltkr = len(tk.range)
                tk.range[ltkr] = range
                i++
            }

        } else if i == 0 {
            tk.type = REGEX_TYPE_TEXT
            tk.content = c
        } else if expr.charAt(i-1) != <char>92 {
            tk.type = REGEX_TYPE_TEXT
            tk.content = c
        }
        
        if i > 0 {
            if expr.charAt(i-1) == <char>92 {
                c = expr.charAt(i)
                if c == 'w' {
                    tk.type = REGEX_TYPE_WORD
                } else if c == 'W' {
                    tk.type = REGEX_TYPE_WORD
                    tk.invert = 1
                } else if c == 'd' {
                    tk.type = REGEX_TYPE_DIGIT
                } else if c == 'D' {
                    tk.type = REGEX_TYPE_DIGIT
                    tk.invert = 1
                } else if c == 'b' {
                    tk.type = REGEX_TYPE_BOUNDARY
                } else if c == 'B' {
                    tk.type = REGEX_TYPE_BOUNDARY
                    tk.invert = 1
                } else if c == 's' {
                    tk.type = REGEX_TYPE_SPACE
                } else if c == 'S' {
                    tk.type = REGEX_TYPE_SPACE
                    tk.invert = 1
                } else if c == '.' {
                    tk.type = REGEX_TYPE_TEXT
                    tk.content = c
                } else {
                    panic("VA TE FAIRE FOUTRE BORDEL (pos: "+intToStr(i)+")")
                    return null
                }

            }
        }
        if tk.type != 0 {
            i++
                if i < expr.length {
                    c = expr.charAt(i)
                    if c == '+' {
                        tk.quantifierMin = 1
                        tk.quantifierMax = -1
                    } else if c == '*' {
                        tk.quantifierMin = 0
                        tk.quantifierMax = -1
                    } else if c == '?' {
                        tk.quantifierMin = 0
                        tk.quantifierMax = 1
                    } else if c == '{' {
                        i++
                        min = string("")
                        max = string("")
                        isMin = 1
                        for i < expr.length {
                            c = expr.charAt(i)
                            if c == '}' {
                                break
                            }else if c == ',' {
                                isMin = 0
                            } else if isMin == 1 {
                                if isNumber(c) == 0 {
                                    return null
                                }
                                min.append(charToStr(c))
                            } else {
                                if isNumber(c) == 0 {
                                    return null
                                }
                                max.append(charToStr(c))
                            }

                            i++
                        }
                        if min.length > 0 {
                            tk.quantifierMin = stringToInt(min)
                            if max.length == 0 {
                                if isMin == 0 {
                                    tk.quantifierMax = -1
                                } else {
                                    tk.quantifierMax = tk.quantifierMin
                                }
                            }
                        }
                        if max.length > 0 {
                            tk.quantifierMax = stringToInt(max)
                            if min.length == 0 {
                                if isMin == 1 {
                                    tk.quantifierMin = -1
                                } else {
                                    tk.quantifierMin = tk.quantifierMax
                                }
                            }
                        }

                    } else {
                        i--
                    }
                }
            lrt = len(regex.tokens)
            regex.tokens[lrt] = tk
            
        }

        i++
    }
    

    return regex
}

//Example
// #include "iostream.bah"
// #include "string.bah"
// #include "regex.bah"
// #include "array.bah"
// main(){
// regex = compileRegex("\\w+(\\d)\\w*B(.{1,3})")
// if regex == 0 {
// panic("WRONG REGEX SYNTAX")
// }
// test = "dsasd65gdfdfgBf"
// if regex.matchString(test) {

// println("It matches")

// res = regex.findAllSubstring(test)
// i = 0;for i < len(res) {
// s = res[i]
// println(s)
// i++
// }
// } else {
// println("Sad little string got no match...")
// }
// }
