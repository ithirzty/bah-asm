#import "iostream.bah"

#define! pipe(fd ptr)
#define! fcntl(fd ptr, m int, f int) int
#define! dup2(fd int, fd2 int)

//A wrapper for unix pipes.
//Note: this library will only work on unix systems.
struct pipe {
    fd: []int32
    //Weither the pipe is openned or closed.
    openned: bool = false

    //If .shouldBlock(false), the pipe will not wait for more data to come on read.
    //Instead, it will stop the reading.
    shouldBlock(b bool) {
        if this.openned == false {
            panic("pipe: cannot .shouldBlock() on closed pipe.")
        }
        if b == false {
            flags = fcntl(this.fd[0], noCheck(F_GETFL), 0)
            fcntl(this.fd[0], noCheck(F_SETFL), noCheck(flags | O_NONBLOCK))
        }
    }

    //To open a pipe.
    open() {
        allocateArray(this.fd, 2)
        pipe(cArr(this.fd))
        flags = fcntl(this.fd[0], noCheck(F_GETFL), 0)
        fcntl(this.fd[0], noCheck(F_SETFL), noCheck(flags | O_NONBLOCK))
        this.openned = true
    }
    //To close a pipe.
    close() {
        rp = this.fd[0]
        wp = this.fd[1]
        close(<ptr>rp)
        close(<ptr>wp)
        this.openned = false
    }
    //To write to the pipe.
    write(d []char) {
        wp ptr = this.fd[1]
        data = cArr(d)
        buff = memoryAllocSTR(len(d)+2)
        memcpy(buff, data, len(d))
        write(wp, buff, len(d)+2)
    }

    //To read from the pipe.
    read() []char {
        r = []char
        rp ptr = this.fd[0]
        buff = buffer 1024

        success = false
        
        for 1==1 {
            s = read(rp, <ptr>buff, 1024)
            if s == -1 {
                if success == true {
                    break
                }
            } else {
                success = true
                i=0; for i < s, i++ {
                    r[len(r)] = buff[i]
                }
            }
        }
        return r
    }

}