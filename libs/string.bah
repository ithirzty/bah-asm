//Used for concatenating two known length strs.
strCatOffset(dest str, destLen uint, src str, srcLen uint) {
    memcpy(<ptr>(<uint><ptr>dest+destLen+strLenSize), <ptr>(<uint><ptr>src + strLenSize), srcLen)
}

charToStr(c char) str {
    r ptr = memoryAllocSTR(6)
    
    lp = <uint32*>r
    *lp = 1

    cp = <char*>(<uint>r + 4)
    *cp = c

    return r
}

intToStr(i int) str {
    if i == 0 {
        return "0"
    }

    s = buffer 66

    s[65] = <char>0
    
    subZero = false

    if i < 0 {
        subZero = true
        i = 0-i
    }

    ind = 64

    for i != 0, i /= 10 {
        conv = i % 10
        conv += 48
        s[ind] = <char>conv
        ind--
    }

    if subZero == true {
        s[ind] = '-'
        ind--
    }

    return buffToStr(<char*>(<uint>s + ind + 1))
}

//Used to know if a char is upper-cased, will return 1 if true.
isUpper(c char) bool {
    return c >= 'A' && c <= 'Z'
}

//Used to know if a char is lower-cased, will return 1 if true.
isLower(c char) bool {
    return c >= 'a' && c <= 'z'
}

//Used to know if a char is a letter, will return 1 if true.
isLetter(s char) bool {
    return isLower(s) || isUpper(s)
}

//Used to know if a char is a number, will return 1 if true.
isNumber(c char) bool {
    return c >= '0' && c <= '9'
}

//Used to know if a char is alphanumeric, will return 1 if true.
//Alphanumeric means letter or number.
isAlphaNumeric(s char) bool {
    return isLetter(s) || isNumber(s)
}

//Used to know if a char is a space / new line character, will return 1 if true.
isSpace(c char) bool {
    return c == <char>32 || c == <char>9 || c == <char>10 || c == <char>11 || c == <char>13
}

//Replace the substring 'what' by the string 'by' inside the string 's'.
strReplace(s str, what str, by str) str {
    l = len(s)
    wl = len(what)
    bl = len(by)
    ind = 0
    r = strBuilder{}
    i=0; for i < l, i++ {
        c = s[i]
        if c == what[ind] {
            ind++
            if ind == wl {
                ind = 0
                j=0; for j < bl, j++ {
                    r.append(by[j])
                }
            }
        } else {
            j=0; for j < ind, j++ {
                r.append(s[i - ind + j])
            }
            ind = 0
            r.append(c)
        }
    }
    j=0; for j < ind, j++ {
        r.append(s[i - ind + j])
    }
    return r.str()
}


//A string wrapper to make string manipulation easier.
struct string {
    //The content of the string as a str.
    content: str
    //Weither the string is mutable. This should not be changed.
    editable: bool
    //The length of the string.
    length: int

    //Sets the string value to the specified str.
    set(s str) {
        this.length = len(s)
        this.editable = false
        this.content = s
    }

    //Used internally to make a string mutable without causing conflict.
    //This is because setting the content of a string will not copy the new str to memory
    //until it is changed.
    makeEditable() {
        this.editable = true
        old = this.content
        this.content = <str>memoryAllocSTR(this.length+5)
        lp = <uint32*>this.content
        *lp = this.length
        strncpy(this.content, old, this.length)
    }

    //Appends the specified str to the string.
    append(s str) {
        if this.editable == false {
            this.makeEditable()
        }
        sl = len(s)
        nc = <uint32*>memoryAllocSTR(sl + this.length + 5)
        memcpy(<ptr>(<uint><ptr>nc + strLenSize), <ptr>(<uint><ptr>this.content + strLenSize), this.length)
        strCatOffset(<str>nc, this.length, s, sl)
        this.content = <str>nc
        this.length += sl
        *nc = this.length
    }
    
    //Prepends the specified str to the string.
    prepend(s str) {
        this.editable = true
        sl = len(s)
        nl = this.length + sl
        tmpS = this.content
        nc = <uint32*>memoryAllocSTR(nl + 5)
        if nc == null {
            panic("Error appending to string, possibly due to memory shortage.")
        }
        *nc = nl
        this.content = <str>nc
        strncpy(this.content, s, sl)
        strCatOffset(this.content, sl, tmpS, this.length)
        this.length = nl
    }

    //Returns the char at the specified position of the string.
    charAt(i int) char {
        return this.content[i]
    }

    //Used to know if the content of the string is the same as the specified str, returns 1 if true.
    compare(s str) bool {
        return s == this.content
    }

    //Used for getting the content of the string as a str.
    str() str {
        return this.content
    }

    //Used to replace a substring by another.
    replace(nd str, rl str) {
        this.set(strReplace(this.content, nd, rl))
    }

    //Counts the number of times a specific chars apears in the string.
    countChar(need char) int {
        c = 0
        i=0; for i < this.length, i++ {
            if this.charAt(i) == need {
                c++
            }
        }
        return c
    }

    //Used to count the number of substring(s).
    count(needle str) int {
        count = 0
        countIndex = 0
        nl = len(needle)
        i=0; for i < this.length, i++ {
            c = this.content[i]
            sc = needle[countIndex]
            if c == sc {
                countIndex++
                if countIndex == nl {
                    count++
                    countIndex = 0
                }
            } else {
                countIndex = 0
            }
        }
        return count
    }

    contains(needle str) bool {
        ind = 0
        nl = len(needle)
        i=0; for i < this.length, i++ {
            if this.content[i] == needle[ind] {
                ind++
                if ind == nl {
                    return true
                }
            } else {
                ind = 0
            }
        }
        return false
    }

    containsChar(needle char) bool {
        i=0; for i < this.length, i++ {
            if needle == this.content[i] {
                return true
            }
        }
        return false
    }

    //Used to know if the string as a specified prefix, returns 1 if true.
    hasPrefix(need str) bool {
        i = 0
        nl = len(need)
        if this.length < nl {
            return false
        }
        for i < nl {
            c = this.charAt(i)
            sc = need[i]
            if c != sc {
                return false
            }
            i++
        }
        return true
    }

    //Used to know if the string as a specified suffix, returns 1 if true.
    hasSuffix(need str) bool {
        nl = len(need)
        if this.length < nl {
            return false
        }
        i =  this.length - nl
        needleIndex = 0
        for i < this.length {
            c = this.charAt(i)
            sc = need[needleIndex]
            if c != sc {
                return false
            }
            needleIndex++
            i++
        }
        
        return true

    }

    //Used for triming spaces at the beginning of the string.
    trim() {
        if this.length == 0 {
            return
        }
        fc = this.charAt(0)
        if isSpace(fc) == false {
            return
        }
        i=0;for i < this.length, i++ {
            if isSpace(this.charAt(i)) == false {
                break
            }
        }
        if i > 0 {
            this.length = this.length - i
            this.content = this.content[i:]
            this.editable = true
        }
    }

    //Used to trim a specified number of charcaters from the beginning of the string.
    trimLeft(s uint) {
        if s > this.length {
            return
        }
        this.content = this.content[s:this.length]
        this.editable = true
        this.length = this.length - s
    }

    //Used to trim a specified number of charcaters from the end of the string.
    trimRight(s uint) {
        if s > this.length {
            return
        }
        this.content = this.content[:this.length-s]
        this.editable = true
        this.length = this.length - s
    }

    //Used for concatenating antother string.
    //This is like .append() except this is used by the compiler for string + string.
    add(s2 string) string {
        r = string{}
        r.length = this.length + s2.length
        r.content = memoryAllocSTR(r.length + 5)
        strncpy(r.content, this.content, this.length)
        strCatOffset(r.content, this.length, s2.content, s2.length)
        return r
    }

    //Used for editting the content of the string as an array.
    asArr() []char {
        if this.editable == false {
            this.makeEditable()
        }
        arr = new Bah_Array_Type
        arr.data = <ptr>(<uint><ptr>this.content+strLenSize)
        arr.length = this.length
        arr.realLength = this.length
        arr.elemSize = 1
        return <[]char>arr
    }

    resetLength() {
        if this.editable == false || <ptr>this.content == null {
            return
        }
        ln uint32* = this.content
        *ln = this.length
    }

}

//Used to make a string wrapper from a specified str.
string(s str) string {
    a = string{}
    a.set(s)
    return a
}

//Converts an uint into a str.
uintToStr(i uint) str {
    if i == 0 {
        return "0"
    }

    s = buffer 66
    s[65] = <char>0
    ind = 64

    for i != 0, i /= 10 {
        conv = i % 10
        conv += 48
        s[ind] = <char>conv
        ind--
    }

    return buffToStr(<char*>(<uint>s + ind + 1))
}

const Bah_string_hex_characters = "0123456789ABCDEF"

uintToHex(i uint) str {
    if i == 0 {
        return "0"
    }

    s = buffer 66
    s[65] = <char>0
    ind = 64

    for i != 0, i /= 16 {
        s[ind] = Bah_string_hex_characters[i % 16]
        ind--
    }

    return buffToStr(<char*>(<uint>s + ind + 1))
}


hexToInt(s str) int {
    l = len(s) - 2
    r = 0
    e = 1
    i=0; for i < l, i++ {
        if s[len(s) - i - 1] <= '9' {
            r += e * <int>(s[len(s) - i - 1] - '0')
        } else if isUpper(s[len(s) - i - 1]) {
            r += e * (<int>(s[len(s) - i - 1] - 'A') + 10)
        } else {
            r += e * (<int>(s[len(s) - i - 1] - 'a') + 10)
        }
        e *= 16
    }

    return r
}

hexToUint(s str) uint {
    l = len(s) - 2
    r uint = 0
    e = 1
    i=0; for i < l, i++ {
        if s[len(s) - i - 1] <= '9' {
            r += e * <uint>(s[len(s) - i - 1] - '0')
        } else if isUpper(s[len(s) - i - 1]) {
            r += e * (<uint>(s[len(s) - i - 1] - 'A') + 10)
        } else {
            r += e * (<uint>(s[len(s) - i - 1] - 'a') + 10)
        }
        e *= 16
    }

    return r
}


//Used to convert an integer into a string.
//*It returns a string, not a str*
intToString(i int) string {
    r = string(intToStr(i))
    return r
}

//Converts a float to a str.
floatToStr(x float) str {
    s = buffer 32
    s[31] = <char>0
    i = 30
    decimals uint32
    units int

    if x > 100000000.0 {
        return "inf"
    }

    if x < -100000000.0 {
        return "-inf"
    }

    if x < 0. {
        units = <int>(-1. * x)
        tx = x
        if units > 999999999 {
            tx -= <float>units
        }
        decimals = <uint>(tx * -100000000.) % 100000000
    } else {
        units = <int>x
        tx = x
        if units > 999999999 {
            tx -= <float>units
        }
        decimals = <uint>(tx * 100000000.) % 100000000
    }

    if decimals == 0 {
        s[i] = '0'
        i--
    } else {
        realDecs = decimals
        for decimals > 0, decimals /= 10 {
            if (decimals % 10) != 0 {
                break
            }
        }
        for decimals > 0, decimals /= 10 {
            s[i] = <char>(decimals % 10) + '0'
            i--
        }
        n = 10000000
        for realDecs < n, n /= 10 {
            s[i] = '0'
            i--
        }
    }


    
    s[i] = '.'

    if units == 0 {
        i--
        s[i] = '0'
    } else {
        for units > 0, units /= 10 {
            i--
            s[i] = <char>(units % 10) + '0'
        }
    }


    if x < 0. {
        i--
        s[i] = '-'
    }
    return buffToStr(<ptr>(<uint>s + i))
}

//Used for converting a string to an int.
strToInt(s str) int {
    l int = len(s)-1
    offset = 1
    r = 0
    end = 0
    if s[0] == '-' {
        end = 1
    }
    for l >= end, l-- {
        if s[l] < '0' || s[l] > '9' {
            continue
        }
        r += (<int>s[l] - 48) * offset
        offset *= 10
    }
    if end == 1 {
        r = 0-r
    }
    return r
} 

//Used for converting a string to an uint.
strToUint(s str) uint {
    l int = len(s)-1
    offset = 1
    r = <uint>0
    for l >= 0, l-- {
        if s[l] < '0' || s[l] > '9' {
            continue
        }
        r += (<int>s[l] - 48) * offset
        offset *= 10
    }
    return r
} 


//Used for converting a string to a float
strToFloat(s str) float {
    return strtod(s, null)
}


//Used to convert a string into an integer.
//*It takes a string, not a str*
stringToInt(s string) int {
    i int = atol(s.content)
    return i
}

//Used for splitting a string into multiple substrings delimited by the specified delimiter.
splitString(s string, sep str) []string {
    sepInd = 0
    start = 0
    r = []string

    i=0; for i < s.length, i++ {
        c = s.charAt(i)
        if c == sep[sepInd] {
            sepInd++
            if sepInd == len(sep) {
                sepInd = 0
                end = i-len(sep)+1
                if start != end {
                    r[len(r)] = string(s.content[start:end])
                }
                start = i+1
            }
        } else {
            sepInd = 0
        }
    }

    end = i-len(sep)+1
    if start < end {
        r[len(r)] = string(s.content[start:end])
    }

    return r
}

strJoin(arr []str, sep str) str {
    if len(arr) == 0 {
        return ""
    }
    r = arr[0]
    i=1; for i < len(arr), i++ {
        r = r + sep + arr[i]
    }
    return r
}

//Used for joinning an array of strings with a specified separator into a string.
joinString(a []string, sep str) string {
    i = 0
    s = string("")
    max = len(a) - 1
    for i < len(a) {
        e = a[i]
        if e.length == 0 {
            i++
            continue
        }
        tmpS = string(e.str())
        if i != max {
            tmpS.append(sep)
        }
        s.append(tmpS.str())
        i++
    }
    return s
}

//Used to get the content of a string before a certain delimiter.
splitStringBefore(s string, sp str) str {
    sep = string(sp)
    if sep.length >= s.length {
        return ""
    }
    sepIndex = 0
    foundIndex = 0
    i=0;for i < s.length {
        c = s.charAt(i)
        sc = sep.charAt(sepIndex)
        if c == sc {
            if sepIndex == 0 {
                foundIndex = i - 1
            }
            sepIndex++
            if sepIndex == sep.length {
                max = s.length - foundIndex - 1
                s.trimRight(max)
                return s.str()
            }
        } else {
            foundIndex = 0
            sepIndex = 0
        }

        i++
    }

    return ""

}

//Used to lower-case a string.
toLower(s string) string {
    ns = []char
    i=0;for i < s.length {
        c = s.charAt(i)
        if isUpper(c) {
            c += <char>32
        }
        ns[len(ns)] = c
        i++
    }
    return string(arrToStr(ns))
}

//Use string(s).hasPrefix(prefix) instead.
//This function has known bugs.
strHasPrefix(s str, need str) bool {
    i = 0
    nl = len(need)
    sl = len(s)
    if sl < nl {
        return false
    }
    for i < nl { 
        if s[i] != need[i] {
            return false
        }
        i++
    }
    return true
}

//Use string(s).hasSuffix(suffix) instead.
//This function has known bugs.
strHasSuffix(s str, need str) bool {
    sl = len(s)
    nl = len(need)
    if nl > sl {
        return false
    }
    offset = sl - nl
    i=0; for i < nl, i++ {
        if s[i + offset] != need[i] {
            return false
        }
    }
    return true
}

//This is used to count the number of substrings inside a str.
strCount(src str, needle str) int {
    count = 0
    countIndex = 0
    sl = len(src)
    nl = len(needle)
    i=0; for i < sl, i++ {
        c = src[i]
        sc = needle[countIndex]
        if c == sc {
            countIndex++
            if countIndex == nl {
                count++
                countIndex = 0
            }
        } else {
            countIndex = 0
        }
    }
    return count
}
