#include "thread.bah"
#include "queue.bah"

//Internal wrapper for a channel used by the compiler for every chan:* type.
//A channel is a queue that is thread safe. It can be safely used between different threads.
//The length of the channel can be capped thanks to the **.cap** field.
//**The channel will need to be destroyed after its utilization.**
//*Note: a queue/channel can only take pointers.*
struct channel {
    m_mut: pthread_mutex_t

    w_cond: pthread_cond_t
    r_cond: pthread_cond_t

    w_waitting: int = 0
    r_waitting: int = 0

    queue: queue*
    cap: int = -1

    //To send data to the channel.
    //This can only send pointers.
    send(data ptr) {
        pthread_mutex_lock(&this.m_mut)
        if this.cap != -1 {
            for this.queue.length == this.cap {
                this.w_waitting++
                pthread_cond_wait(&this.w_cond, &this.m_mut)
                this.w_waitting--
            }
        }
        this.queue.insert(data)
        if this.r_waitting > 0 {
            pthread_cond_signal(&this.r_cond)
        }
        pthread_mutex_unlock(&this.m_mut)
    }

    sendAny(data ptr, len int) {
        pthread_mutex_lock(&this.m_mut)
        if this.cap != -1 {
            for this.queue.length == this.cap {
                this.w_waitting++
                pthread_cond_wait(&this.w_cond, &this.m_mut)
                this.w_waitting--
            }
        }
        p = memoryAlloc(len)
        memcpy(p, data, len)
        this.queue.insert(p)
        if this.r_waitting > 0 {
            pthread_cond_signal(&this.r_cond)
        }
        pthread_mutex_unlock(&this.m_mut)
    }

    //To receive data (a pointer) from the channel.
    //Note that this is a blockant operation.
    //If no data is available the function will pause the execution of the current thread.
    receive() ptr {
        pthread_mutex_lock(&this.m_mut)
        for this.queue.length == 0 {
            this.r_waitting++
            pthread_cond_wait(&this.r_cond, &this.m_mut)
            this.r_waitting--
        }
        data = this.queue.pop()
        if this.w_waitting > 0 {
            pthread_cond_signal(&this.w_cond)
        }
        pthread_mutex_unlock(&this.m_mut)

        // if data == null {
        //     return this.receive()
        // }
        return data
    }

    //To destroy a channel after using it. Not destroying it could result in memory leaks.
    destroy() {
        pthread_mutex_destroy(&this.m_mut)
        pthread_cond_destroy(&this.w_cond)
        pthread_cond_destroy(&this.r_cond)
    }

    //To get the length of the current channel.
    //Returns the number of pointers stored inside the channel.
    len() int {
        l = this.queue.length
        return l
    }

}

//To initiate a channel
//*Do not use channel{}, this will not initiate the mutex and the queue.*
channel() channel* {
    c = new channel
    pthread_mutex_init(&c.m_mut, null)
    pthread_cond_init(&c.w_cond, null)
    pthread_cond_init(&c.r_cond, null)
    c.queue = new queue

    return c
}

//Sets the maximal capacity of a channel.
setChanCap(c ptr, cap int) {
    cp channel* = c
    cp.cap = cap
}