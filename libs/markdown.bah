#import "iostream.bah"
#import "string.bah"

//An internal function iterating over the str s until s[*i] is not a space.
_markdown_skipSpace(s str, i int*) uint {
    j = *i
    for *i < len(s), *i++ {
        if isSpace(s[*i]) == false {
            return *i - j
        }
    }
    return *i - j
}

//An internal structure to define a single line of markdown by its type.
struct markdownLine {
    line: str
    type: int = 0
    rel: str
    next: bool
    indent: uint
}

//A wrapper for the markdown parser.
struct markdown {
    lines: []markdownLine

    //Internal function for generatil partial HTML (line by line).
    htmlRange(from int, to int) str {
        html = ""

        i=from;for i < to, i++ {
            l = this.lines[i]

            code = l.line
            rn = 0

            if l.next {
                rn = 1
                for this.lines[rn + i].indent > l.indent {
                    rn++
                }
                rn--
                code += " " + this.htmlRange(i+1, i + 1 + rn)
            }

            if l.type == 0 {
                html += code + "<br/>"
            } else if l.type <= 6 {
                n = intToStr(l.type)
                html += "<h"+n+">" + code + "</h"+n+">"
                if l.type < 3 {
                    html += "<hr/>"
                }
            } else if l.type == 7 {
                html += "<ul>"
                for i < to, i++ {
                    if this.lines[i].type != 7 {
                        i--
                        break
                    }

                    innerCode = this.lines[i].line

                    if this.lines[i].next {
                        rn = 1
                        for this.lines[rn + i].indent > this.lines[i].indent {
                            rn++
                        }
                        rn--
                        innerCode += " " + this.htmlRange(i+1, i + 1 + rn)
                        i += rn
                    }


                    html += "<li>"+innerCode+"</li>\n"
                }
                html += "</ul>"
            } else if l.type == 8 {
                html += "<ol>"
                for i < to, i++ {
                    if this.lines[i].type != 8 {
                        i--
                        break
                    }

                    innerCode = this.lines[i].line

                    if this.lines[i].next {
                        rn = 1
                        for this.lines[rn + i].indent > this.lines[i].indent {
                            rn++
                        }
                        rn--
                        innerCode += " " + this.htmlRange(i+1, i + 1 + rn)
                        i += rn
                    }


                    html += "<li>"+innerCode+"</li>"
                }
                html += "</ol>"
            } else if l.type == 9 {
                html += "<blockquote>" + code + "</blockquote>"
            } else if l.type == 10 {
                html += "<pre class=\"highlight highlight-source-"+l.rel+"\">"+code+"</pre>"
           }

            i += rn
        }
        return html
    }

    //This returns an str containg the markdown translated as html.
    html() str {
        return "<p>" + this.htmlRange(0, len(this.lines)) + "</p>"
    }

}

//An internal function to parse every inline element of a line.
//Inline elements are syntax features that do not impact the entire line.
//For instance, the bold delimiter is an inline feature, the hastag at the biginning of a line is not.
parseMarkdownInline(l str) str {
    nl = ""
    lastI = 0

    i=0; for i < len(l), i++ {

        //parsing a link
        if l[i] == '[' {
            bracks = [i, 0]
            pars = [0, 0]

            j=i+1; for j < len(l), j++ {
                if l[j] == ']' {
                    break
                }
            }

            bracks[1] = j
            j++

            if j >= len(l) {
                continue
            }

            _markdown_skipSpace(l, &j)

            if l[j] != '(' {
                continue
            }
            pars[0] = j

            j++; for j < len(l), j++ {
                if l[j] == ')' {
                    break
                }
            }

            if j == len(l) {
                continue
            }

            pars[1] = j

            if bracks[0] > 0 && l[bracks[0]-1] == '!' {
                nl += l[lastI:bracks[0]-1] + "<img src=\"" + l[pars[0]+1:pars[1]] + "\" alt=\"" + l[bracks[0]+1:bracks[1]] + "\" />"
            } else {
                nl += l[lastI:bracks[0]] + "<a href=\"" + l[pars[0]+1:pars[1]] + "\">" + l[bracks[0]+1:bracks[1]] + "</a>"
            }
            lastI = j+1
            i = lastI

        //parsing bold
        } else if i+2 < len(l) && l[i] == '*' && l[i+1] == '*' && isSpace(l[i+2]) == false {
            start = i+2
            
            j=start; for j+1 < len(l), j++ {
                if l[j] == '*' && l[j+1] == '*' {
                    break
                }
            }

            if j+1 == len(l) || isSpace(l[j-1]) {
                continue
            }

            nl += l[lastI:i] + "<b>"+parseMarkdownInline(l[start:j])+"</b>"
            lastI = j+2
            i = lastI

        //parsing italic
        } else if i+1 < len(l) && l[i] == '*' && isSpace(l[i+1]) == false {
            start = i+1
            
            j=start; for j < len(l), j++ {
                if l[j] == '*' {
                    break
                }
            }

            if j == len(l) || isSpace(l[j-1]) {
                continue
            }

            nl += l[lastI:i] + "<i>"+parseMarkdownInline(l[start:j])+"</i>"
            lastI = j+1
            i = lastI

        //parsing code
        } else if i+1 < len(l) && l[i] == '`' && isSpace(l[i+1]) == false {
            start = i+1
            
            j=start; for j < len(l), j++ {
                if l[j] == '`' {
                    break
                }
            }

            if j == len(l) || isSpace(l[j-1]) {
                continue
            }

            nl += l[lastI:i] + "<code>"+parseMarkdownInline(l[start:j])+"</code>"
            lastI = j+1
            i = lastI

        //parsing underline
        } else if i+2 < len(l) && l[i] == '_' && l[i+1] == '_' && isSpace(l[i+2]) == false {
            start = i+2
            
            j=start; for j+1 < len(l), j++ {
                if l[j] == '_' && l[j+1] == '_' {
                    break
                }
            }

            if j+1 == len(l) || isSpace(l[j-1]) {
                continue
            }

            nl += l[lastI:i] + "<u>"+parseMarkdownInline(l[start:j])+"</u>"
            lastI = j+2
            i = lastI

        //parsing strikethrough
        } else if i+2 < len(l) && l[i] == '~' && l[i+1] == '~' && isSpace(l[i+2]) == false {
            start = i+2
            
            j=start; for j+1 < len(l), j++ {
                if l[j] == '~' && l[j+1] == '~' {
                    break
                }
            }

            if j+1 == len(l) || isSpace(l[j-1]) {
                continue
            }

            nl += l[lastI:i] + "<s>"+parseMarkdownInline(l[start:j])+"</s>"
            lastI = j+2
            i = lastI
        }
    }

    if lastI == 0 {
        return l
    }

    if i > lastI {
        nl += l[lastI:len(l)]
    }

    return nl
}

//Escapes characters that are known to be text and not html generated by the parser.
escapeMarkdownHTML(s str) str {
    s = strReplace(s, ">", "&gt;")
    s = strReplace(s, "<", "&lt;")
    return s
}

//To parse a markdown document.
//This will return a markdown structure that can be then transpilled into html.
parseMarkdown(s str) markdown {
    m = markdown{}
    lastI = 0

    i=0; for i <= len(s), i++ {

        if i+2 < len(s) && s[i] == '`' && s[i+1] == '`' && s[i+2] == '`' {
            start = i+3
            l = markdownLine{
                type: 10
            }
            j = start; for j < len(s), j++ {
                if s[j] == <char>10 {
                    break
                }
            }
            l.rel = s[start:j]
            j++
            start = j

            for j+2 < len(s), j++ {
                if s[j] == '`' && s[j+1] == '`' && s[j+2] == '`' {
                    break
                }
            }

            if j+2 == len(s) {
                continue
            }

            if s[j-1] == <char>10 {
                l.line = s[start:j-1]
            } else {
                l.line = s[start:j]
            }

            m.lines[len(m.lines)] = l

            lastI = j+3
            for lastI < len(s), lastI++ {
                if s[lastI] == <char>10 {
                    break
                }
            }
            i = lastI
            continue
        }

        if i == len(s) || s[i] == <char>10 {
            type = 0

            indent = _markdown_skipSpace(s, &lastI)

            if len(m.lines) > 0 {
                if indent > m.lines[len(m.lines)-1].indent && m.lines[len(m.lines)-1].type != 10 {
                    m.lines[len(m.lines)-1].next = true
                }
            }


            if lastI >= i {
                m.lines[len(m.lines)] = markdownLine{
                    line: ""
                    type: type
                }
                lastI = i+1
                continue
            }

            j = lastI; for s[j] == '#' {
                j++
            }


            type = j - lastI
            if j < len(s) && isSpace(s[j]) && type > 0 && type <= 6 {
                lastI = j
            } else {
                type = 0
                if lastI+1 < len(s) && s[lastI] == '-' && isSpace(s[lastI+1]) {
                    type = 7
                } else if lastI+1 < len(s) && isNumber(s[lastI]) && s[lastI+1] == '.' {
                    type = 8
                } else if lastI+1 < len(s) && s[lastI] == '>' && isSpace(s[lastI+1]) {
                    type = 9
                }

                if type != 0 {
                    lastI += 2
                }

            }

            m.lines[len(m.lines)] = markdownLine{
                line: parseMarkdownInline(s[lastI:i])
                indent: indent
                type: type
            }
            lastI = i+1
        }
    }

    return m
}


//Example
// #include "iostream.bah"
// #include "markdown.bah"
// main() {
// article = "# How to write Bah code?
//
// > It's not that hard
//
// Simply **smash** your keyboard
// "
// md = parseMarkdown(article)
// htmlCode = md.html()
// println(htmlCode)
// }