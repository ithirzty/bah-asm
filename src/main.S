.global _start
_start:
movq %rsp, %rbp
call .__Bah_init
movl (%rsp), %edi
leaq 8(%rsp), %rsi
leaq 16(%rsp,%rdi,8), %rdx
call __bah_argsToArr
movq %rax, %rdi
call main
movl %eax, %edi
call _exit
.data
.VAR_38:
.int 30
.asciz "GC: could not allocate memory."
.VAR_39:
.int 23
.asciz "/opt/bah-asm/gc.bah:191"
.VAR_84:
.int 15
.asciz "GC: fatal error"
.VAR_85:
.int 23
.asciz "/opt/bah-asm/gc.bah:225"
.VAR_263:
.int 32
.asciz "GC: could not reallocate memory."
.VAR_264:
.int 23
.asciz "/opt/bah-asm/gc.bah:681"
.VAR_275:
.int 34
.asciz "GC: fatal error doing reallocation"
.VAR_276:
.int 23
.asciz "/opt/bah-asm/gc.bah:694"
.VAR_388:
.int 0
.asciz ""
.VAR_389:
.int 16
.asciz "0123456789ABCDEF"
.VAR_391:
.int 17
.asciz "v0.135 (build 15)"
.VAR_392:
.int 5
.asciz "linux"
.VAR_394:
.int 13
.asciz "/opt/bah-asm/"
.VAR_398:
.int 2
.asciz "if"
.VAR_399:
.int 4
.asciz "else"
.VAR_400:
.int 3
.asciz "for"
.VAR_401:
.int 6
.asciz "return"
.VAR_402:
.int 3
.asciz "new"
.VAR_403:
.int 5
.asciz "break"
.VAR_404:
.int 8
.asciz "continue"
.VAR_405:
.int 6
.asciz "struct"
.VAR_406:
.int 5
.asciz "const"
.VAR_407:
.int 6
.asciz "extend"
.VAR_408:
.int 8
.asciz "function"
.VAR_409:
.int 5
.asciz "async"
.VAR_410:
.int 2
.asciz "in"
.VAR_411:
.int 4
.asciz "chan"
.VAR_412:
.int 3
.asciz "map"
.VAR_413:
.int 6
.asciz "buffer"
.VAR_414:
.int 3
.asciz "let"
.VAR_415:
.int 4
.asciz "then"
.VAR_416:
.int 11
.asciz "memoryAlloc"
.VAR_417:
.int 14
.asciz "memoryAlloc_NZ"
.VAR_418:
.int 14
.asciz "memoryAllocSTR"
.VAR_419:
.int 17
.asciz "memoryAllocSTR_NZ"
.VAR_420:
.int 16
.asciz "__bah_compareStr"
.VAR_421:
.int 15
.asciz "__bah_argsToArr"
.VAR_422:
.int 13
.asciz "strSubstitute"
.VAR_423:
.int 15
.asciz "arraySubstitute"
.VAR_424:
.int 16
.asciz "GC_thread_create"
.VAR_442:
.int 4
.asciz "%rdi"
.VAR_443:
.int 4
.asciz "%rsi"
.VAR_444:
.int 4
.asciz "%rdx"
.VAR_445:
.int 4
.asciz "%rcx"
.VAR_446:
.int 3
.asciz "%r8"
.VAR_447:
.int 3
.asciz "%r9"
.VAR_449:
.int 4
.asciz "%edi"
.VAR_450:
.int 4
.asciz "%esi"
.VAR_451:
.int 4
.asciz "%edx"
.VAR_452:
.int 4
.asciz "%ecx"
.VAR_453:
.int 4
.asciz "%r8d"
.VAR_454:
.int 4
.asciz "%r9d"
.VAR_456:
.int 3
.asciz "%di"
.VAR_457:
.int 3
.asciz "%si"
.VAR_458:
.int 3
.asciz "%dx"
.VAR_459:
.int 3
.asciz "%cx"
.VAR_460:
.int 4
.asciz "%r8w"
.VAR_461:
.int 4
.asciz "%r9w"
.VAR_463:
.int 4
.asciz "%dil"
.VAR_464:
.int 4
.asciz "%sil"
.VAR_465:
.int 3
.asciz "%dl"
.VAR_466:
.int 3
.asciz "%cl"
.VAR_467:
.int 4
.asciz "%r8b"
.VAR_468:
.int 4
.asciz "%r9b"
.VAR_471:
.int 5
.asciz "%xmm0"
.VAR_472:
.int 5
.asciz "%xmm1"
.VAR_473:
.int 5
.asciz "%xmm2"
.VAR_474:
.int 5
.asciz "%xmm3"
.VAR_475:
.int 5
.asciz "%xmm4"
.VAR_476:
.int 5
.asciz "%xmm5"
.VAR_477:
.int 5
.asciz "%xmm6"
.VAR_478:
.int 5
.asciz "%xmm7"
.VAR_479:
.int 5
.asciz "%xmm8"
.VAR_480:
.int 5
.asciz "%xmm9"
.VAR_481:
.int 6
.asciz "%xmm10"
.VAR_482:
.int 6
.asciz "%xmm11"
.VAR_483:
.int 6
.asciz "%xmm12"
.VAR_484:
.int 6
.asciz "%xmm13"
.VAR_485:
.int 6
.asciz "%xmm14"
.VAR_486:
.int 6
.asciz "%xmm15"
.VAR_488:
.int 5
.asciz "%ymm0"
.VAR_489:
.int 5
.asciz "%ymm1"
.VAR_490:
.int 5
.asciz "%ymm2"
.VAR_491:
.int 5
.asciz "%ymm3"
.VAR_492:
.int 5
.asciz "%ymm4"
.VAR_493:
.int 5
.asciz "%ymm5"
.VAR_494:
.int 5
.asciz "%ymm6"
.VAR_495:
.int 5
.asciz "%ymm7"
.VAR_496:
.int 5
.asciz "%ymm8"
.VAR_497:
.int 5
.asciz "%ymm9"
.VAR_498:
.int 6
.asciz "%ymm10"
.VAR_499:
.int 6
.asciz "%ymm11"
.VAR_500:
.int 6
.asciz "%ymm12"
.VAR_501:
.int 6
.asciz "%ymm13"
.VAR_502:
.int 6
.asciz "%ymm14"
.VAR_503:
.int 6
.asciz "%ymm15"
.VAR_505:
.int 4
.asciz "%rax"
.VAR_506:
.int 4
.asciz "%rbx"
.VAR_510:
.int 4
.asciz "%eax"
.VAR_511:
.int 4
.asciz "%ebx"
.VAR_530:
.int 4
.asciz "%r10"
.VAR_531:
.int 4
.asciz "%r11"
.VAR_532:
.int 4
.asciz "%r12"
.VAR_533:
.int 4
.asciz "%r13"
.VAR_534:
.int 4
.asciz "%r14"
.VAR_535:
.int 4
.asciz "%r15"
.VAR_541:
.int 5
.asciz "%r10d"
.VAR_542:
.int 5
.asciz "%r11d"
.VAR_543:
.int 5
.asciz "%r12d"
.VAR_544:
.int 5
.asciz "%r13d"
.VAR_545:
.int 5
.asciz "%r14d"
.VAR_546:
.int 5
.asciz "%r15d"
.VAR_548:
.int 3
.asciz "%bx"
.VAR_552:
.int 5
.asciz "%r10w"
.VAR_553:
.int 5
.asciz "%r11w"
.VAR_554:
.int 5
.asciz "%r12w"
.VAR_555:
.int 5
.asciz "%r13w"
.VAR_556:
.int 5
.asciz "%r14w"
.VAR_557:
.int 5
.asciz "%r15w"
.VAR_559:
.int 3
.asciz "%bl"
.VAR_563:
.int 5
.asciz "%r10b"
.VAR_564:
.int 5
.asciz "%r11b"
.VAR_565:
.int 5
.asciz "%r12b"
.VAR_566:
.int 5
.asciz "%r13b"
.VAR_567:
.int 5
.asciz "%r14b"
.VAR_568:
.int 5
.asciz "%r15b"
.VAR_571:
.int 3
.asciz "%al"
.VAR_572:
.int 3
.asciz "%ax"
.VAR_581:
.int 4
.asciz "sete"
.VAR_582:
.int 5
.asciz "setne"
.VAR_583:
.int 4
.asciz "setg"
.VAR_584:
.int 4
.asciz "setl"
.VAR_585:
.int 5
.asciz "setle"
.VAR_586:
.int 5
.asciz "setge"
.VAR_588:
.int 5
.asciz "setnp"
.VAR_589:
.int 4
.asciz "setp"
.VAR_591:
.int 0
.asciz ""
.VAR_593:
.int 4
.asciz "seta"
.VAR_595:
.int 5
.asciz "setnb"
.VAR_600:
.int 4
.asciz "setb"
.VAR_605:
.int 3
.asciz "orb"
.VAR_606:
.int 3
.asciz "orw"
.VAR_607:
.int 3
.asciz "orl"
.VAR_608:
.int 3
.asciz "orq"
.VAR_610:
.int 4
.asciz "xorb"
.VAR_611:
.int 4
.asciz "xorw"
.VAR_612:
.int 4
.asciz "xorl"
.VAR_613:
.int 4
.asciz "xorq"
.VAR_615:
.int 4
.asciz "andb"
.VAR_616:
.int 4
.asciz "andw"
.VAR_617:
.int 4
.asciz "andl"
.VAR_618:
.int 4
.asciz "andq"
.VAR_622:
.int 4
.asciz "sall"
.VAR_623:
.int 4
.asciz "salq"
.VAR_627:
.int 4
.asciz "sarl"
.VAR_628:
.int 4
.asciz "sarq"
.VAR_631:
.int 4
.asciz "movb"
.VAR_632:
.int 4
.asciz "movw"
.VAR_633:
.int 4
.asciz "movl"
.VAR_634:
.int 4
.asciz "movq"
.VAR_639:
.int 5
.asciz "pushq"
.VAR_644:
.int 4
.asciz "popq"
.VAR_646:
.int 4
.asciz "addb"
.VAR_647:
.int 4
.asciz "addw"
.VAR_648:
.int 4
.asciz "addl"
.VAR_649:
.int 4
.asciz "addq"
.VAR_651:
.int 4
.asciz "subb"
.VAR_652:
.int 4
.asciz "subw"
.VAR_653:
.int 4
.asciz "subl"
.VAR_654:
.int 4
.asciz "subq"
.VAR_656:
.int 5
.asciz "imulb"
.VAR_657:
.int 5
.asciz "imulw"
.VAR_658:
.int 5
.asciz "imull"
.VAR_659:
.int 5
.asciz "imulq"
.VAR_661:
.int 4
.asciz "mulb"
.VAR_662:
.int 4
.asciz "mulw"
.VAR_663:
.int 4
.asciz "mull"
.VAR_664:
.int 4
.asciz "mulq"
.VAR_666:
.int 5
.asciz "idivb"
.VAR_667:
.int 5
.asciz "idivw"
.VAR_668:
.int 5
.asciz "idivl"
.VAR_669:
.int 5
.asciz "idivq"
.VAR_671:
.int 4
.asciz "divb"
.VAR_672:
.int 4
.asciz "divw"
.VAR_673:
.int 4
.asciz "divl"
.VAR_674:
.int 4
.asciz "divq"
.VAR_676:
.int 4
.asciz "cmpb"
.VAR_677:
.int 4
.asciz "cmpw"
.VAR_678:
.int 4
.asciz "cmpl"
.VAR_679:
.int 4
.asciz "cmpq"
.VAR_683:
.int 6
.asciz "comiss"
.VAR_684:
.int 6
.asciz "comisd"
.VAR_688:
.int 7
.asciz "ucomiss"
.VAR_689:
.int 7
.asciz "ucomisd"
.VAR_693:
.int 4
.asciz "movd"
.VAR_698:
.int 5
.asciz "addss"
.VAR_699:
.int 5
.asciz "addsd"
.VAR_703:
.int 5
.asciz "mulss"
.VAR_704:
.int 5
.asciz "mulsd"
.VAR_708:
.int 5
.asciz "subss"
.VAR_709:
.int 5
.asciz "subsd"
.VAR_713:
.int 5
.asciz "divss"
.VAR_714:
.int 5
.asciz "divsd"
.VAR_715:
.int 6
.asciz "cmovne"
.VAR_716:
.int 4
.asciz "cqto"
.VAR_724:
.int 16
.asciz "cache/cache.bobj"
.VAR_729:
.int 1
.asciz "r"
.VAR_737:
.int 5
.asciz "cache"
.VAR_784:
.int 1
.asciz "w"
.VAR_785:
.int 12
.asciz "[]cacheFile*"
.VAR_786:
.int 10
.asciz "cacheFile*"
.VAR_787:
.int 3
.asciz "str"
.VAR_788:
.int 4
.asciz "file"
.VAR_789:
.int 3
.asciz "int"
.VAR_790:
.int 4
.asciz "last"
.VAR_791:
.int 3
.asciz "ver"
.VAR_792:
.int 4
.asciz "date"
.VAR_793:
.int 21
.asciz "[]cacheFileDependency"
.VAR_794:
.int 19
.asciz "cacheFileDependency"
.VAR_795:
.int 4
.asciz "path"
.VAR_797:
.int 12
.asciz "dependencies"
.VAR_806:
.int 6
.asciz "cache/"
.VAR_810:
.int 2
.asciz ".o"
.VAR_843:
.int 1
.asciz "*"
.VAR_857:
.int 4
.asciz "bool"
.VAR_884:
.int 4
.asciz "byte"
.VAR_889:
.int 4
.asciz "uint"
.VAR_907:
.int 5
.asciz "float"
.VAR_932:
.int 2
.asciz "[]"
.VAR_943:
.int 4
.asciz "map:"
.VAR_954:
.int 5
.asciz "chan:"
.VAR_965:
.int 3
.asciz "ptr"
.VAR_970:
.int 7
.asciz "buffer:"
.VAR_981:
.int 9
.asciz "function("
.VAR_995:
.int 2
.asciz ", "
.VAR_1000:
.int 1
.asciz ")"
.VAR_1009:
.int 1
.asciz " "
.VAR_1020:
.int 1
.asciz "["
.VAR_1029:
.int 1
.asciz ","
.VAR_1038:
.int 1
.asciz "]"
.VAR_1123:
.int 1
.asciz "."
.VAR_1357:
.int 4
.asciz "\033[0m"
.VAR_1358:
.int 5
.asciz "\033[33m"
.VAR_1359:
.int 5
.asciz "\033[36m"
.VAR_1360:
.int 5
.asciz "\033[32m"
.VAR_1361:
.int 5
.asciz "\033[35m"
.VAR_1362:
.int 4
.asciz "\033[2m"
.VAR_1363:
.int 7
.asciz "\033[1;31m"
.VAR_1400:
.int 1
.asciz ":"
.VAR_1411:
.int 7
.asciz "[ERROR]"
.VAR_1420:
.int 7
.asciz "\033[1;37m"
.VAR_1430:
.int 33
.asciz "Type error, cannot convert type '"
.VAR_1434:
.int 11
.asciz "' to type '"
.VAR_1437:
.int 2
.asciz "'."
.VAR_1442:
.int 11
.asciz ".__Bah_init"
.VAR_1443:
.int 2
.asciz "$0"
.VAR_1444:
.int 2
.asciz "$1"
.VAR_1534:
.int 2
.asciz "||"
.VAR_1593:
.int 2
.asciz "&&"
.VAR_1669:
.int 5
.asciz "func_"
.VAR_1679:
.int 12
.asciz "as -f -Z -o "
.VAR_1681:
.int 12
.asciz " > /dev/null"
.VAR_1780:
.int 4
.asciz ".add"
.VAR_1784:
.int 4
.asciz ".sub"
.VAR_1788:
.int 5
.asciz ".mult"
.VAR_1792:
.int 4
.asciz ".div"
.VAR_1810:
.int 22
.asciz "Wrong type in call to "
.VAR_1837:
.int 48
.asciz "'s return type is not the same as its arguments."
.VAR_1850:
.int 2
.asciz "=="
.VAR_1852:
.int 2
.asciz "!="
.VAR_1854:
.int 1
.asciz "0"
.VAR_1855:
.int 2
.asciz "in"
.VAR_1858:
.int 18
.asciz "Invalid operation."
.VAR_1861:
.int 2
.asciz "*="
.VAR_1864:
.int 1
.asciz "/"
.VAR_1865:
.int 2
.asciz "/="
.VAR_1868:
.int 1
.asciz "%"
.VAR_1869:
.int 2
.asciz "%="
.VAR_1873:
.int 37
.asciz "Cannot do modulo operation on floats."
.VAR_1875:
.int 1
.asciz "-"
.VAR_1876:
.int 2
.asciz "-="
.VAR_1879:
.int 1
.asciz "+"
.VAR_1880:
.int 2
.asciz "+="
.VAR_1882:
.int 2
.asciz ">>"
.VAR_1884:
.int 2
.asciz "<<"
.VAR_1886:
.int 1
.asciz "&"
.VAR_1888:
.int 1
.asciz "|"
.VAR_1890:
.int 1
.asciz "^"
.VAR_1901:
.int 1
.asciz "<"
.VAR_1905:
.int 1
.asciz "1"
.VAR_1913:
.int 1
.asciz ">"
.VAR_1916:
.int 2
.asciz "<="
.VAR_1919:
.int 2
.asciz ">="
.VAR_1928:
.int 45
.asciz "Internal error: could not generate operation."
.VAR_1982:
.int 4
.asciz "data"
.VAR_1984:
.int 12
.asciz "__data_start"
.VAR_1990:
.int 3
.asciz "bss"
.VAR_1992:
.int 11
.asciz "__bss_start"
.VAR_1998:
.int 3
.asciz "end"
.VAR_2000:
.int 9
.asciz "__bss_end"
.VAR_2006:
.int 5
.asciz "debug"
.VAR_2008:
.int 15
.asciz ".bah_debug_info"
.VAR_2014:
.int 10
.asciz "debugLines"
.VAR_2016:
.int 21
.asciz ".bah_debug_info_lines"
.VAR_2036:
.int 41
.asciz "Cannot use a register without casting it."
.VAR_2046:
.int 14
.asciz "buffer_declare"
.VAR_2069:
.int 5
.asciz "_init"
.VAR_2075:
.int 13
.asciz "strct_declare"
.VAR_2165:
.int 13
.asciz "array_declare"
.VAR_2219:
.int 13
.asciz "tuple_declare"
.VAR_2299:
.int 1
.asciz "4"
.VAR_2483:
.int 17
.asciz "cannot yet unpack"
.VAR_2484:
.int 45
.asciz "/home/alois/Documents/bah-asm/src/gen.bah:720"
.VAR_2552:
.int 37
.asciz "Cannot perform operation on pointers."
.VAR_2748:
.int 6
.asciz "sizeof"
.VAR_2755:
.int 3
.asciz "len"
.VAR_2764:
.int 17
.asciz "__bah_arrayLength"
.VAR_2772:
.int 15
.asciz "__bah_strlenSTR"
.VAR_2789:
.int 5
.asciz "panic"
.VAR_2791:
.int 11
.asciz "__Bah_panic"
.VAR_2794:
.int 1
.asciz "\""
.VAR_2888:
.int 2
.asciz "$4"
.VAR_2899:
.int 11
.asciz ".Bah_async_"
.VAR_2903:
.int 1
.asciz "_"
.VAR_2912:
.int 4
.asciz "args"
.VAR_3123:
.int 44
.asciz "Internal error generating value asm symbol: "
.VAR_3125:
.int 9
.asciz "bahValue*"
.VAR_3127:
.int 6
.asciz "pemdas"
.VAR_3128:
.int 8
.asciz "bahToken"
.VAR_3130:
.int 4
.asciz "cont"
.VAR_3131:
.int 4
.asciz "type"
.VAR_3133:
.int 3
.asciz "pos"
.VAR_3134:
.int 4
.asciz "line"
.VAR_3135:
.int 7
.asciz "begLine"
.VAR_3137:
.int 7
.asciz "isValue"
.VAR_3138:
.int 3
.asciz "tok"
.VAR_3140:
.int 4
.asciz "left"
.VAR_3141:
.int 5
.asciz "right"
.VAR_3142:
.int 9
.asciz "asmSymbol"
.VAR_3143:
.int 4
.asciz "name"
.VAR_3144:
.int 4
.asciz "size"
.VAR_3146:
.int 7
.asciz "address"
.VAR_3147:
.int 6
.asciz "offset"
.VAR_3148:
.int 5
.asciz "level"
.VAR_3149:
.int 9
.asciz "operStart"
.VAR_3150:
.int 7
.asciz "isFloat"
.VAR_3151:
.int 5
.asciz "isReg"
.VAR_3152:
.int 5
.asciz "stack"
.VAR_3153:
.int 5
.asciz "isTmp"
.VAR_3155:
.int 6
.asciz "active"
.VAR_3156:
.int 3
.asciz "sym"
.VAR_3157:
.int 9
.asciz "isPointer"
.VAR_3158:
.int 13
.asciz "isStaticValue"
.VAR_3159:
.int 8
.asciz "isSelfOp"
.VAR_3160:
.int 7
.asciz "isAsync"
.VAR_3162:
.int 5
.asciz "value"
.VAR_3163:
.int 3
.asciz "val"
.VAR_3220:
.int 19
.asciz "__Bah_realocate_arr"
.VAR_3243:
.int 48
.asciz "Internal error generating left-value asm symbol."
.VAR_3260:
.int 12
.asciz "reflect_elem"
.VAR_3271:
.int 18
.asciz "size not known yet"
.VAR_3272:
.int 46
.asciz "/home/alois/Documents/bah-asm/src/gen.bah:1312"
.VAR_3279:
.int 46
.asciz "/home/alois/Documents/bah-asm/src/gen.bah:1316"
.VAR_3450:
.int 38
.asciz "Cannot be converted to a pointer type."
.VAR_3490:
.int 54
.asciz "Invalid conversion, you may need to convert a pointer."
.VAR_3545:
.int 51
.asciz "Internal error generating conversion of asm symbol."
.VAR_3550:
.int 45
.asciz "Cannot (yet) use a pointer as a global value."
.VAR_3606:
.int 11
.asciz ".VAR_ARRAY_"
.VAR_3664:
.int 59
.asciz "Immediate value of this declaration is not yet implemented."
.VAR_3676:
.int 79
.asciz "Cannot use this value as a global value. (immediate value not yet implemented)."
.VAR_3679:
.int 41
.asciz ".global .bah_debug_info\n.bah_debug_info:\n"
.VAR_3694:
.int 6
.asciz ".quad "
.VAR_3696:
.int 8
.asciz "\n.quad ."
.VAR_3698:
.int 10
.asciz "_end\n.int "
.VAR_3702:
.int 9
.asciz "\n.asciz \""
.VAR_3704:
.int 2
.asciz "\"\n"
.VAR_3711:
.int 8
.asciz ".quad 0\n"
.VAR_3715:
.int 12
.asciz "[compiling] "
.VAR_3732:
.int 12
.asciz " -object -o "
.VAR_3813:
.int 8
.asciz "function"
.VAR_3821:
.int 22
.asciz "Invalid function type."
.VAR_3823:
.int 1
.asciz "("
.VAR_3827:
.int 32
.asciz "Expected function argument list."
.VAR_3838:
.int 23
.asciz "Expected argument name."
.VAR_3844:
.int 38
.asciz "Expected argument type after its name."
.VAR_3848:
.int 22
.asciz "Invalid argument type."
.VAR_3861:
.int 25
.asciz "Incomplete function type."
.VAR_3872:
.int 31
.asciz "Expected closing function type."
.VAR_3878:
.int 48
.asciz "Expected closing argument list in function type."
.VAR_3893:
.int 40
.asciz "Invalid array type without element type."
.VAR_3902:
.int 13
.asciz "Invalid type."
.VAR_3919:
.int 28
.asciz "Expected closing tuple type."
.VAR_3928:
.int 7
.asciz "float32"
.VAR_3931:
.int 5
.asciz "int16"
.VAR_3934:
.int 5
.asciz "int32"
.VAR_3943:
.int 4
.asciz "char"
.VAR_3946:
.int 6
.asciz "uint16"
.VAR_3949:
.int 6
.asciz "uint32"
.VAR_3978:
.int 6
.asciz "buffer"
.VAR_3990:
.int 41
.asciz "Invalid buffer type. Expected buffer:size"
.VAR_4000:
.int 34
.asciz "Expected a symbol after unary '*'."
.VAR_4005:
.int 20
.asciz "Expected left-value."
.VAR_4008:
.int 37
.asciz "Cannot use not yet declared variable."
.VAR_4015:
.int 45
.asciz "Cannot set the value of a non pointer symbol."
.VAR_4039:
.int 35
.asciz "Cannot set the value of a constant."
.VAR_4069:
.int 46
.asciz "Cannot access member of a non structure value."
.VAR_4076:
.int 26
.asciz "Invalid member identifier."
.VAR_4102:
.int 25
.asciz "Unknown structure member."
.VAR_4111:
.int 20
.asciz "Missing index value."
.VAR_4127:
.int 19
.asciz "One too many token."
.VAR_4135:
.int 24
.asciz "Expected value as index."
.VAR_4162:
.int 41
.asciz "Cannot index a tuple by non static value."
.VAR_4168:
.int 28
.asciz "Index cannot be less than 0."
.VAR_4180:
.int 60
.asciz "Cannot access tuple's value of index larger than its length."
.VAR_4185:
.int 38
.asciz "Cannot use lvalue as indexable symbol."
.VAR_4190:
.int 41
.asciz "Cannot use a pointer as indexable symbol."
.VAR_4197:
.int 39
.asciz "Cannot set the value of a str by index."
.VAR_4244:
.int 1
.asciz "="
.VAR_4308:
.int 1
.asciz "{"
.VAR_4320:
.int 1
.asciz "}"
.VAR_4350:
.int 18
.asciz "Invalid cast type."
.VAR_4355:
.int 30
.asciz "Missing value after type cast."
.VAR_4357:
.int 3
.asciz "new"
.VAR_4372:
.int 18
.asciz "Unknown structure."
.VAR_4394:
.int 20
.asciz "Expected field name."
.VAR_4407:
.int 44
.asciz "Unknown field name in structure declaration."
.VAR_4439:
.int 15
.asciz "Expected value."
.VAR_4443:
.int 42
.asciz "Did not expect anything after field value."
.VAR_4456:
.int 48
.asciz "Unknown field position in structure declaration."
.VAR_4478:
.int 34
.asciz "Expected separator between values."
.VAR_4526:
.int 44
.asciz "Expected buffer length after buffer keyword."
.VAR_4539:
.int 27
.asciz "Unknown array element type."
.VAR_4560:
.int 20
.asciz "Cannot use as value."
.VAR_4583:
.int 29
.asciz "Expected coma between values."
.VAR_4598:
.int 42
.asciz "Expected a value inside tuple declaration."
.VAR_4623:
.int 38
.asciz "Expected a symbol to get pointer from."
.VAR_4628:
.int 27
.asciz "Expected addressable value."
.VAR_4635:
.int 47
.asciz "Expected a symbol to access value from pointer."
.VAR_4640:
.int 29
.asciz "Expected value as an address."
.VAR_4647:
.int 42
.asciz "Cannot access value of a non-pointer type."
.VAR_4652:
.int 15
.asciz "Value expected."
.VAR_4679:
.int 15
.asciz "Unknown symbol."
.VAR_4705:
.int 17
.asciz "Expected a value."
.VAR_4716:
.int 30
.asciz "Cannot use symbol as function."
.VAR_4724:
.int 13
.asciz "Unknown type."
.VAR_4733:
.int 34
.asciz "Sizeof can only take one argument."
.VAR_4820:
.int 36
.asciz "Too many arguments in function call."
.VAR_4824:
.int 44
.asciz "Expected value as argument in function call."
.VAR_4832:
.int 14
.asciz "reflectElement"
.VAR_4863:
.int 14
.asciz "Bah_Array_Type"
.VAR_4893:
.int 29
.asciz "Missing end of function call."
.VAR_4903:
.int 54
.asciz "Expected separator between arguments in function call."
.VAR_4910:
.int 18
.asciz "Missing arguments."
.VAR_4947:
.int 33
.asciz "Expected value as begining index."
.VAR_4955:
.int 25
.asciz "Expected value as length."
.VAR_4967:
.int 36
.asciz "Cannot use symbol as indexable type."
.VAR_5066:
.int 60
.asciz "Cannot access the member of a value that is not a structure."
.VAR_5100:
.int 22
.asciz "Unknown struct member."
.VAR_5162:
.int 46
.asciz "Cannot do operation on non value on the right."
.VAR_5172:
.int 11
.asciz "Wrong type."
.VAR_5268:
.int 45
.asciz "Cannot do operation on non value on the left."
.VAR_5304:
.int 59
.asciz "Cannot increment/decrement a symbol that is not an integer."
.VAR_5325:
.int 57
.asciz "Cannot use 'in' operator on anything other than an array."
.VAR_5408:
.int 23
.asciz "Unknown hash directive."
.VAR_5410:
.int 1
.asciz "!"
.VAR_5423:
.int 67
.asciz "Expected {codeblock} or coma separator (,) between hash directives."
.VAR_5430:
.int 41
.asciz "Directive should be used at global scope."
.VAR_5432:
.int 5
.asciz "#cLib"
.VAR_5441:
.int 22
.asciz "Expected library name."
.VAR_5451:
.int 7
.asciz "#define"
.VAR_5457:
.int 23
.asciz "Invalid use of #define."
.VAR_5465:
.int 45
.asciz "Invalid function type in function definition."
.VAR_5468:
.int 4
.asciz "main"
.VAR_5470:
.int 19
.asciz "function([]str) int"
.VAR_5474:
.int 59
.asciz "Invalid main function type, should be: function([]str) int."
.VAR_5478:
.int 51
.asciz "Didn't expected anything after function definition."
.VAR_5484:
.int 19
.asciz "Expected type name."
.VAR_5495:
.int 20
.asciz "Type already exists."
.VAR_5498:
.int 8
.asciz "#include"
.VAR_5507:
.int 24
.asciz "Invalid use of #include."
.VAR_5538:
.int 17
.asciz "Cannot find file."
.VAR_5544:
.int 7
.asciz "#import"
.VAR_5553:
.int 23
.asciz "Invalid use of #import."
.VAR_5590:
.int 5
.asciz "#init"
.VAR_5599:
.int 18
.asciz "Unknown directive."
.VAR_5604:
.int 36
.asciz "Cannot return outside of a function."
.VAR_5615:
.int 49
.asciz "Expected return value, current function of type: "
.VAR_5627:
.int 58
.asciz "Expected value, cannot return anything other than a value."
.VAR_5631:
.int 51
.asciz "Did not expect anything after the return statement."
.VAR_5639:
.int 30
.asciz "Did not expect a return value."
.VAR_5692:
.int 50
.asciz "Did not expect if statement outside of a function."
.VAR_5708:
.int 37
.asciz "Expected a condition in if statement."
.VAR_5715:
.int 4
.asciz "else"
.VAR_5736:
.int 31
.asciz "Did not expect else block here."
.VAR_5741:
.int 2
.asciz "if"
.VAR_5758:
.int 42
.asciz "Expected a condition in else if statement."
.VAR_5806:
.int 30
.asciz "Expected at least a condition."
.VAR_5813:
.int 69
.asciz "Type error, condition of a loop should be a boolean instead of type '"
.VAR_5836:
.int 8
.asciz "continue"
.VAR_5852:
.int 54
.asciz "Did not expect structure definition inside a function."
.VAR_5857:
.int 29
.asciz "Invalid structure definition."
.VAR_5862:
.int 23
.asciz "Invalid structure name."
.VAR_5868:
.int 28
.asciz "Cannot redefine a structure."
.VAR_5871:
.int 6
.asciz "extend"
.VAR_5886:
.int 28
.asciz "No structure named that way."
.VAR_5909:
.int 36
.asciz "Expected start of fields definition."
.VAR_5916:
.int 19
.asciz "Invalid filed name."
.VAR_5929:
.int 31
.asciz "Invalid method type definition."
.VAR_5941:
.int 4
.asciz "this"
.VAR_5960:
.int 30
.asciz "Expected ':' after field name."
.VAR_5979:
.int 43
.asciz "Expected a field default value after equal."
.VAR_6008:
.int 41
.asciz "Did not expect anything after field type."
.VAR_6135:
.int 46
.asciz "Function with a return type shall be returned."
.VAR_6151:
.int 46
.asciz "Invalid function type in function declaration."
.VAR_6159:
.int 28
.asciz "Cannot redeclare a function."
.VAR_6165:
.int 31
.asciz "Function declaration missmatch."
.VAR_6178:
.int 39
.asciz "Expected a value on the right of equal."
.VAR_6182:
.int 53
.asciz "Expected a symbol or an address on the left of equal."
.VAR_6188:
.int 14
.asciz "Expected type."
.VAR_6192:
.int 39
.asciz "Did not expect anything after the type."
.VAR_6196:
.int 57
.asciz "Cannot cast the left value type outside of a declaration."
.VAR_6203:
.int 38
.asciz "Invalid self operation on declaration."
.VAR_6270:
.int 35
.asciz "Cannot redeclare a global variable."
.VAR_6361:
.int 39
.asciz "Cannot declare a const without a value."
.VAR_6365:
.int 56
.asciz "Expected a const name on the left of equal, got nothing."
.VAR_6369:
.int 58
.asciz "Expected a const value on the right of equal, got nothing."
.VAR_6372:
.int 27
.asciz "Expected a constant's name."
.VAR_6403:
.int 22
.asciz "That's a good one lol."
.VAR_6404:
.int 49
.asciz "/home/alois/Documents/bah-asm/src/parser.bah:2738"
.VAR_6419:
.int 56
.asciz "Did not expect continue statement outside of a function."
.VAR_6424:
.int 38
.asciz "Did not expect anything after keyword."
.VAR_6429:
.int 53
.asciz "Did not expect break statement outside of a function."
.VAR_6439:
.int 57
.asciz "Did not expect async function call outside of a function."
.VAR_6448:
.int 43
.asciz "Expected function call after async keyword."
.VAR_6460:
.int 6
.asciz "return"
.VAR_6466:
.int 3
.asciz "for"
.VAR_6468:
.int 6
.asciz "struct"
.VAR_6470:
.int 5
.asciz "const"
.VAR_6474:
.int 5
.asciz "break"
.VAR_6476:
.int 5
.asciz "async"
.VAR_6480:
.int 16
.asciz "Invalid keyword."
.VAR_6511:
.int 51
.asciz "Expected a value on the left of equal, got nothing."
.VAR_6515:
.int 52
.asciz "Expected a value on the right of equal, got nothing."
.VAR_6552:
.int 17
.asciz "Meaningless line."
.VAR_6557:
.int 13
.asciz "Not expected."
.VAR_6563:
.int 42
.asciz "Expected a symbol in variable declaration."
.VAR_6575:
.int 26
.asciz "Cannot redeclare variable."
.VAR_6635:
.int 1
.asciz ";"
.VAR_6645:
.int 15
.asciz "Code position: "
.VAR_6666:
.int 1
.asciz "o"
.VAR_6667:
.int 24
.asciz "Name of the output file."
.VAR_6668:
.int 1
.asciz "v"
.VAR_6669:
.int 21
.asciz "Get compiler version."
.VAR_6670:
.int 6
.asciz "object"
.VAR_6671:
.int 23
.asciz "Compile to object file."
.VAR_6672:
.int 6
.asciz "silent"
.VAR_6673:
.int 27
.asciz "Should not output anything."
.VAR_6674:
.int 4
.asciz "trim"
.VAR_6675:
.int 23
.asciz "Removes all debug data."
.VAR_6676:
.int 3
.asciz "asm"
.VAR_6677:
.int 25
.asciz "Compile to assembly file."
.VAR_6678:
.int 20
.asciz "disableOptimizations"
.VAR_6679:
.int 34
.asciz "Disables generation optimizations."
.VAR_6680:
.int 9
.asciz "noImports"
.VAR_6681:
.int 40
.asciz "Redirects #import directive to #include."
.VAR_6683:
.int 100
.asciz "Includes in depth debug informations, useful for debugging. This also redirects imports to includes."
.VAR_6684:
.int 9
.asciz "noBuiltin"
.VAR_6685:
.int 28
.asciz "Do not import Bah's runtime."
.VAR_6688:
.int 35
.asciz "Bah compiler (asm branch) version: "
.VAR_6696:
.int 26
.asciz "Author: Alois Laurent Boe."
.VAR_6710:
.int 6
.asciz "#linux"
.VAR_6715:
.int 7
.asciz "#darwin"
.VAR_6717:
.int 6
.asciz "darwin"
.VAR_6720:
.int 8
.asciz "#windows"
.VAR_6722:
.int 7
.asciz "windows"
.VAR_6725:
.int 6
.asciz "#debug"
.VAR_6729:
.int 7
.asciz "#static"
.VAR_6732:
.int 8
.asciz "#dynamic"
.VAR_6739:
.int 53
.asciz ".global .bah_debug_info_lines\n.bah_debug_info_lines:\n"
.VAR_6742:
.int 44
.asciz ".global _start\n_start:\nmovq %rsp, %rbp\ncall "
.VAR_6745:
.int 81
.asciz "\nmovl (%rsp), %edi\nleaq 8(%rsp), %rsi\nleaq 16(%rsp,%rdi,8), %rdx\ncall main\n.data\n"
.VAR_6754:
.int 70
.asciz "\nmovl (%rsp), %edi\nleaq 8(%rsp), %rsi\nleaq 16(%rsp,%rdi,8), %rdx\ncall "
.VAR_6757:
.int 60
.asciz "\nmovq %rax, %rdi\ncall main\nmovl %eax, %edi\ncall _exit\n.data\n"
.VAR_6763:
.int 38
.asciz ".bss\n.global __bss_start\n__bss_start:\n"
.VAR_6764:
.int 6
.asciz ".text\n"
.VAR_6767:
.int 6
.asciz ".data\n"
.VAR_6769:
.int 5
.asciz ".bss\n"
.VAR_6775:
.int 16
.asciz "Could not open '"
.VAR_6785:
.int 11
.asciz "builtin.bah"
.VAR_6842:
.int 8
.asciz ".byte 0\n"
.VAR_6848:
.int 29
.asciz ".global __bss_end\n__bss_end:\n"
.VAR_6852:
.int 35
.asciz ".global __data_start\n__data_start:\n"
.VAR_6869:
.int 7
.asciz "Parsed "
.VAR_6872:
.int 10
.asciz " lines in "
.VAR_6878:
.int 7
.asciz "ms.\033[0m"
.VAR_6903:
.int 2
.asciz ".S"
.VAR_6936:
.int 9
.asciz "as -f -o "
.VAR_6960:
.int 24
.asciz "Error assembling program"
.VAR_6974:
.int 2
.asciz " -"
.VAR_6985:
.int 50
.asciz "ld -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o "
.VAR_6991:
.int 6
.asciz ".o -lc"
.VAR_7003:
.int 21
.asciz "Error linking program"
.VAR_7007:
.int 26
.asciz "\033[1;32mDone. (compiled in "
.VAR_7013:
.int 7
.asciz "ms)\033[0m"
.global .bah_debug_info_lines
.bah_debug_info_lines:
.byte 1
.int 0
.int 42
.asciz "/home/alois/Documents/bah-asm/src/main.bah"
.byte 1
.int 1
.int 24
.asciz "/opt/bah-asm/builtin.bah"
.byte 1
.int 2
.int 23
.asciz "/opt/bah-asm/cBinds.bah"
.byte 1
.int 3
.int 19
.asciz "/opt/bah-asm/gc.bah"
.byte 1
.int 4
.int 23
.asciz "/opt/bah-asm/thread.bah"
.byte 2
.quad .loc_4_100
.int 4
.int 100
.byte 2
.quad .loc_4_101
.int 4
.int 101
.byte 2
.quad .loc_4_107
.int 4
.int 107
.byte 2
.quad .loc_4_112
.int 4
.int 112
.byte 2
.quad .loc_4_117
.int 4
.int 117
.byte 2
.quad .loc_4_129
.int 4
.int 129
.byte 2
.quad .loc_4_138
.int 4
.int 138
.byte 2
.quad .loc_4_139
.int 4
.int 139
.byte 2
.quad .loc_4_144
.int 4
.int 144
.byte 2
.quad .loc_4_149
.int 4
.int 149
.byte 2
.quad .loc_4_156
.int 4
.int 156
.byte 2
.quad .loc_4_157
.int 4
.int 157
.byte 2
.quad .loc_4_158
.int 4
.int 158
.byte 2
.quad .loc_4_172
.int 4
.int 172
.byte 2
.quad .loc_4_178
.int 4
.int 178
.byte 2
.quad .loc_4_183
.int 4
.int 183
.byte 2
.quad .loc_4_189
.int 4
.int 189
.byte 2
.quad .loc_4_190
.int 4
.int 190
.byte 2
.quad .loc_4_191
.int 4
.int 191
.byte 2
.quad .loc_3_41
.int 3
.int 41
.byte 2
.quad .loc_3_151
.int 3
.int 151
.byte 2
.quad .loc_3_152
.int 3
.int 152
.byte 2
.quad .loc_3_154
.int 3
.int 154
.byte 2
.quad .loc_3_155
.int 3
.int 155
.byte 2
.quad .loc_3_157
.int 3
.int 157
.byte 2
.quad .loc_3_159
.int 3
.int 159
.byte 2
.quad .loc_3_160
.int 3
.int 160
.byte 2
.quad .loc_3_161
.int 3
.int 161
.byte 2
.quad .loc_3_162
.int 3
.int 162
.byte 2
.quad .loc_3_166
.int 3
.int 166
.byte 2
.quad .loc_3_170
.int 3
.int 170
.byte 2
.quad .loc_3_172
.int 3
.int 172
.byte 2
.quad .loc_3_173
.int 3
.int 173
.byte 2
.quad .loc_3_174
.int 3
.int 174
.byte 2
.quad .loc_3_175
.int 3
.int 175
.byte 2
.quad .loc_3_179
.int 3
.int 179
.byte 2
.quad .loc_3_180
.int 3
.int 180
.byte 2
.quad .loc_3_181
.int 3
.int 181
.byte 2
.quad .loc_3_182
.int 3
.int 182
.byte 2
.quad .loc_3_183
.int 3
.int 183
.byte 2
.quad .loc_3_188
.int 3
.int 188
.byte 2
.quad .loc_3_190
.int 3
.int 190
.byte 2
.quad .loc_3_191
.int 3
.int 191
.byte 2
.quad .loc_3_195
.int 3
.int 195
.byte 2
.quad .loc_3_197
.int 3
.int 197
.byte 2
.quad .loc_3_198
.int 3
.int 198
.byte 2
.quad .loc_3_199
.int 3
.int 199
.byte 2
.quad .loc_3_200
.int 3
.int 200
.byte 2
.quad .loc_3_201
.int 3
.int 201
.byte 2
.quad .loc_3_204
.int 3
.int 204
.byte 2
.quad .loc_3_206
.int 3
.int 206
.byte 2
.quad .loc_3_207
.int 3
.int 207
.byte 2
.quad .loc_3_208
.int 3
.int 208
.byte 2
.quad .loc_3_209
.int 3
.int 209
.byte 2
.quad .loc_3_210
.int 3
.int 210
.byte 2
.quad .loc_3_214
.int 3
.int 214
.byte 2
.quad .loc_3_215
.int 3
.int 215
.byte 2
.quad .loc_3_216
.int 3
.int 216
.byte 2
.quad .loc_3_217
.int 3
.int 217
.byte 2
.quad .loc_3_218
.int 3
.int 218
.byte 2
.quad .loc_3_219
.int 3
.int 219
.byte 2
.quad .loc_3_224
.int 3
.int 224
.byte 2
.quad .loc_3_225
.int 3
.int 225
.byte 2
.quad .loc_3_228
.int 3
.int 228
.byte 2
.quad .loc_3_230
.int 3
.int 230
.byte 2
.quad .loc_3_231
.int 3
.int 231
.byte 2
.quad .loc_3_232
.int 3
.int 232
.byte 2
.quad .loc_3_234
.int 3
.int 234
.byte 2
.quad .loc_3_236
.int 3
.int 236
.byte 2
.quad .loc_3_240
.int 3
.int 240
.byte 2
.quad .loc_3_241
.int 3
.int 241
.byte 2
.quad .loc_3_242
.int 3
.int 242
.byte 2
.quad .loc_3_243
.int 3
.int 243
.byte 2
.quad .loc_3_245
.int 3
.int 245
.byte 2
.quad .loc_3_246
.int 3
.int 246
.byte 2
.quad .loc_3_248
.int 3
.int 248
.byte 2
.quad .loc_3_249
.int 3
.int 249
.byte 2
.quad .loc_3_251
.int 3
.int 251
.byte 2
.quad .loc_3_252
.int 3
.int 252
.byte 2
.quad .loc_3_253
.int 3
.int 253
.byte 2
.quad .loc_3_256
.int 3
.int 256
.byte 2
.quad .loc_3_257
.int 3
.int 257
.byte 2
.quad .loc_3_258
.int 3
.int 258
.byte 2
.quad .loc_3_260
.int 3
.int 260
.byte 2
.quad .loc_3_261
.int 3
.int 261
.byte 2
.quad .loc_3_262
.int 3
.int 262
.byte 2
.quad .loc_3_263
.int 3
.int 263
.byte 2
.quad .loc_3_264
.int 3
.int 264
.byte 2
.quad .loc_3_266
.int 3
.int 266
.byte 2
.quad .loc_3_267
.int 3
.int 267
.byte 2
.quad .loc_3_268
.int 3
.int 268
.byte 2
.quad .loc_3_269
.int 3
.int 269
.byte 2
.quad .loc_3_273
.int 3
.int 273
.byte 2
.quad .loc_3_279
.int 3
.int 279
.byte 2
.quad .loc_3_280
.int 3
.int 280
.byte 2
.quad .loc_3_283
.int 3
.int 283
.byte 2
.quad .loc_3_289
.int 3
.int 289
.byte 2
.quad .loc_3_290
.int 3
.int 290
.byte 2
.quad .loc_3_297
.int 3
.int 297
.byte 2
.quad .loc_3_299
.int 3
.int 299
.byte 2
.quad .loc_3_300
.int 3
.int 300
.byte 2
.quad .loc_3_301
.int 3
.int 301
.byte 2
.quad .loc_3_303
.int 3
.int 303
.byte 2
.quad .loc_3_305
.int 3
.int 305
.byte 2
.quad .loc_3_307
.int 3
.int 307
.byte 2
.quad .loc_3_310
.int 3
.int 310
.byte 2
.quad .loc_3_311
.int 3
.int 311
.byte 2
.quad .loc_3_312
.int 3
.int 312
.byte 2
.quad .loc_3_313
.int 3
.int 313
.byte 2
.quad .loc_3_314
.int 3
.int 314
.byte 2
.quad .loc_3_315
.int 3
.int 315
.byte 2
.quad .loc_3_316
.int 3
.int 316
.byte 2
.quad .loc_3_317
.int 3
.int 317
.byte 2
.quad .loc_3_318
.int 3
.int 318
.byte 2
.quad .loc_3_319
.int 3
.int 319
.byte 2
.quad .loc_3_323
.int 3
.int 323
.byte 2
.quad .loc_3_328
.int 3
.int 328
.byte 2
.quad .loc_3_329
.int 3
.int 329
.byte 2
.quad .loc_3_333
.int 3
.int 333
.byte 2
.quad .loc_3_334
.int 3
.int 334
.byte 2
.quad .loc_3_335
.int 3
.int 335
.byte 2
.quad .loc_3_338
.int 3
.int 338
.byte 2
.quad .loc_3_339
.int 3
.int 339
.byte 2
.quad .loc_3_340
.int 3
.int 340
.byte 2
.quad .loc_3_341
.int 3
.int 341
.byte 2
.quad .loc_3_343
.int 3
.int 343
.byte 2
.quad .loc_3_345
.int 3
.int 345
.byte 2
.quad .loc_3_346
.int 3
.int 346
.byte 2
.quad .loc_3_348
.int 3
.int 348
.byte 2
.quad .loc_3_349
.int 3
.int 349
.byte 2
.quad .loc_3_350
.int 3
.int 350
.byte 2
.quad .loc_3_352
.int 3
.int 352
.byte 2
.quad .loc_3_355
.int 3
.int 355
.byte 2
.quad .loc_3_357
.int 3
.int 357
.byte 2
.quad .loc_3_361
.int 3
.int 361
.byte 2
.quad .loc_3_365
.int 3
.int 365
.byte 2
.quad .loc_3_371
.int 3
.int 371
.byte 2
.quad .loc_3_372
.int 3
.int 372
.byte 2
.quad .loc_3_374
.int 3
.int 374
.byte 2
.quad .loc_3_375
.int 3
.int 375
.byte 2
.quad .loc_3_377
.int 3
.int 377
.byte 2
.quad .loc_3_378
.int 3
.int 378
.byte 2
.quad .loc_3_379
.int 3
.int 379
.byte 2
.quad .loc_3_381
.int 3
.int 381
.byte 2
.quad .loc_3_382
.int 3
.int 382
.byte 2
.quad .loc_3_386
.int 3
.int 386
.byte 2
.quad .loc_3_387
.int 3
.int 387
.byte 2
.quad .loc_3_390
.int 3
.int 390
.byte 2
.quad .loc_3_391
.int 3
.int 391
.byte 2
.quad .loc_3_392
.int 3
.int 392
.byte 2
.quad .loc_3_393
.int 3
.int 393
.byte 2
.quad .loc_3_394
.int 3
.int 394
.byte 2
.quad .loc_3_411
.int 3
.int 411
.byte 2
.quad .loc_3_412
.int 3
.int 412
.byte 2
.quad .loc_3_415
.int 3
.int 415
.byte 2
.quad .loc_3_416
.int 3
.int 416
.byte 2
.quad .loc_3_419
.int 3
.int 419
.byte 2
.quad .loc_3_421
.int 3
.int 421
.byte 2
.quad .loc_3_422
.int 3
.int 422
.byte 2
.quad .loc_3_425
.int 3
.int 425
.byte 2
.quad .loc_3_426
.int 3
.int 426
.byte 2
.quad .loc_3_429
.int 3
.int 429
.byte 2
.quad .loc_3_431
.int 3
.int 431
.byte 2
.quad .loc_3_432
.int 3
.int 432
.byte 2
.quad .loc_3_433
.int 3
.int 433
.byte 2
.quad .loc_3_434
.int 3
.int 434
.byte 2
.quad .loc_3_435
.int 3
.int 435
.byte 2
.quad .loc_3_436
.int 3
.int 436
.byte 2
.quad .loc_3_437
.int 3
.int 437
.byte 2
.quad .loc_3_439
.int 3
.int 439
.byte 2
.quad .loc_3_450
.int 3
.int 450
.byte 2
.quad .loc_3_451
.int 3
.int 451
.byte 2
.quad .loc_3_460
.int 3
.int 460
.byte 2
.quad .loc_3_461
.int 3
.int 461
.byte 2
.quad .loc_3_466
.int 3
.int 466
.byte 2
.quad .loc_3_467
.int 3
.int 467
.byte 2
.quad .loc_3_468
.int 3
.int 468
.byte 2
.quad .loc_3_469
.int 3
.int 469
.byte 2
.quad .loc_3_470
.int 3
.int 470
.byte 2
.quad .loc_3_472
.int 3
.int 472
.byte 2
.quad .loc_3_485
.int 3
.int 485
.byte 2
.quad .loc_3_486
.int 3
.int 486
.byte 2
.quad .loc_3_487
.int 3
.int 487
.byte 2
.quad .loc_3_488
.int 3
.int 488
.byte 2
.quad .loc_3_489
.int 3
.int 489
.byte 2
.quad .loc_3_490
.int 3
.int 490
.byte 2
.quad .loc_3_491
.int 3
.int 491
.byte 2
.quad .loc_3_492
.int 3
.int 492
.byte 2
.quad .loc_3_493
.int 3
.int 493
.byte 2
.quad .loc_3_494
.int 3
.int 494
.byte 2
.quad .loc_3_495
.int 3
.int 495
.byte 2
.quad .loc_3_496
.int 3
.int 496
.byte 2
.quad .loc_3_497
.int 3
.int 497
.byte 2
.quad .loc_3_498
.int 3
.int 498
.byte 2
.quad .loc_3_500
.int 3
.int 500
.byte 2
.quad .loc_3_502
.int 3
.int 502
.byte 2
.quad .loc_3_504
.int 3
.int 504
.byte 2
.quad .loc_3_507
.int 3
.int 507
.byte 2
.quad .loc_3_509
.int 3
.int 509
.byte 2
.quad .loc_3_517
.int 3
.int 517
.byte 2
.quad .loc_3_524
.int 3
.int 524
.byte 2
.quad .loc_3_525
.int 3
.int 525
.byte 2
.quad .loc_3_526
.int 3
.int 526
.byte 2
.quad .loc_3_527
.int 3
.int 527
.byte 2
.quad .loc_3_528
.int 3
.int 528
.byte 2
.quad .loc_3_529
.int 3
.int 529
.byte 2
.quad .loc_3_530
.int 3
.int 530
.byte 2
.quad .loc_3_531
.int 3
.int 531
.byte 2
.quad .loc_3_532
.int 3
.int 532
.byte 2
.quad .loc_3_533
.int 3
.int 533
.byte 2
.quad .loc_3_534
.int 3
.int 534
.byte 2
.quad .loc_3_535
.int 3
.int 535
.byte 2
.quad .loc_3_536
.int 3
.int 536
.byte 2
.quad .loc_3_537
.int 3
.int 537
.byte 2
.quad .loc_3_540
.int 3
.int 540
.byte 2
.quad .loc_3_541
.int 3
.int 541
.byte 2
.quad .loc_3_542
.int 3
.int 542
.byte 2
.quad .loc_3_544
.int 3
.int 544
.byte 2
.quad .loc_3_545
.int 3
.int 545
.byte 2
.quad .loc_3_549
.int 3
.int 549
.byte 2
.quad .loc_3_553
.int 3
.int 553
.byte 2
.quad .loc_3_554
.int 3
.int 554
.byte 2
.quad .loc_3_555
.int 3
.int 555
.byte 2
.quad .loc_3_556
.int 3
.int 556
.byte 2
.quad .loc_3_557
.int 3
.int 557
.byte 2
.quad .loc_3_558
.int 3
.int 558
.byte 2
.quad .loc_3_559
.int 3
.int 559
.byte 2
.quad .loc_3_560
.int 3
.int 560
.byte 2
.quad .loc_3_561
.int 3
.int 561
.byte 2
.quad .loc_3_564
.int 3
.int 564
.byte 2
.quad .loc_3_565
.int 3
.int 565
.byte 2
.quad .loc_3_567
.int 3
.int 567
.byte 2
.quad .loc_3_568
.int 3
.int 568
.byte 2
.quad .loc_3_569
.int 3
.int 569
.byte 2
.quad .loc_3_570
.int 3
.int 570
.byte 2
.quad .loc_3_571
.int 3
.int 571
.byte 2
.quad .loc_3_572
.int 3
.int 572
.byte 2
.quad .loc_3_573
.int 3
.int 573
.byte 2
.quad .loc_3_574
.int 3
.int 574
.byte 2
.quad .loc_3_575
.int 3
.int 575
.byte 2
.quad .loc_3_576
.int 3
.int 576
.byte 2
.quad .loc_3_580
.int 3
.int 580
.byte 2
.quad .loc_3_581
.int 3
.int 581
.byte 2
.quad .loc_3_582
.int 3
.int 582
.byte 2
.quad .loc_3_583
.int 3
.int 583
.byte 2
.quad .loc_3_584
.int 3
.int 584
.byte 2
.quad .loc_3_587
.int 3
.int 587
.byte 2
.quad .loc_3_588
.int 3
.int 588
.byte 2
.quad .loc_3_589
.int 3
.int 589
.byte 2
.quad .loc_3_590
.int 3
.int 590
.byte 2
.quad .loc_3_591
.int 3
.int 591
.byte 2
.quad .loc_3_592
.int 3
.int 592
.byte 2
.quad .loc_3_593
.int 3
.int 593
.byte 2
.quad .loc_3_595
.int 3
.int 595
.byte 2
.quad .loc_3_597
.int 3
.int 597
.byte 2
.quad .loc_3_600
.int 3
.int 600
.byte 2
.quad .loc_3_602
.int 3
.int 602
.byte 2
.quad .loc_3_628
.int 3
.int 628
.byte 2
.quad .loc_3_629
.int 3
.int 629
.byte 2
.quad .loc_3_630
.int 3
.int 630
.byte 2
.quad .loc_3_631
.int 3
.int 631
.byte 2
.quad .loc_3_632
.int 3
.int 632
.byte 2
.quad .loc_3_633
.int 3
.int 633
.byte 2
.quad .loc_3_638
.int 3
.int 638
.byte 2
.quad .loc_3_639
.int 3
.int 639
.byte 2
.quad .loc_3_641
.int 3
.int 641
.byte 2
.quad .loc_3_642
.int 3
.int 642
.byte 2
.quad .loc_3_646
.int 3
.int 646
.byte 2
.quad .loc_3_647
.int 3
.int 647
.byte 2
.quad .loc_3_648
.int 3
.int 648
.byte 2
.quad .loc_3_649
.int 3
.int 649
.byte 2
.quad .loc_3_650
.int 3
.int 650
.byte 2
.quad .loc_3_651
.int 3
.int 651
.byte 2
.quad .loc_3_656
.int 3
.int 656
.byte 2
.quad .loc_3_658
.int 3
.int 658
.byte 2
.quad .loc_3_659
.int 3
.int 659
.byte 2
.quad .loc_3_663
.int 3
.int 663
.byte 2
.quad .loc_3_664
.int 3
.int 664
.byte 2
.quad .loc_3_667
.int 3
.int 667
.byte 2
.quad .loc_3_668
.int 3
.int 668
.byte 2
.quad .loc_3_669
.int 3
.int 669
.byte 2
.quad .loc_3_670
.int 3
.int 670
.byte 2
.quad .loc_3_671
.int 3
.int 671
.byte 2
.quad .loc_3_672
.int 3
.int 672
.byte 2
.quad .loc_3_678
.int 3
.int 678
.byte 2
.quad .loc_3_680
.int 3
.int 680
.byte 2
.quad .loc_3_681
.int 3
.int 681
.byte 2
.quad .loc_3_684
.int 3
.int 684
.byte 2
.quad .loc_3_685
.int 3
.int 685
.byte 2
.quad .loc_3_686
.int 3
.int 686
.byte 2
.quad .loc_3_687
.int 3
.int 687
.byte 2
.quad .loc_3_688
.int 3
.int 688
.byte 2
.quad .loc_3_693
.int 3
.int 693
.byte 2
.quad .loc_3_694
.int 3
.int 694
.byte 2
.quad .loc_3_697
.int 3
.int 697
.byte 2
.quad .loc_3_699
.int 3
.int 699
.byte 2
.quad .loc_3_700
.int 3
.int 700
.byte 2
.quad .loc_3_702
.int 3
.int 702
.byte 2
.quad .loc_3_703
.int 3
.int 703
.byte 2
.quad .loc_3_704
.int 3
.int 704
.byte 2
.quad .loc_3_707
.int 3
.int 707
.byte 2
.quad .loc_3_708
.int 3
.int 708
.byte 2
.quad .loc_3_713
.int 3
.int 713
.byte 2
.quad .loc_3_714
.int 3
.int 714
.byte 2
.quad .loc_3_715
.int 3
.int 715
.byte 2
.quad .loc_3_716
.int 3
.int 716
.byte 2
.quad .loc_3_717
.int 3
.int 717
.byte 2
.quad .loc_3_718
.int 3
.int 718
.byte 2
.quad .loc_3_723
.int 3
.int 723
.byte 2
.quad .loc_3_724
.int 3
.int 724
.byte 2
.quad .loc_3_725
.int 3
.int 725
.byte 2
.quad .loc_3_726
.int 3
.int 726
.byte 2
.quad .loc_3_730
.int 3
.int 730
.byte 2
.quad .loc_3_731
.int 3
.int 731
.byte 2
.quad .loc_3_732
.int 3
.int 732
.byte 2
.quad .loc_3_733
.int 3
.int 733
.byte 2
.quad .loc_3_734
.int 3
.int 734
.byte 2
.quad .loc_3_735
.int 3
.int 735
.byte 2
.quad .loc_3_740
.int 3
.int 740
.byte 2
.quad .loc_3_742
.int 3
.int 742
.byte 2
.quad .loc_3_743
.int 3
.int 743
.byte 2
.quad .loc_3_744
.int 3
.int 744
.byte 2
.quad .loc_3_745
.int 3
.int 745
.byte 1
.int 5
.int 24
.asciz "/opt/bah-asm/channel.bah"
.byte 1
.int 6
.int 22
.asciz "/opt/bah-asm/queue.bah"
.byte 2
.quad .loc_6_21
.int 6
.int 21
.byte 2
.quad .loc_6_27
.int 6
.int 27
.byte 2
.quad .loc_6_28
.int 6
.int 28
.byte 2
.quad .loc_6_90
.int 6
.int 90
.byte 2
.quad .loc_6_91
.int 6
.int 91
.byte 2
.quad .loc_6_93
.int 6
.int 93
.byte 2
.quad .loc_6_94
.int 6
.int 94
.byte 2
.quad .loc_6_95
.int 6
.int 95
.byte 2
.quad .loc_6_96
.int 6
.int 96
.byte 2
.quad .loc_6_101
.int 6
.int 101
.byte 2
.quad .loc_6_102
.int 6
.int 102
.byte 2
.quad .loc_5_24
.int 5
.int 24
.byte 2
.quad .loc_5_25
.int 5
.int 25
.byte 2
.quad .loc_5_26
.int 5
.int 26
.byte 2
.quad .loc_5_27
.int 5
.int 27
.byte 2
.quad .loc_5_28
.int 5
.int 28
.byte 2
.quad .loc_5_29
.int 5
.int 29
.byte 2
.quad .loc_5_32
.int 5
.int 32
.byte 2
.quad .loc_5_33
.int 5
.int 33
.byte 2
.quad .loc_5_34
.int 5
.int 34
.byte 2
.quad .loc_5_36
.int 5
.int 36
.byte 2
.quad .loc_5_40
.int 5
.int 40
.byte 2
.quad .loc_5_41
.int 5
.int 41
.byte 2
.quad .loc_5_42
.int 5
.int 42
.byte 2
.quad .loc_5_43
.int 5
.int 43
.byte 2
.quad .loc_5_44
.int 5
.int 44
.byte 2
.quad .loc_5_45
.int 5
.int 45
.byte 2
.quad .loc_5_48
.int 5
.int 48
.byte 2
.quad .loc_5_49
.int 5
.int 49
.byte 2
.quad .loc_5_50
.int 5
.int 50
.byte 2
.quad .loc_5_51
.int 5
.int 51
.byte 2
.quad .loc_5_52
.int 5
.int 52
.byte 2
.quad .loc_5_54
.int 5
.int 54
.byte 2
.quad .loc_5_61
.int 5
.int 61
.byte 2
.quad .loc_5_62
.int 5
.int 62
.byte 2
.quad .loc_5_63
.int 5
.int 63
.byte 2
.quad .loc_5_64
.int 5
.int 64
.byte 2
.quad .loc_5_65
.int 5
.int 65
.byte 2
.quad .loc_5_67
.int 5
.int 67
.byte 2
.quad .loc_5_68
.int 5
.int 68
.byte 2
.quad .loc_5_69
.int 5
.int 69
.byte 2
.quad .loc_5_71
.int 5
.int 71
.byte 2
.quad .loc_5_76
.int 5
.int 76
.byte 2
.quad .loc_5_81
.int 5
.int 81
.byte 2
.quad .loc_5_82
.int 5
.int 82
.byte 2
.quad .loc_5_83
.int 5
.int 83
.byte 2
.quad .loc_5_89
.int 5
.int 89
.byte 2
.quad .loc_5_90
.int 5
.int 90
.byte 2
.quad .loc_5_98
.int 5
.int 98
.byte 2
.quad .loc_5_99
.int 5
.int 99
.byte 2
.quad .loc_5_100
.int 5
.int 100
.byte 2
.quad .loc_5_101
.int 5
.int 101
.byte 2
.quad .loc_5_102
.int 5
.int 102
.byte 2
.quad .loc_5_104
.int 5
.int 104
.byte 2
.quad .loc_5_109
.int 5
.int 109
.byte 2
.quad .loc_5_110
.int 5
.int 110
.byte 1
.int 7
.int 25
.asciz "/opt/bah-asm/iostream.bah"
.byte 1
.int 8
.int 23
.asciz "/opt/bah-asm/string.bah"
.byte 1
.int 9
.int 21
.asciz "/opt/bah-asm/time.bah"
.byte 1
.int 10
.int 21
.asciz "/opt/bah-asm/json.bah"
.byte 1
.int 11
.int 24
.asciz "/opt/bah-asm/reflect.bah"
.byte 1
.int 12
.int 21
.asciz "/opt/bah-asm/rope.bah"
.byte 1
.int 13
.int 23
.asciz "/opt/bah-asm/object.bah"
.byte 1
.int 14
.int 21
.asciz "/opt/bah-asm/path.bah"
.byte 1
.int 15
.int 21
.asciz "/opt/bah-asm/exec.bah"
.byte 1
.int 16
.int 22
.asciz "/opt/bah-asm/flags.bah"
.byte 1
.int 17
.int 19
.asciz "/opt/bah-asm/dl.bah"
.byte 1
.int 18
.int 43
.asciz "/home/alois/Documents/bah-asm/src/lexer.bah"
.byte 1
.int 19
.int 54
.asciz "/home/alois/Documents/bah-asm/src/gen_asm_linux_64.bah"
.byte 1
.int 20
.int 45
.asciz "/home/alois/Documents/bah-asm/src/globals.bah"
.byte 2
.quad .loc_20_12
.int 20
.int 12
.byte 2
.quad .loc_20_13
.int 20
.int 13
.byte 2
.quad .loc_20_16
.int 20
.int 16
.byte 2
.quad .loc_20_20
.int 20
.int 20
.byte 2
.quad .loc_20_21
.int 20
.int 21
.byte 2
.quad .loc_20_24
.int 20
.int 24
.byte 1
.int 21
.int 45
.asciz "/home/alois/Documents/bah-asm/src/./cache.bah"
.byte 2
.quad .loc_21_25
.int 21
.int 25
.byte 2
.quad .loc_21_26
.int 21
.int 26
.byte 2
.quad .loc_21_27
.int 21
.int 27
.byte 2
.quad .loc_21_28
.int 21
.int 28
.byte 2
.quad .loc_21_29
.int 21
.int 29
.byte 2
.quad .loc_21_30
.int 21
.int 30
.byte 2
.quad .loc_21_32
.int 21
.int 32
.byte 2
.quad .loc_21_33
.int 21
.int 33
.byte 2
.quad .loc_21_34
.int 21
.int 34
.byte 2
.quad .loc_21_36
.int 21
.int 36
.byte 2
.quad .loc_21_42
.int 21
.int 42
.byte 2
.quad .loc_21_43
.int 21
.int 43
.byte 2
.quad .loc_21_44
.int 21
.int 44
.byte 2
.quad .loc_21_45
.int 21
.int 45
.byte 2
.quad .loc_21_46
.int 21
.int 46
.byte 2
.quad .loc_21_47
.int 21
.int 47
.byte 2
.quad .loc_21_48
.int 21
.int 48
.byte 2
.quad .loc_21_50
.int 21
.int 50
.byte 2
.quad .loc_21_51
.int 21
.int 51
.byte 2
.quad .loc_21_53
.int 21
.int 53
.byte 2
.quad .loc_21_59
.int 21
.int 59
.byte 2
.quad .loc_21_60
.int 21
.int 60
.byte 2
.quad .loc_21_61
.int 21
.int 61
.byte 2
.quad .loc_21_62
.int 21
.int 62
.byte 2
.quad .loc_21_64
.int 21
.int 64
.byte 2
.quad .loc_21_65
.int 21
.int 65
.byte 2
.quad .loc_21_66
.int 21
.int 66
.byte 2
.quad .loc_21_67
.int 21
.int 67
.byte 2
.quad .loc_21_68
.int 21
.int 68
.byte 2
.quad .loc_21_71
.int 21
.int 71
.byte 2
.quad .loc_21_72
.int 21
.int 72
.byte 2
.quad .loc_21_77
.int 21
.int 77
.byte 2
.quad .loc_21_78
.int 21
.int 78
.byte 2
.quad .loc_21_79
.int 21
.int 79
.byte 2
.quad .loc_21_81
.int 21
.int 81
.byte 2
.quad .loc_21_82
.int 21
.int 82
.byte 2
.quad .loc_21_85
.int 21
.int 85
.byte 2
.quad .loc_21_86
.int 21
.int 86
.byte 2
.quad .loc_21_96
.int 21
.int 96
.byte 2
.quad .loc_21_97
.int 21
.int 97
.byte 2
.quad .loc_21_98
.int 21
.int 98
.byte 2
.quad .loc_21_99
.int 21
.int 99
.byte 2
.quad .loc_21_100
.int 21
.int 100
.byte 2
.quad .loc_21_102
.int 21
.int 102
.byte 2
.quad .loc_21_103
.int 21
.int 103
.byte 2
.quad .loc_21_109
.int 21
.int 109
.byte 2
.quad .loc_21_110
.int 21
.int 110
.byte 2
.quad .loc_21_111
.int 21
.int 111
.byte 2
.quad .loc_21_113
.int 21
.int 113
.byte 2
.quad .loc_21_114
.int 21
.int 114
.byte 2
.quad .loc_21_120
.int 21
.int 120
.byte 2
.quad .loc_21_121
.int 21
.int 121
.byte 2
.quad .loc_21_122
.int 21
.int 122
.byte 2
.quad .loc_21_123
.int 21
.int 123
.byte 2
.quad .loc_21_128
.int 21
.int 128
.byte 2
.quad .loc_21_129
.int 21
.int 129
.byte 2
.quad .loc_21_131
.int 21
.int 131
.byte 2
.quad .loc_21_132
.int 21
.int 132
.byte 2
.quad .loc_21_135
.int 21
.int 135
.byte 2
.quad .loc_21_136
.int 21
.int 136
.byte 2
.quad .loc_21_139
.int 21
.int 139
.byte 2
.quad .loc_21_140
.int 21
.int 140
.byte 2
.quad .loc_21_141
.int 21
.int 141
.byte 2
.quad .loc_21_145
.int 21
.int 145
.byte 1
.int 22
.int 45
.asciz "/home/alois/Documents/bah-asm/src/./state.bah"
.byte 2
.quad .loc_22_49
.int 22
.int 49
.byte 2
.quad .loc_22_53
.int 22
.int 53
.byte 2
.quad .loc_22_57
.int 22
.int 57
.byte 2
.quad .loc_22_58
.int 22
.int 58
.byte 2
.quad .loc_22_60
.int 22
.int 60
.byte 2
.quad .loc_22_61
.int 22
.int 61
.byte 2
.quad .loc_22_63
.int 22
.int 63
.byte 2
.quad .loc_22_64
.int 22
.int 64
.byte 2
.quad .loc_22_65
.int 22
.int 65
.byte 2
.quad .loc_22_66
.int 22
.int 66
.byte 2
.quad .loc_22_67
.int 22
.int 67
.byte 2
.quad .loc_22_69
.int 22
.int 69
.byte 2
.quad .loc_22_70
.int 22
.int 70
.byte 2
.quad .loc_22_71
.int 22
.int 71
.byte 2
.quad .loc_22_72
.int 22
.int 72
.byte 2
.quad .loc_22_73
.int 22
.int 73
.byte 2
.quad .loc_22_74
.int 22
.int 74
.byte 2
.quad .loc_22_76
.int 22
.int 76
.byte 2
.quad .loc_22_77
.int 22
.int 77
.byte 2
.quad .loc_22_78
.int 22
.int 78
.byte 2
.quad .loc_22_79
.int 22
.int 79
.byte 2
.quad .loc_22_81
.int 22
.int 81
.byte 2
.quad .loc_22_82
.int 22
.int 82
.byte 2
.quad .loc_22_83
.int 22
.int 83
.byte 2
.quad .loc_22_84
.int 22
.int 84
.byte 2
.quad .loc_22_85
.int 22
.int 85
.byte 2
.quad .loc_22_86
.int 22
.int 86
.byte 2
.quad .loc_22_87
.int 22
.int 87
.byte 2
.quad .loc_22_88
.int 22
.int 88
.byte 2
.quad .loc_22_89
.int 22
.int 89
.byte 2
.quad .loc_22_90
.int 22
.int 90
.byte 2
.quad .loc_22_91
.int 22
.int 91
.byte 2
.quad .loc_22_92
.int 22
.int 92
.byte 2
.quad .loc_22_93
.int 22
.int 93
.byte 2
.quad .loc_22_94
.int 22
.int 94
.byte 2
.quad .loc_22_95
.int 22
.int 95
.byte 2
.quad .loc_22_96
.int 22
.int 96
.byte 2
.quad .loc_22_97
.int 22
.int 97
.byte 2
.quad .loc_22_98
.int 22
.int 98
.byte 2
.quad .loc_22_99
.int 22
.int 99
.byte 2
.quad .loc_22_100
.int 22
.int 100
.byte 2
.quad .loc_22_101
.int 22
.int 101
.byte 2
.quad .loc_22_102
.int 22
.int 102
.byte 2
.quad .loc_22_105
.int 22
.int 105
.byte 2
.quad .loc_22_106
.int 22
.int 106
.byte 2
.quad .loc_22_107
.int 22
.int 107
.byte 2
.quad .loc_22_109
.int 22
.int 109
.byte 2
.quad .loc_22_110
.int 22
.int 110
.byte 2
.quad .loc_22_111
.int 22
.int 111
.byte 2
.quad .loc_22_112
.int 22
.int 112
.byte 2
.quad .loc_22_113
.int 22
.int 113
.byte 2
.quad .loc_22_114
.int 22
.int 114
.byte 2
.quad .loc_22_115
.int 22
.int 115
.byte 2
.quad .loc_22_117
.int 22
.int 117
.byte 2
.quad .loc_22_119
.int 22
.int 119
.byte 2
.quad .loc_22_120
.int 22
.int 120
.byte 2
.quad .loc_22_123
.int 22
.int 123
.byte 2
.quad .loc_22_127
.int 22
.int 127
.byte 2
.quad .loc_22_134
.int 22
.int 134
.byte 2
.quad .loc_22_215
.int 22
.int 215
.byte 2
.quad .loc_22_216
.int 22
.int 216
.byte 2
.quad .loc_22_219
.int 22
.int 219
.byte 2
.quad .loc_22_220
.int 22
.int 220
.byte 2
.quad .loc_22_223
.int 22
.int 223
.byte 2
.quad .loc_22_224
.int 22
.int 224
.byte 2
.quad .loc_22_227
.int 22
.int 227
.byte 2
.quad .loc_22_274
.int 22
.int 274
.byte 2
.quad .loc_22_275
.int 22
.int 275
.byte 2
.quad .loc_22_279
.int 22
.int 279
.byte 2
.quad .loc_22_283
.int 22
.int 283
.byte 2
.quad .loc_22_287
.int 22
.int 287
.byte 2
.quad .loc_22_288
.int 22
.int 288
.byte 2
.quad .loc_22_289
.int 22
.int 289
.byte 2
.quad .loc_22_290
.int 22
.int 290
.byte 2
.quad .loc_22_291
.int 22
.int 291
.byte 2
.quad .loc_22_293
.int 22
.int 293
.byte 2
.quad .loc_22_294
.int 22
.int 294
.byte 2
.quad .loc_22_298
.int 22
.int 298
.byte 2
.quad .loc_22_300
.int 22
.int 300
.byte 2
.quad .loc_22_301
.int 22
.int 301
.byte 2
.quad .loc_22_302
.int 22
.int 302
.byte 2
.quad .loc_22_303
.int 22
.int 303
.byte 2
.quad .loc_22_306
.int 22
.int 306
.byte 2
.quad .loc_22_307
.int 22
.int 307
.byte 2
.quad .loc_22_308
.int 22
.int 308
.byte 2
.quad .loc_22_309
.int 22
.int 309
.byte 2
.quad .loc_22_315
.int 22
.int 315
.byte 2
.quad .loc_22_316
.int 22
.int 316
.byte 2
.quad .loc_22_317
.int 22
.int 317
.byte 2
.quad .loc_22_318
.int 22
.int 318
.byte 2
.quad .loc_22_321
.int 22
.int 321
.byte 2
.quad .loc_22_325
.int 22
.int 325
.byte 2
.quad .loc_22_326
.int 22
.int 326
.byte 2
.quad .loc_22_327
.int 22
.int 327
.byte 2
.quad .loc_22_328
.int 22
.int 328
.byte 2
.quad .loc_22_331
.int 22
.int 331
.byte 2
.quad .loc_22_335
.int 22
.int 335
.byte 2
.quad .loc_22_336
.int 22
.int 336
.byte 2
.quad .loc_22_337
.int 22
.int 337
.byte 2
.quad .loc_22_338
.int 22
.int 338
.byte 2
.quad .loc_22_341
.int 22
.int 341
.byte 2
.quad .loc_22_345
.int 22
.int 345
.byte 2
.quad .loc_22_346
.int 22
.int 346
.byte 2
.quad .loc_22_347
.int 22
.int 347
.byte 2
.quad .loc_22_348
.int 22
.int 348
.byte 2
.quad .loc_22_351
.int 22
.int 351
.byte 2
.quad .loc_22_352
.int 22
.int 352
.byte 2
.quad .loc_22_355
.int 22
.int 355
.byte 2
.quad .loc_22_362
.int 22
.int 362
.byte 2
.quad .loc_22_363
.int 22
.int 363
.byte 2
.quad .loc_22_364
.int 22
.int 364
.byte 2
.quad .loc_22_367
.int 22
.int 367
.byte 2
.quad .loc_22_368
.int 22
.int 368
.byte 2
.quad .loc_22_369
.int 22
.int 369
.byte 2
.quad .loc_22_370
.int 22
.int 370
.byte 2
.quad .loc_22_373
.int 22
.int 373
.byte 2
.quad .loc_22_376
.int 22
.int 376
.byte 2
.quad .loc_22_377
.int 22
.int 377
.byte 2
.quad .loc_22_378
.int 22
.int 378
.byte 2
.quad .loc_22_379
.int 22
.int 379
.byte 2
.quad .loc_22_382
.int 22
.int 382
.byte 2
.quad .loc_22_383
.int 22
.int 383
.byte 2
.quad .loc_22_387
.int 22
.int 387
.byte 1
.int 23
.int 45
.asciz "/home/alois/Documents/bah-asm/src/./types.bah"
.byte 2
.quad .loc_23_3
.int 23
.int 3
.byte 2
.quad .loc_23_4
.int 23
.int 4
.byte 2
.quad .loc_23_7
.int 23
.int 7
.byte 2
.quad .loc_23_8
.int 23
.int 8
.byte 2
.quad .loc_23_11
.int 23
.int 11
.byte 2
.quad .loc_23_12
.int 23
.int 12
.byte 2
.quad .loc_23_15
.int 23
.int 15
.byte 2
.quad .loc_23_19
.int 23
.int 19
.byte 2
.quad .loc_23_20
.int 23
.int 20
.byte 2
.quad .loc_23_23
.int 23
.int 23
.byte 2
.quad .loc_23_24
.int 23
.int 24
.byte 2
.quad .loc_23_27
.int 23
.int 27
.byte 2
.quad .loc_23_28
.int 23
.int 28
.byte 2
.quad .loc_23_31
.int 23
.int 31
.byte 2
.quad .loc_23_33
.int 23
.int 33
.byte 2
.quad .loc_23_35
.int 23
.int 35
.byte 2
.quad .loc_23_36
.int 23
.int 36
.byte 2
.quad .loc_23_37
.int 23
.int 37
.byte 2
.quad .loc_23_42
.int 23
.int 42
.byte 2
.quad .loc_23_43
.int 23
.int 43
.byte 2
.quad .loc_23_44
.int 23
.int 44
.byte 2
.quad .loc_23_45
.int 23
.int 45
.byte 2
.quad .loc_23_46
.int 23
.int 46
.byte 2
.quad .loc_23_49
.int 23
.int 49
.byte 2
.quad .loc_23_50
.int 23
.int 50
.byte 2
.quad .loc_23_52
.int 23
.int 52
.byte 2
.quad .loc_23_55
.int 23
.int 55
.byte 2
.quad .loc_23_56
.int 23
.int 56
.byte 2
.quad .loc_23_61
.int 23
.int 61
.byte 2
.quad .loc_23_64
.int 23
.int 64
.byte 2
.quad .loc_23_68
.int 23
.int 68
.byte 2
.quad .loc_23_69
.int 23
.int 69
.byte 2
.quad .loc_23_72
.int 23
.int 72
.byte 2
.quad .loc_23_73
.int 23
.int 73
.byte 2
.quad .loc_23_76
.int 23
.int 76
.byte 2
.quad .loc_23_77
.int 23
.int 77
.byte 2
.quad .loc_23_80
.int 23
.int 80
.byte 2
.quad .loc_23_81
.int 23
.int 81
.byte 2
.quad .loc_23_82
.int 23
.int 82
.byte 2
.quad .loc_23_85
.int 23
.int 85
.byte 2
.quad .loc_23_86
.int 23
.int 86
.byte 2
.quad .loc_23_89
.int 23
.int 89
.byte 2
.quad .loc_23_90
.int 23
.int 90
.byte 2
.quad .loc_23_91
.int 23
.int 91
.byte 2
.quad .loc_23_92
.int 23
.int 92
.byte 2
.quad .loc_23_93
.int 23
.int 93
.byte 2
.quad .loc_23_96
.int 23
.int 96
.byte 2
.quad .loc_23_97
.int 23
.int 97
.byte 2
.quad .loc_23_100
.int 23
.int 100
.byte 2
.quad .loc_23_103
.int 23
.int 103
.byte 2
.quad .loc_23_106
.int 23
.int 106
.byte 2
.quad .loc_23_107
.int 23
.int 107
.byte 2
.quad .loc_23_108
.int 23
.int 108
.byte 2
.quad .loc_23_109
.int 23
.int 109
.byte 2
.quad .loc_23_110
.int 23
.int 110
.byte 2
.quad .loc_23_111
.int 23
.int 111
.byte 2
.quad .loc_23_114
.int 23
.int 114
.byte 2
.quad .loc_23_115
.int 23
.int 115
.byte 2
.quad .loc_23_118
.int 23
.int 118
.byte 2
.quad .loc_23_121
.int 23
.int 121
.byte 2
.quad .loc_23_124
.int 23
.int 124
.byte 2
.quad .loc_23_128
.int 23
.int 128
.byte 2
.quad .loc_23_129
.int 23
.int 129
.byte 2
.quad .loc_23_132
.int 23
.int 132
.byte 2
.quad .loc_23_133
.int 23
.int 133
.byte 2
.quad .loc_23_134
.int 23
.int 134
.byte 2
.quad .loc_23_135
.int 23
.int 135
.byte 2
.quad .loc_23_136
.int 23
.int 136
.byte 2
.quad .loc_23_141
.int 23
.int 141
.byte 1
.int 24
.int 45
.asciz "/home/alois/Documents/bah-asm/src/./error.bah"
.byte 2
.quad .loc_24_11
.int 24
.int 11
.byte 2
.quad .loc_24_14
.int 24
.int 14
.byte 2
.quad .loc_24_15
.int 24
.int 15
.byte 2
.quad .loc_24_16
.int 24
.int 16
.byte 2
.quad .loc_24_17
.int 24
.int 17
.byte 2
.quad .loc_24_18
.int 24
.int 18
.byte 2
.quad .loc_24_19
.int 24
.int 19
.byte 2
.quad .loc_24_20
.int 24
.int 20
.byte 2
.quad .loc_24_21
.int 24
.int 21
.byte 2
.quad .loc_24_26
.int 24
.int 26
.byte 2
.quad .loc_24_27
.int 24
.int 27
.byte 2
.quad .loc_24_28
.int 24
.int 28
.byte 2
.quad .loc_24_32
.int 24
.int 32
.byte 2
.quad .loc_24_34
.int 24
.int 34
.byte 2
.quad .loc_24_36
.int 24
.int 36
.byte 2
.quad .loc_24_38
.int 24
.int 38
.byte 2
.quad .loc_24_39
.int 24
.int 39
.byte 2
.quad .loc_24_40
.int 24
.int 40
.byte 2
.quad .loc_24_48
.int 24
.int 48
.byte 2
.quad .loc_24_52
.int 24
.int 52
.byte 1
.int 25
.int 49
.asciz "/home/alois/Documents/bah-asm/src/./optimizer.bah"
.byte 2
.quad .loc_25_21
.int 25
.int 21
.byte 2
.quad .loc_25_22
.int 25
.int 22
.byte 2
.quad .loc_25_25
.int 25
.int 25
.byte 2
.quad .loc_25_27
.int 25
.int 27
.byte 2
.quad .loc_25_30
.int 25
.int 30
.byte 2
.quad .loc_25_31
.int 25
.int 31
.byte 2
.quad .loc_25_34
.int 25
.int 34
.byte 2
.quad .loc_25_35
.int 25
.int 35
.byte 2
.quad .loc_25_36
.int 25
.int 36
.byte 2
.quad .loc_25_38
.int 25
.int 38
.byte 2
.quad .loc_25_41
.int 25
.int 41
.byte 2
.quad .loc_25_42
.int 25
.int 42
.byte 2
.quad .loc_25_47
.int 25
.int 47
.byte 2
.quad .loc_25_48
.int 25
.int 48
.byte 2
.quad .loc_25_49
.int 25
.int 49
.byte 2
.quad .loc_25_50
.int 25
.int 50
.byte 2
.quad .loc_25_51
.int 25
.int 51
.byte 2
.quad .loc_25_55
.int 25
.int 55
.byte 2
.quad .loc_25_58
.int 25
.int 58
.byte 2
.quad .loc_25_62
.int 25
.int 62
.byte 2
.quad .loc_25_63
.int 25
.int 63
.byte 2
.quad .loc_25_66
.int 25
.int 66
.byte 2
.quad .loc_25_67
.int 25
.int 67
.byte 2
.quad .loc_25_68
.int 25
.int 68
.byte 2
.quad .loc_25_70
.int 25
.int 70
.byte 2
.quad .loc_25_73
.int 25
.int 73
.byte 2
.quad .loc_25_78
.int 25
.int 78
.byte 2
.quad .loc_25_79
.int 25
.int 79
.byte 2
.quad .loc_25_81
.int 25
.int 81
.byte 2
.quad .loc_25_82
.int 25
.int 82
.byte 2
.quad .loc_25_85
.int 25
.int 85
.byte 2
.quad .loc_25_86
.int 25
.int 86
.byte 2
.quad .loc_25_89
.int 25
.int 89
.byte 2
.quad .loc_25_90
.int 25
.int 90
.byte 2
.quad .loc_25_91
.int 25
.int 91
.byte 2
.quad .loc_25_92
.int 25
.int 92
.byte 2
.quad .loc_25_93
.int 25
.int 93
.byte 2
.quad .loc_25_94
.int 25
.int 94
.byte 2
.quad .loc_25_95
.int 25
.int 95
.byte 2
.quad .loc_25_99
.int 25
.int 99
.byte 2
.quad .loc_25_100
.int 25
.int 100
.byte 2
.quad .loc_25_101
.int 25
.int 101
.byte 2
.quad .loc_25_102
.int 25
.int 102
.byte 2
.quad .loc_25_103
.int 25
.int 103
.byte 2
.quad .loc_25_106
.int 25
.int 106
.byte 2
.quad .loc_25_107
.int 25
.int 107
.byte 2
.quad .loc_25_108
.int 25
.int 108
.byte 2
.quad .loc_25_109
.int 25
.int 109
.byte 2
.quad .loc_25_110
.int 25
.int 110
.byte 2
.quad .loc_25_111
.int 25
.int 111
.byte 2
.quad .loc_25_112
.int 25
.int 112
.byte 2
.quad .loc_25_113
.int 25
.int 113
.byte 2
.quad .loc_25_116
.int 25
.int 116
.byte 2
.quad .loc_25_121
.int 25
.int 121
.byte 2
.quad .loc_25_126
.int 25
.int 126
.byte 2
.quad .loc_25_127
.int 25
.int 127
.byte 2
.quad .loc_25_129
.int 25
.int 129
.byte 2
.quad .loc_25_130
.int 25
.int 130
.byte 2
.quad .loc_25_133
.int 25
.int 133
.byte 2
.quad .loc_25_134
.int 25
.int 134
.byte 2
.quad .loc_25_137
.int 25
.int 137
.byte 2
.quad .loc_25_138
.int 25
.int 138
.byte 2
.quad .loc_25_139
.int 25
.int 139
.byte 2
.quad .loc_25_140
.int 25
.int 140
.byte 2
.quad .loc_25_141
.int 25
.int 141
.byte 2
.quad .loc_25_142
.int 25
.int 142
.byte 2
.quad .loc_25_143
.int 25
.int 143
.byte 2
.quad .loc_25_147
.int 25
.int 147
.byte 2
.quad .loc_25_148
.int 25
.int 148
.byte 2
.quad .loc_25_149
.int 25
.int 149
.byte 2
.quad .loc_25_150
.int 25
.int 150
.byte 2
.quad .loc_25_151
.int 25
.int 151
.byte 2
.quad .loc_25_154
.int 25
.int 154
.byte 2
.quad .loc_25_155
.int 25
.int 155
.byte 2
.quad .loc_25_156
.int 25
.int 156
.byte 2
.quad .loc_25_157
.int 25
.int 157
.byte 2
.quad .loc_25_158
.int 25
.int 158
.byte 2
.quad .loc_25_159
.int 25
.int 159
.byte 2
.quad .loc_25_160
.int 25
.int 160
.byte 2
.quad .loc_25_161
.int 25
.int 161
.byte 2
.quad .loc_25_164
.int 25
.int 164
.byte 2
.quad .loc_25_169
.int 25
.int 169
.byte 1
.int 26
.int 43
.asciz "/home/alois/Documents/bah-asm/src/./gen.bah"
.byte 2
.quad .loc_26_7
.int 26
.int 7
.byte 2
.quad .loc_26_8
.int 26
.int 8
.byte 2
.quad .loc_26_9
.int 26
.int 9
.byte 2
.quad .loc_26_10
.int 26
.int 10
.byte 2
.quad .loc_26_11
.int 26
.int 11
.byte 2
.quad .loc_26_12
.int 26
.int 12
.byte 2
.quad .loc_26_13
.int 26
.int 13
.byte 2
.quad .loc_26_14
.int 26
.int 14
.byte 2
.quad .loc_26_15
.int 26
.int 15
.byte 2
.quad .loc_26_16
.int 26
.int 16
.byte 2
.quad .loc_26_17
.int 26
.int 17
.byte 2
.quad .loc_26_18
.int 26
.int 18
.byte 2
.quad .loc_26_19
.int 26
.int 19
.byte 2
.quad .loc_26_22
.int 26
.int 22
.byte 2
.quad .loc_26_24
.int 26
.int 24
.byte 2
.quad .loc_26_28
.int 26
.int 28
.byte 2
.quad .loc_26_38
.int 26
.int 38
.byte 2
.quad .loc_26_39
.int 26
.int 39
.byte 2
.quad .loc_26_40
.int 26
.int 40
.byte 2
.quad .loc_26_41
.int 26
.int 41
.byte 2
.quad .loc_26_42
.int 26
.int 42
.byte 2
.quad .loc_26_43
.int 26
.int 43
.byte 2
.quad .loc_26_44
.int 26
.int 44
.byte 2
.quad .loc_26_48
.int 26
.int 48
.byte 2
.quad .loc_26_49
.int 26
.int 49
.byte 2
.quad .loc_26_51
.int 26
.int 51
.byte 2
.quad .loc_26_52
.int 26
.int 52
.byte 2
.quad .loc_26_53
.int 26
.int 53
.byte 2
.quad .loc_26_55
.int 26
.int 55
.byte 2
.quad .loc_26_57
.int 26
.int 57
.byte 2
.quad .loc_26_58
.int 26
.int 58
.byte 2
.quad .loc_26_59
.int 26
.int 59
.byte 2
.quad .loc_26_62
.int 26
.int 62
.byte 2
.quad .loc_26_65
.int 26
.int 65
.byte 2
.quad .loc_26_66
.int 26
.int 66
.byte 2
.quad .loc_26_67
.int 26
.int 67
.byte 2
.quad .loc_26_68
.int 26
.int 68
.byte 2
.quad .loc_26_69
.int 26
.int 69
.byte 2
.quad .loc_26_70
.int 26
.int 70
.byte 2
.quad .loc_26_71
.int 26
.int 71
.byte 2
.quad .loc_26_75
.int 26
.int 75
.byte 2
.quad .loc_26_79
.int 26
.int 79
.byte 2
.quad .loc_26_80
.int 26
.int 80
.byte 2
.quad .loc_26_81
.int 26
.int 81
.byte 2
.quad .loc_26_82
.int 26
.int 82
.byte 2
.quad .loc_26_83
.int 26
.int 83
.byte 2
.quad .loc_26_84
.int 26
.int 84
.byte 2
.quad .loc_26_85
.int 26
.int 85
.byte 2
.quad .loc_26_86
.int 26
.int 86
.byte 2
.quad .loc_26_87
.int 26
.int 87
.byte 2
.quad .loc_26_88
.int 26
.int 88
.byte 2
.quad .loc_26_89
.int 26
.int 89
.byte 2
.quad .loc_26_90
.int 26
.int 90
.byte 2
.quad .loc_26_91
.int 26
.int 91
.byte 2
.quad .loc_26_92
.int 26
.int 92
.byte 2
.quad .loc_26_93
.int 26
.int 93
.byte 2
.quad .loc_26_96
.int 26
.int 96
.byte 2
.quad .loc_26_100
.int 26
.int 100
.byte 2
.quad .loc_26_102
.int 26
.int 102
.byte 2
.quad .loc_26_103
.int 26
.int 103
.byte 2
.quad .loc_26_104
.int 26
.int 104
.byte 2
.quad .loc_26_105
.int 26
.int 105
.byte 2
.quad .loc_26_106
.int 26
.int 106
.byte 2
.quad .loc_26_107
.int 26
.int 107
.byte 2
.quad .loc_26_108
.int 26
.int 108
.byte 2
.quad .loc_26_109
.int 26
.int 109
.byte 2
.quad .loc_26_110
.int 26
.int 110
.byte 2
.quad .loc_26_111
.int 26
.int 111
.byte 2
.quad .loc_26_112
.int 26
.int 112
.byte 2
.quad .loc_26_113
.int 26
.int 113
.byte 2
.quad .loc_26_114
.int 26
.int 114
.byte 2
.quad .loc_26_115
.int 26
.int 115
.byte 2
.quad .loc_26_116
.int 26
.int 116
.byte 2
.quad .loc_26_119
.int 26
.int 119
.byte 2
.quad .loc_26_120
.int 26
.int 120
.byte 2
.quad .loc_26_122
.int 26
.int 122
.byte 2
.quad .loc_26_123
.int 26
.int 123
.byte 2
.quad .loc_26_124
.int 26
.int 124
.byte 2
.quad .loc_26_127
.int 26
.int 127
.byte 2
.quad .loc_26_128
.int 26
.int 128
.byte 2
.quad .loc_26_131
.int 26
.int 131
.byte 2
.quad .loc_26_132
.int 26
.int 132
.byte 2
.quad .loc_26_135
.int 26
.int 135
.byte 2
.quad .loc_26_136
.int 26
.int 136
.byte 2
.quad .loc_26_137
.int 26
.int 137
.byte 2
.quad .loc_26_138
.int 26
.int 138
.byte 2
.quad .loc_26_142
.int 26
.int 142
.byte 2
.quad .loc_26_143
.int 26
.int 143
.byte 2
.quad .loc_26_144
.int 26
.int 144
.byte 2
.quad .loc_26_145
.int 26
.int 145
.byte 2
.quad .loc_26_146
.int 26
.int 146
.byte 2
.quad .loc_26_147
.int 26
.int 147
.byte 2
.quad .loc_26_148
.int 26
.int 148
.byte 2
.quad .loc_26_149
.int 26
.int 149
.byte 2
.quad .loc_26_150
.int 26
.int 150
.byte 2
.quad .loc_26_151
.int 26
.int 151
.byte 2
.quad .loc_26_152
.int 26
.int 152
.byte 2
.quad .loc_26_153
.int 26
.int 153
.byte 2
.quad .loc_26_154
.int 26
.int 154
.byte 2
.quad .loc_26_155
.int 26
.int 155
.byte 2
.quad .loc_26_158
.int 26
.int 158
.byte 2
.quad .loc_26_159
.int 26
.int 159
.byte 2
.quad .loc_26_166
.int 26
.int 166
.byte 2
.quad .loc_26_167
.int 26
.int 167
.byte 2
.quad .loc_26_170
.int 26
.int 170
.byte 2
.quad .loc_26_171
.int 26
.int 171
.byte 2
.quad .loc_26_174
.int 26
.int 174
.byte 2
.quad .loc_26_175
.int 26
.int 175
.byte 2
.quad .loc_26_176
.int 26
.int 176
.byte 2
.quad .loc_26_178
.int 26
.int 178
.byte 2
.quad .loc_26_181
.int 26
.int 181
.byte 2
.quad .loc_26_182
.int 26
.int 182
.byte 2
.quad .loc_26_185
.int 26
.int 185
.byte 2
.quad .loc_26_186
.int 26
.int 186
.byte 2
.quad .loc_26_189
.int 26
.int 189
.byte 2
.quad .loc_26_190
.int 26
.int 190
.byte 2
.quad .loc_26_193
.int 26
.int 193
.byte 2
.quad .loc_26_194
.int 26
.int 194
.byte 2
.quad .loc_26_197
.int 26
.int 197
.byte 2
.quad .loc_26_198
.int 26
.int 198
.byte 2
.quad .loc_26_201
.int 26
.int 201
.byte 2
.quad .loc_26_202
.int 26
.int 202
.byte 2
.quad .loc_26_205
.int 26
.int 205
.byte 2
.quad .loc_26_206
.int 26
.int 206
.byte 2
.quad .loc_26_209
.int 26
.int 209
.byte 2
.quad .loc_26_210
.int 26
.int 210
.byte 2
.quad .loc_26_212
.int 26
.int 212
.byte 2
.quad .loc_26_213
.int 26
.int 213
.byte 2
.quad .loc_26_214
.int 26
.int 214
.byte 2
.quad .loc_26_215
.int 26
.int 215
.byte 2
.quad .loc_26_219
.int 26
.int 219
.byte 2
.quad .loc_26_221
.int 26
.int 221
.byte 2
.quad .loc_26_223
.int 26
.int 223
.byte 2
.quad .loc_26_224
.int 26
.int 224
.byte 2
.quad .loc_26_227
.int 26
.int 227
.byte 2
.quad .loc_26_228
.int 26
.int 228
.byte 2
.quad .loc_26_230
.int 26
.int 230
.byte 2
.quad .loc_26_231
.int 26
.int 231
.byte 2
.quad .loc_26_232
.int 26
.int 232
.byte 2
.quad .loc_26_234
.int 26
.int 234
.byte 2
.quad .loc_26_236
.int 26
.int 236
.byte 2
.quad .loc_26_237
.int 26
.int 237
.byte 2
.quad .loc_26_238
.int 26
.int 238
.byte 2
.quad .loc_26_240
.int 26
.int 240
.byte 2
.quad .loc_26_243
.int 26
.int 243
.byte 2
.quad .loc_26_244
.int 26
.int 244
.byte 2
.quad .loc_26_246
.int 26
.int 246
.byte 2
.quad .loc_26_247
.int 26
.int 247
.byte 2
.quad .loc_26_248
.int 26
.int 248
.byte 2
.quad .loc_26_249
.int 26
.int 249
.byte 2
.quad .loc_26_251
.int 26
.int 251
.byte 2
.quad .loc_26_252
.int 26
.int 252
.byte 2
.quad .loc_26_253
.int 26
.int 253
.byte 2
.quad .loc_26_255
.int 26
.int 255
.byte 2
.quad .loc_26_256
.int 26
.int 256
.byte 2
.quad .loc_26_258
.int 26
.int 258
.byte 2
.quad .loc_26_260
.int 26
.int 260
.byte 2
.quad .loc_26_263
.int 26
.int 263
.byte 2
.quad .loc_26_264
.int 26
.int 264
.byte 2
.quad .loc_26_265
.int 26
.int 265
.byte 2
.quad .loc_26_268
.int 26
.int 268
.byte 2
.quad .loc_26_269
.int 26
.int 269
.byte 2
.quad .loc_26_272
.int 26
.int 272
.byte 2
.quad .loc_26_273
.int 26
.int 273
.byte 2
.quad .loc_26_276
.int 26
.int 276
.byte 2
.quad .loc_26_277
.int 26
.int 277
.byte 2
.quad .loc_26_280
.int 26
.int 280
.byte 2
.quad .loc_26_281
.int 26
.int 281
.byte 2
.quad .loc_26_284
.int 26
.int 284
.byte 2
.quad .loc_26_285
.int 26
.int 285
.byte 2
.quad .loc_26_288
.int 26
.int 288
.byte 2
.quad .loc_26_289
.int 26
.int 289
.byte 2
.quad .loc_26_292
.int 26
.int 292
.byte 2
.quad .loc_26_294
.int 26
.int 294
.byte 2
.quad .loc_26_295
.int 26
.int 295
.byte 2
.quad .loc_26_299
.int 26
.int 299
.byte 2
.quad .loc_26_301
.int 26
.int 301
.byte 2
.quad .loc_26_302
.int 26
.int 302
.byte 2
.quad .loc_26_305
.int 26
.int 305
.byte 2
.quad .loc_26_306
.int 26
.int 306
.byte 2
.quad .loc_26_307
.int 26
.int 307
.byte 2
.quad .loc_26_311
.int 26
.int 311
.byte 2
.quad .loc_26_312
.int 26
.int 312
.byte 2
.quad .loc_26_313
.int 26
.int 313
.byte 2
.quad .loc_26_314
.int 26
.int 314
.byte 2
.quad .loc_26_316
.int 26
.int 316
.byte 2
.quad .loc_26_317
.int 26
.int 317
.byte 2
.quad .loc_26_318
.int 26
.int 318
.byte 2
.quad .loc_26_319
.int 26
.int 319
.byte 2
.quad .loc_26_320
.int 26
.int 320
.byte 2
.quad .loc_26_321
.int 26
.int 321
.byte 2
.quad .loc_26_322
.int 26
.int 322
.byte 2
.quad .loc_26_325
.int 26
.int 325
.byte 2
.quad .loc_26_326
.int 26
.int 326
.byte 2
.quad .loc_26_330
.int 26
.int 330
.byte 2
.quad .loc_26_331
.int 26
.int 331
.byte 2
.quad .loc_26_332
.int 26
.int 332
.byte 2
.quad .loc_26_333
.int 26
.int 333
.byte 2
.quad .loc_26_334
.int 26
.int 334
.byte 2
.quad .loc_26_335
.int 26
.int 335
.byte 2
.quad .loc_26_336
.int 26
.int 336
.byte 2
.quad .loc_26_337
.int 26
.int 337
.byte 2
.quad .loc_26_338
.int 26
.int 338
.byte 2
.quad .loc_26_339
.int 26
.int 339
.byte 2
.quad .loc_26_340
.int 26
.int 340
.byte 2
.quad .loc_26_341
.int 26
.int 341
.byte 2
.quad .loc_26_342
.int 26
.int 342
.byte 2
.quad .loc_26_343
.int 26
.int 343
.byte 2
.quad .loc_26_344
.int 26
.int 344
.byte 2
.quad .loc_26_345
.int 26
.int 345
.byte 2
.quad .loc_26_346
.int 26
.int 346
.byte 2
.quad .loc_26_347
.int 26
.int 347
.byte 2
.quad .loc_26_348
.int 26
.int 348
.byte 2
.quad .loc_26_349
.int 26
.int 349
.byte 2
.quad .loc_26_350
.int 26
.int 350
.byte 2
.quad .loc_26_351
.int 26
.int 351
.byte 2
.quad .loc_26_353
.int 26
.int 353
.byte 2
.quad .loc_26_354
.int 26
.int 354
.byte 2
.quad .loc_26_355
.int 26
.int 355
.byte 2
.quad .loc_26_356
.int 26
.int 356
.byte 2
.quad .loc_26_358
.int 26
.int 358
.byte 2
.quad .loc_26_361
.int 26
.int 361
.byte 2
.quad .loc_26_362
.int 26
.int 362
.byte 2
.quad .loc_26_365
.int 26
.int 365
.byte 2
.quad .loc_26_367
.int 26
.int 367
.byte 2
.quad .loc_26_368
.int 26
.int 368
.byte 2
.quad .loc_26_369
.int 26
.int 369
.byte 2
.quad .loc_26_370
.int 26
.int 370
.byte 2
.quad .loc_26_371
.int 26
.int 371
.byte 2
.quad .loc_26_374
.int 26
.int 374
.byte 2
.quad .loc_26_375
.int 26
.int 375
.byte 2
.quad .loc_26_377
.int 26
.int 377
.byte 2
.quad .loc_26_378
.int 26
.int 378
.byte 2
.quad .loc_26_379
.int 26
.int 379
.byte 2
.quad .loc_26_381
.int 26
.int 381
.byte 2
.quad .loc_26_383
.int 26
.int 383
.byte 2
.quad .loc_26_384
.int 26
.int 384
.byte 2
.quad .loc_26_385
.int 26
.int 385
.byte 2
.quad .loc_26_386
.int 26
.int 386
.byte 2
.quad .loc_26_387
.int 26
.int 387
.byte 2
.quad .loc_26_388
.int 26
.int 388
.byte 2
.quad .loc_26_389
.int 26
.int 389
.byte 2
.quad .loc_26_390
.int 26
.int 390
.byte 2
.quad .loc_26_394
.int 26
.int 394
.byte 2
.quad .loc_26_395
.int 26
.int 395
.byte 2
.quad .loc_26_396
.int 26
.int 396
.byte 2
.quad .loc_26_397
.int 26
.int 397
.byte 2
.quad .loc_26_398
.int 26
.int 398
.byte 2
.quad .loc_26_399
.int 26
.int 399
.byte 2
.quad .loc_26_400
.int 26
.int 400
.byte 2
.quad .loc_26_403
.int 26
.int 403
.byte 2
.quad .loc_26_406
.int 26
.int 406
.byte 2
.quad .loc_26_407
.int 26
.int 407
.byte 2
.quad .loc_26_408
.int 26
.int 408
.byte 2
.quad .loc_26_409
.int 26
.int 409
.byte 2
.quad .loc_26_410
.int 26
.int 410
.byte 2
.quad .loc_26_411
.int 26
.int 411
.byte 2
.quad .loc_26_412
.int 26
.int 412
.byte 2
.quad .loc_26_414
.int 26
.int 414
.byte 2
.quad .loc_26_415
.int 26
.int 415
.byte 2
.quad .loc_26_416
.int 26
.int 416
.byte 2
.quad .loc_26_417
.int 26
.int 417
.byte 2
.quad .loc_26_418
.int 26
.int 418
.byte 2
.quad .loc_26_419
.int 26
.int 419
.byte 2
.quad .loc_26_420
.int 26
.int 420
.byte 2
.quad .loc_26_421
.int 26
.int 421
.byte 2
.quad .loc_26_422
.int 26
.int 422
.byte 2
.quad .loc_26_423
.int 26
.int 423
.byte 2
.quad .loc_26_424
.int 26
.int 424
.byte 2
.quad .loc_26_425
.int 26
.int 425
.byte 2
.quad .loc_26_426
.int 26
.int 426
.byte 2
.quad .loc_26_427
.int 26
.int 427
.byte 2
.quad .loc_26_428
.int 26
.int 428
.byte 2
.quad .loc_26_429
.int 26
.int 429
.byte 2
.quad .loc_26_430
.int 26
.int 430
.byte 2
.quad .loc_26_431
.int 26
.int 431
.byte 2
.quad .loc_26_432
.int 26
.int 432
.byte 2
.quad .loc_26_435
.int 26
.int 435
.byte 2
.quad .loc_26_436
.int 26
.int 436
.byte 2
.quad .loc_26_437
.int 26
.int 437
.byte 2
.quad .loc_26_438
.int 26
.int 438
.byte 2
.quad .loc_26_439
.int 26
.int 439
.byte 2
.quad .loc_26_440
.int 26
.int 440
.byte 2
.quad .loc_26_444
.int 26
.int 444
.byte 2
.quad .loc_26_447
.int 26
.int 447
.byte 2
.quad .loc_26_448
.int 26
.int 448
.byte 2
.quad .loc_26_449
.int 26
.int 449
.byte 2
.quad .loc_26_450
.int 26
.int 450
.byte 2
.quad .loc_26_453
.int 26
.int 453
.byte 2
.quad .loc_26_456
.int 26
.int 456
.byte 2
.quad .loc_26_457
.int 26
.int 457
.byte 2
.quad .loc_26_458
.int 26
.int 458
.byte 2
.quad .loc_26_459
.int 26
.int 459
.byte 2
.quad .loc_26_461
.int 26
.int 461
.byte 2
.quad .loc_26_462
.int 26
.int 462
.byte 2
.quad .loc_26_464
.int 26
.int 464
.byte 2
.quad .loc_26_465
.int 26
.int 465
.byte 2
.quad .loc_26_466
.int 26
.int 466
.byte 2
.quad .loc_26_469
.int 26
.int 469
.byte 2
.quad .loc_26_470
.int 26
.int 470
.byte 2
.quad .loc_26_471
.int 26
.int 471
.byte 2
.quad .loc_26_472
.int 26
.int 472
.byte 2
.quad .loc_26_475
.int 26
.int 475
.byte 2
.quad .loc_26_476
.int 26
.int 476
.byte 2
.quad .loc_26_477
.int 26
.int 477
.byte 2
.quad .loc_26_479
.int 26
.int 479
.byte 2
.quad .loc_26_480
.int 26
.int 480
.byte 2
.quad .loc_26_481
.int 26
.int 481
.byte 2
.quad .loc_26_482
.int 26
.int 482
.byte 2
.quad .loc_26_483
.int 26
.int 483
.byte 2
.quad .loc_26_484
.int 26
.int 484
.byte 2
.quad .loc_26_485
.int 26
.int 485
.byte 2
.quad .loc_26_487
.int 26
.int 487
.byte 2
.quad .loc_26_488
.int 26
.int 488
.byte 2
.quad .loc_26_489
.int 26
.int 489
.byte 2
.quad .loc_26_490
.int 26
.int 490
.byte 2
.quad .loc_26_491
.int 26
.int 491
.byte 2
.quad .loc_26_494
.int 26
.int 494
.byte 2
.quad .loc_26_495
.int 26
.int 495
.byte 2
.quad .loc_26_496
.int 26
.int 496
.byte 2
.quad .loc_26_498
.int 26
.int 498
.byte 2
.quad .loc_26_500
.int 26
.int 500
.byte 2
.quad .loc_26_501
.int 26
.int 501
.byte 2
.quad .loc_26_503
.int 26
.int 503
.byte 2
.quad .loc_26_504
.int 26
.int 504
.byte 2
.quad .loc_26_505
.int 26
.int 505
.byte 2
.quad .loc_26_507
.int 26
.int 507
.byte 2
.quad .loc_26_512
.int 26
.int 512
.byte 2
.quad .loc_26_515
.int 26
.int 515
.byte 2
.quad .loc_26_516
.int 26
.int 516
.byte 2
.quad .loc_26_518
.int 26
.int 518
.byte 2
.quad .loc_26_520
.int 26
.int 520
.byte 2
.quad .loc_26_522
.int 26
.int 522
.byte 2
.quad .loc_26_523
.int 26
.int 523
.byte 2
.quad .loc_26_524
.int 26
.int 524
.byte 2
.quad .loc_26_526
.int 26
.int 526
.byte 2
.quad .loc_26_527
.int 26
.int 527
.byte 2
.quad .loc_26_529
.int 26
.int 529
.byte 2
.quad .loc_26_531
.int 26
.int 531
.byte 2
.quad .loc_26_534
.int 26
.int 534
.byte 2
.quad .loc_26_541
.int 26
.int 541
.byte 2
.quad .loc_26_542
.int 26
.int 542
.byte 2
.quad .loc_26_543
.int 26
.int 543
.byte 2
.quad .loc_26_544
.int 26
.int 544
.byte 2
.quad .loc_26_545
.int 26
.int 545
.byte 2
.quad .loc_26_546
.int 26
.int 546
.byte 2
.quad .loc_26_548
.int 26
.int 548
.byte 2
.quad .loc_26_549
.int 26
.int 549
.byte 2
.quad .loc_26_550
.int 26
.int 550
.byte 2
.quad .loc_26_552
.int 26
.int 552
.byte 2
.quad .loc_26_553
.int 26
.int 553
.byte 2
.quad .loc_26_554
.int 26
.int 554
.byte 2
.quad .loc_26_555
.int 26
.int 555
.byte 2
.quad .loc_26_556
.int 26
.int 556
.byte 2
.quad .loc_26_557
.int 26
.int 557
.byte 2
.quad .loc_26_558
.int 26
.int 558
.byte 2
.quad .loc_26_562
.int 26
.int 562
.byte 2
.quad .loc_26_564
.int 26
.int 564
.byte 2
.quad .loc_26_566
.int 26
.int 566
.byte 2
.quad .loc_26_567
.int 26
.int 567
.byte 2
.quad .loc_26_568
.int 26
.int 568
.byte 2
.quad .loc_26_569
.int 26
.int 569
.byte 2
.quad .loc_26_571
.int 26
.int 571
.byte 2
.quad .loc_26_573
.int 26
.int 573
.byte 2
.quad .loc_26_574
.int 26
.int 574
.byte 2
.quad .loc_26_576
.int 26
.int 576
.byte 2
.quad .loc_26_578
.int 26
.int 578
.byte 2
.quad .loc_26_579
.int 26
.int 579
.byte 2
.quad .loc_26_581
.int 26
.int 581
.byte 2
.quad .loc_26_584
.int 26
.int 584
.byte 2
.quad .loc_26_585
.int 26
.int 585
.byte 2
.quad .loc_26_586
.int 26
.int 586
.byte 2
.quad .loc_26_587
.int 26
.int 587
.byte 2
.quad .loc_26_588
.int 26
.int 588
.byte 2
.quad .loc_26_589
.int 26
.int 589
.byte 2
.quad .loc_26_591
.int 26
.int 591
.byte 2
.quad .loc_26_593
.int 26
.int 593
.byte 2
.quad .loc_26_594
.int 26
.int 594
.byte 2
.quad .loc_26_597
.int 26
.int 597
.byte 2
.quad .loc_26_598
.int 26
.int 598
.byte 2
.quad .loc_26_599
.int 26
.int 599
.byte 2
.quad .loc_26_600
.int 26
.int 600
.byte 2
.quad .loc_26_601
.int 26
.int 601
.byte 2
.quad .loc_26_602
.int 26
.int 602
.byte 2
.quad .loc_26_603
.int 26
.int 603
.byte 2
.quad .loc_26_604
.int 26
.int 604
.byte 2
.quad .loc_26_607
.int 26
.int 607
.byte 2
.quad .loc_26_608
.int 26
.int 608
.byte 2
.quad .loc_26_609
.int 26
.int 609
.byte 2
.quad .loc_26_611
.int 26
.int 611
.byte 2
.quad .loc_26_612
.int 26
.int 612
.byte 2
.quad .loc_26_615
.int 26
.int 615
.byte 2
.quad .loc_26_616
.int 26
.int 616
.byte 2
.quad .loc_26_618
.int 26
.int 618
.byte 2
.quad .loc_26_619
.int 26
.int 619
.byte 2
.quad .loc_26_620
.int 26
.int 620
.byte 2
.quad .loc_26_621
.int 26
.int 621
.byte 2
.quad .loc_26_624
.int 26
.int 624
.byte 2
.quad .loc_26_625
.int 26
.int 625
.byte 2
.quad .loc_26_626
.int 26
.int 626
.byte 2
.quad .loc_26_627
.int 26
.int 627
.byte 2
.quad .loc_26_628
.int 26
.int 628
.byte 2
.quad .loc_26_629
.int 26
.int 629
.byte 2
.quad .loc_26_630
.int 26
.int 630
.byte 2
.quad .loc_26_631
.int 26
.int 631
.byte 2
.quad .loc_26_635
.int 26
.int 635
.byte 2
.quad .loc_26_636
.int 26
.int 636
.byte 2
.quad .loc_26_637
.int 26
.int 637
.byte 2
.quad .loc_26_638
.int 26
.int 638
.byte 2
.quad .loc_26_641
.int 26
.int 641
.byte 2
.quad .loc_26_642
.int 26
.int 642
.byte 2
.quad .loc_26_643
.int 26
.int 643
.byte 2
.quad .loc_26_645
.int 26
.int 645
.byte 2
.quad .loc_26_646
.int 26
.int 646
.byte 2
.quad .loc_26_647
.int 26
.int 647
.byte 2
.quad .loc_26_648
.int 26
.int 648
.byte 2
.quad .loc_26_649
.int 26
.int 649
.byte 2
.quad .loc_26_650
.int 26
.int 650
.byte 2
.quad .loc_26_651
.int 26
.int 651
.byte 2
.quad .loc_26_652
.int 26
.int 652
.byte 2
.quad .loc_26_654
.int 26
.int 654
.byte 2
.quad .loc_26_655
.int 26
.int 655
.byte 2
.quad .loc_26_656
.int 26
.int 656
.byte 2
.quad .loc_26_657
.int 26
.int 657
.byte 2
.quad .loc_26_658
.int 26
.int 658
.byte 2
.quad .loc_26_660
.int 26
.int 660
.byte 2
.quad .loc_26_661
.int 26
.int 661
.byte 2
.quad .loc_26_664
.int 26
.int 664
.byte 2
.quad .loc_26_665
.int 26
.int 665
.byte 2
.quad .loc_26_669
.int 26
.int 669
.byte 2
.quad .loc_26_670
.int 26
.int 670
.byte 2
.quad .loc_26_671
.int 26
.int 671
.byte 2
.quad .loc_26_672
.int 26
.int 672
.byte 2
.quad .loc_26_673
.int 26
.int 673
.byte 2
.quad .loc_26_674
.int 26
.int 674
.byte 2
.quad .loc_26_675
.int 26
.int 675
.byte 2
.quad .loc_26_677
.int 26
.int 677
.byte 2
.quad .loc_26_682
.int 26
.int 682
.byte 2
.quad .loc_26_683
.int 26
.int 683
.byte 2
.quad .loc_26_684
.int 26
.int 684
.byte 2
.quad .loc_26_686
.int 26
.int 686
.byte 2
.quad .loc_26_687
.int 26
.int 687
.byte 2
.quad .loc_26_688
.int 26
.int 688
.byte 2
.quad .loc_26_689
.int 26
.int 689
.byte 2
.quad .loc_26_692
.int 26
.int 692
.byte 2
.quad .loc_26_693
.int 26
.int 693
.byte 2
.quad .loc_26_695
.int 26
.int 695
.byte 2
.quad .loc_26_696
.int 26
.int 696
.byte 2
.quad .loc_26_699
.int 26
.int 699
.byte 2
.quad .loc_26_700
.int 26
.int 700
.byte 2
.quad .loc_26_702
.int 26
.int 702
.byte 2
.quad .loc_26_703
.int 26
.int 703
.byte 2
.quad .loc_26_704
.int 26
.int 704
.byte 2
.quad .loc_26_705
.int 26
.int 705
.byte 2
.quad .loc_26_706
.int 26
.int 706
.byte 2
.quad .loc_26_707
.int 26
.int 707
.byte 2
.quad .loc_26_708
.int 26
.int 708
.byte 2
.quad .loc_26_709
.int 26
.int 709
.byte 2
.quad .loc_26_710
.int 26
.int 710
.byte 2
.quad .loc_26_711
.int 26
.int 711
.byte 2
.quad .loc_26_712
.int 26
.int 712
.byte 2
.quad .loc_26_713
.int 26
.int 713
.byte 2
.quad .loc_26_714
.int 26
.int 714
.byte 2
.quad .loc_26_715
.int 26
.int 715
.byte 2
.quad .loc_26_717
.int 26
.int 717
.byte 2
.quad .loc_26_718
.int 26
.int 718
.byte 2
.quad .loc_26_719
.int 26
.int 719
.byte 2
.quad .loc_26_720
.int 26
.int 720
.byte 2
.quad .loc_26_722
.int 26
.int 722
.byte 2
.quad .loc_26_723
.int 26
.int 723
.byte 2
.quad .loc_26_724
.int 26
.int 724
.byte 2
.quad .loc_26_725
.int 26
.int 725
.byte 2
.quad .loc_26_726
.int 26
.int 726
.byte 2
.quad .loc_26_728
.int 26
.int 728
.byte 2
.quad .loc_26_729
.int 26
.int 729
.byte 2
.quad .loc_26_730
.int 26
.int 730
.byte 2
.quad .loc_26_731
.int 26
.int 731
.byte 2
.quad .loc_26_733
.int 26
.int 733
.byte 2
.quad .loc_26_735
.int 26
.int 735
.byte 2
.quad .loc_26_736
.int 26
.int 736
.byte 2
.quad .loc_26_737
.int 26
.int 737
.byte 2
.quad .loc_26_738
.int 26
.int 738
.byte 2
.quad .loc_26_739
.int 26
.int 739
.byte 2
.quad .loc_26_740
.int 26
.int 740
.byte 2
.quad .loc_26_744
.int 26
.int 744
.byte 2
.quad .loc_26_745
.int 26
.int 745
.byte 2
.quad .loc_26_746
.int 26
.int 746
.byte 2
.quad .loc_26_747
.int 26
.int 747
.byte 2
.quad .loc_26_748
.int 26
.int 748
.byte 2
.quad .loc_26_749
.int 26
.int 749
.byte 2
.quad .loc_26_750
.int 26
.int 750
.byte 2
.quad .loc_26_751
.int 26
.int 751
.byte 2
.quad .loc_26_753
.int 26
.int 753
.byte 2
.quad .loc_26_755
.int 26
.int 755
.byte 2
.quad .loc_26_756
.int 26
.int 756
.byte 2
.quad .loc_26_759
.int 26
.int 759
.byte 2
.quad .loc_26_762
.int 26
.int 762
.byte 2
.quad .loc_26_764
.int 26
.int 764
.byte 2
.quad .loc_26_765
.int 26
.int 765
.byte 2
.quad .loc_26_766
.int 26
.int 766
.byte 2
.quad .loc_26_767
.int 26
.int 767
.byte 2
.quad .loc_26_768
.int 26
.int 768
.byte 2
.quad .loc_26_772
.int 26
.int 772
.byte 2
.quad .loc_26_773
.int 26
.int 773
.byte 2
.quad .loc_26_776
.int 26
.int 776
.byte 2
.quad .loc_26_778
.int 26
.int 778
.byte 2
.quad .loc_26_779
.int 26
.int 779
.byte 2
.quad .loc_26_781
.int 26
.int 781
.byte 2
.quad .loc_26_782
.int 26
.int 782
.byte 2
.quad .loc_26_783
.int 26
.int 783
.byte 2
.quad .loc_26_784
.int 26
.int 784
.byte 2
.quad .loc_26_785
.int 26
.int 785
.byte 2
.quad .loc_26_786
.int 26
.int 786
.byte 2
.quad .loc_26_788
.int 26
.int 788
.byte 2
.quad .loc_26_792
.int 26
.int 792
.byte 2
.quad .loc_26_793
.int 26
.int 793
.byte 2
.quad .loc_26_794
.int 26
.int 794
.byte 2
.quad .loc_26_797
.int 26
.int 797
.byte 2
.quad .loc_26_798
.int 26
.int 798
.byte 2
.quad .loc_26_799
.int 26
.int 799
.byte 2
.quad .loc_26_800
.int 26
.int 800
.byte 2
.quad .loc_26_801
.int 26
.int 801
.byte 2
.quad .loc_26_804
.int 26
.int 804
.byte 2
.quad .loc_26_805
.int 26
.int 805
.byte 2
.quad .loc_26_806
.int 26
.int 806
.byte 2
.quad .loc_26_807
.int 26
.int 807
.byte 2
.quad .loc_26_808
.int 26
.int 808
.byte 2
.quad .loc_26_809
.int 26
.int 809
.byte 2
.quad .loc_26_811
.int 26
.int 811
.byte 2
.quad .loc_26_815
.int 26
.int 815
.byte 2
.quad .loc_26_816
.int 26
.int 816
.byte 2
.quad .loc_26_818
.int 26
.int 818
.byte 2
.quad .loc_26_819
.int 26
.int 819
.byte 2
.quad .loc_26_820
.int 26
.int 820
.byte 2
.quad .loc_26_821
.int 26
.int 821
.byte 2
.quad .loc_26_822
.int 26
.int 822
.byte 2
.quad .loc_26_825
.int 26
.int 825
.byte 2
.quad .loc_26_827
.int 26
.int 827
.byte 2
.quad .loc_26_828
.int 26
.int 828
.byte 2
.quad .loc_26_829
.int 26
.int 829
.byte 2
.quad .loc_26_830
.int 26
.int 830
.byte 2
.quad .loc_26_831
.int 26
.int 831
.byte 2
.quad .loc_26_833
.int 26
.int 833
.byte 2
.quad .loc_26_837
.int 26
.int 837
.byte 2
.quad .loc_26_838
.int 26
.int 838
.byte 2
.quad .loc_26_843
.int 26
.int 843
.byte 2
.quad .loc_26_844
.int 26
.int 844
.byte 2
.quad .loc_26_845
.int 26
.int 845
.byte 2
.quad .loc_26_846
.int 26
.int 846
.byte 2
.quad .loc_26_848
.int 26
.int 848
.byte 2
.quad .loc_26_849
.int 26
.int 849
.byte 2
.quad .loc_26_850
.int 26
.int 850
.byte 2
.quad .loc_26_852
.int 26
.int 852
.byte 2
.quad .loc_26_853
.int 26
.int 853
.byte 2
.quad .loc_26_854
.int 26
.int 854
.byte 2
.quad .loc_26_855
.int 26
.int 855
.byte 2
.quad .loc_26_857
.int 26
.int 857
.byte 2
.quad .loc_26_860
.int 26
.int 860
.byte 2
.quad .loc_26_861
.int 26
.int 861
.byte 2
.quad .loc_26_862
.int 26
.int 862
.byte 2
.quad .loc_26_865
.int 26
.int 865
.byte 2
.quad .loc_26_870
.int 26
.int 870
.byte 2
.quad .loc_26_872
.int 26
.int 872
.byte 2
.quad .loc_26_874
.int 26
.int 874
.byte 2
.quad .loc_26_878
.int 26
.int 878
.byte 2
.quad .loc_26_882
.int 26
.int 882
.byte 2
.quad .loc_26_884
.int 26
.int 884
.byte 2
.quad .loc_26_885
.int 26
.int 885
.byte 2
.quad .loc_26_887
.int 26
.int 887
.byte 2
.quad .loc_26_888
.int 26
.int 888
.byte 2
.quad .loc_26_890
.int 26
.int 890
.byte 2
.quad .loc_26_891
.int 26
.int 891
.byte 2
.quad .loc_26_892
.int 26
.int 892
.byte 2
.quad .loc_26_895
.int 26
.int 895
.byte 2
.quad .loc_26_897
.int 26
.int 897
.byte 2
.quad .loc_26_898
.int 26
.int 898
.byte 2
.quad .loc_26_899
.int 26
.int 899
.byte 2
.quad .loc_26_900
.int 26
.int 900
.byte 2
.quad .loc_26_903
.int 26
.int 903
.byte 2
.quad .loc_26_904
.int 26
.int 904
.byte 2
.quad .loc_26_907
.int 26
.int 907
.byte 2
.quad .loc_26_908
.int 26
.int 908
.byte 2
.quad .loc_26_909
.int 26
.int 909
.byte 2
.quad .loc_26_910
.int 26
.int 910
.byte 2
.quad .loc_26_911
.int 26
.int 911
.byte 2
.quad .loc_26_912
.int 26
.int 912
.byte 2
.quad .loc_26_913
.int 26
.int 913
.byte 2
.quad .loc_26_914
.int 26
.int 914
.byte 2
.quad .loc_26_915
.int 26
.int 915
.byte 2
.quad .loc_26_916
.int 26
.int 916
.byte 2
.quad .loc_26_918
.int 26
.int 918
.byte 2
.quad .loc_26_920
.int 26
.int 920
.byte 2
.quad .loc_26_921
.int 26
.int 921
.byte 2
.quad .loc_26_922
.int 26
.int 922
.byte 2
.quad .loc_26_924
.int 26
.int 924
.byte 2
.quad .loc_26_925
.int 26
.int 925
.byte 2
.quad .loc_26_927
.int 26
.int 927
.byte 2
.quad .loc_26_929
.int 26
.int 929
.byte 2
.quad .loc_26_930
.int 26
.int 930
.byte 2
.quad .loc_26_933
.int 26
.int 933
.byte 2
.quad .loc_26_936
.int 26
.int 936
.byte 2
.quad .loc_26_941
.int 26
.int 941
.byte 2
.quad .loc_26_943
.int 26
.int 943
.byte 2
.quad .loc_26_944
.int 26
.int 944
.byte 2
.quad .loc_26_947
.int 26
.int 947
.byte 2
.quad .loc_26_948
.int 26
.int 948
.byte 2
.quad .loc_26_951
.int 26
.int 951
.byte 2
.quad .loc_26_952
.int 26
.int 952
.byte 2
.quad .loc_26_953
.int 26
.int 953
.byte 2
.quad .loc_26_956
.int 26
.int 956
.byte 2
.quad .loc_26_957
.int 26
.int 957
.byte 2
.quad .loc_26_958
.int 26
.int 958
.byte 2
.quad .loc_26_959
.int 26
.int 959
.byte 2
.quad .loc_26_960
.int 26
.int 960
.byte 2
.quad .loc_26_962
.int 26
.int 962
.byte 2
.quad .loc_26_963
.int 26
.int 963
.byte 2
.quad .loc_26_964
.int 26
.int 964
.byte 2
.quad .loc_26_965
.int 26
.int 965
.byte 2
.quad .loc_26_967
.int 26
.int 967
.byte 2
.quad .loc_26_968
.int 26
.int 968
.byte 2
.quad .loc_26_969
.int 26
.int 969
.byte 2
.quad .loc_26_970
.int 26
.int 970
.byte 2
.quad .loc_26_971
.int 26
.int 971
.byte 2
.quad .loc_26_974
.int 26
.int 974
.byte 2
.quad .loc_26_975
.int 26
.int 975
.byte 2
.quad .loc_26_976
.int 26
.int 976
.byte 2
.quad .loc_26_978
.int 26
.int 978
.byte 2
.quad .loc_26_979
.int 26
.int 979
.byte 2
.quad .loc_26_980
.int 26
.int 980
.byte 2
.quad .loc_26_981
.int 26
.int 981
.byte 2
.quad .loc_26_982
.int 26
.int 982
.byte 2
.quad .loc_26_983
.int 26
.int 983
.byte 2
.quad .loc_26_987
.int 26
.int 987
.byte 2
.quad .loc_26_988
.int 26
.int 988
.byte 2
.quad .loc_26_991
.int 26
.int 991
.byte 2
.quad .loc_26_992
.int 26
.int 992
.byte 2
.quad .loc_26_993
.int 26
.int 993
.byte 2
.quad .loc_26_994
.int 26
.int 994
.byte 2
.quad .loc_26_997
.int 26
.int 997
.byte 2
.quad .loc_26_998
.int 26
.int 998
.byte 2
.quad .loc_26_999
.int 26
.int 999
.byte 2
.quad .loc_26_1000
.int 26
.int 1000
.byte 2
.quad .loc_26_1003
.int 26
.int 1003
.byte 2
.quad .loc_26_1006
.int 26
.int 1006
.byte 2
.quad .loc_26_1007
.int 26
.int 1007
.byte 2
.quad .loc_26_1008
.int 26
.int 1008
.byte 2
.quad .loc_26_1009
.int 26
.int 1009
.byte 2
.quad .loc_26_1010
.int 26
.int 1010
.byte 2
.quad .loc_26_1011
.int 26
.int 1011
.byte 2
.quad .loc_26_1012
.int 26
.int 1012
.byte 2
.quad .loc_26_1013
.int 26
.int 1013
.byte 2
.quad .loc_26_1016
.int 26
.int 1016
.byte 2
.quad .loc_26_1019
.int 26
.int 1019
.byte 2
.quad .loc_26_1020
.int 26
.int 1020
.byte 2
.quad .loc_26_1021
.int 26
.int 1021
.byte 2
.quad .loc_26_1022
.int 26
.int 1022
.byte 2
.quad .loc_26_1024
.int 26
.int 1024
.byte 2
.quad .loc_26_1027
.int 26
.int 1027
.byte 2
.quad .loc_26_1029
.int 26
.int 1029
.byte 2
.quad .loc_26_1030
.int 26
.int 1030
.byte 2
.quad .loc_26_1031
.int 26
.int 1031
.byte 2
.quad .loc_26_1032
.int 26
.int 1032
.byte 2
.quad .loc_26_1033
.int 26
.int 1033
.byte 2
.quad .loc_26_1034
.int 26
.int 1034
.byte 2
.quad .loc_26_1035
.int 26
.int 1035
.byte 2
.quad .loc_26_1036
.int 26
.int 1036
.byte 2
.quad .loc_26_1038
.int 26
.int 1038
.byte 2
.quad .loc_26_1039
.int 26
.int 1039
.byte 2
.quad .loc_26_1040
.int 26
.int 1040
.byte 2
.quad .loc_26_1041
.int 26
.int 1041
.byte 2
.quad .loc_26_1042
.int 26
.int 1042
.byte 2
.quad .loc_26_1043
.int 26
.int 1043
.byte 2
.quad .loc_26_1046
.int 26
.int 1046
.byte 2
.quad .loc_26_1047
.int 26
.int 1047
.byte 2
.quad .loc_26_1048
.int 26
.int 1048
.byte 2
.quad .loc_26_1051
.int 26
.int 1051
.byte 2
.quad .loc_26_1053
.int 26
.int 1053
.byte 2
.quad .loc_26_1054
.int 26
.int 1054
.byte 2
.quad .loc_26_1056
.int 26
.int 1056
.byte 2
.quad .loc_26_1058
.int 26
.int 1058
.byte 2
.quad .loc_26_1061
.int 26
.int 1061
.byte 2
.quad .loc_26_1062
.int 26
.int 1062
.byte 2
.quad .loc_26_1063
.int 26
.int 1063
.byte 2
.quad .loc_26_1064
.int 26
.int 1064
.byte 2
.quad .loc_26_1065
.int 26
.int 1065
.byte 2
.quad .loc_26_1068
.int 26
.int 1068
.byte 2
.quad .loc_26_1069
.int 26
.int 1069
.byte 2
.quad .loc_26_1070
.int 26
.int 1070
.byte 2
.quad .loc_26_1071
.int 26
.int 1071
.byte 2
.quad .loc_26_1076
.int 26
.int 1076
.byte 2
.quad .loc_26_1078
.int 26
.int 1078
.byte 2
.quad .loc_26_1079
.int 26
.int 1079
.byte 2
.quad .loc_26_1080
.int 26
.int 1080
.byte 2
.quad .loc_26_1081
.int 26
.int 1081
.byte 2
.quad .loc_26_1083
.int 26
.int 1083
.byte 2
.quad .loc_26_1084
.int 26
.int 1084
.byte 2
.quad .loc_26_1087
.int 26
.int 1087
.byte 2
.quad .loc_26_1088
.int 26
.int 1088
.byte 2
.quad .loc_26_1089
.int 26
.int 1089
.byte 2
.quad .loc_26_1091
.int 26
.int 1091
.byte 2
.quad .loc_26_1092
.int 26
.int 1092
.byte 2
.quad .loc_26_1093
.int 26
.int 1093
.byte 2
.quad .loc_26_1094
.int 26
.int 1094
.byte 2
.quad .loc_26_1095
.int 26
.int 1095
.byte 2
.quad .loc_26_1096
.int 26
.int 1096
.byte 2
.quad .loc_26_1099
.int 26
.int 1099
.byte 2
.quad .loc_26_1100
.int 26
.int 1100
.byte 2
.quad .loc_26_1101
.int 26
.int 1101
.byte 2
.quad .loc_26_1102
.int 26
.int 1102
.byte 2
.quad .loc_26_1103
.int 26
.int 1103
.byte 2
.quad .loc_26_1105
.int 26
.int 1105
.byte 2
.quad .loc_26_1106
.int 26
.int 1106
.byte 2
.quad .loc_26_1109
.int 26
.int 1109
.byte 2
.quad .loc_26_1110
.int 26
.int 1110
.byte 2
.quad .loc_26_1114
.int 26
.int 1114
.byte 2
.quad .loc_26_1115
.int 26
.int 1115
.byte 2
.quad .loc_26_1116
.int 26
.int 1116
.byte 2
.quad .loc_26_1119
.int 26
.int 1119
.byte 2
.quad .loc_26_1121
.int 26
.int 1121
.byte 2
.quad .loc_26_1122
.int 26
.int 1122
.byte 2
.quad .loc_26_1123
.int 26
.int 1123
.byte 2
.quad .loc_26_1124
.int 26
.int 1124
.byte 2
.quad .loc_26_1126
.int 26
.int 1126
.byte 2
.quad .loc_26_1127
.int 26
.int 1127
.byte 2
.quad .loc_26_1128
.int 26
.int 1128
.byte 2
.quad .loc_26_1129
.int 26
.int 1129
.byte 2
.quad .loc_26_1130
.int 26
.int 1130
.byte 2
.quad .loc_26_1132
.int 26
.int 1132
.byte 2
.quad .loc_26_1133
.int 26
.int 1133
.byte 2
.quad .loc_26_1136
.int 26
.int 1136
.byte 2
.quad .loc_26_1137
.int 26
.int 1137
.byte 2
.quad .loc_26_1140
.int 26
.int 1140
.byte 2
.quad .loc_26_1142
.int 26
.int 1142
.byte 2
.quad .loc_26_1143
.int 26
.int 1143
.byte 2
.quad .loc_26_1144
.int 26
.int 1144
.byte 2
.quad .loc_26_1145
.int 26
.int 1145
.byte 2
.quad .loc_26_1146
.int 26
.int 1146
.byte 2
.quad .loc_26_1147
.int 26
.int 1147
.byte 2
.quad .loc_26_1148
.int 26
.int 1148
.byte 2
.quad .loc_26_1150
.int 26
.int 1150
.byte 2
.quad .loc_26_1151
.int 26
.int 1151
.byte 2
.quad .loc_26_1154
.int 26
.int 1154
.byte 2
.quad .loc_26_1155
.int 26
.int 1155
.byte 2
.quad .loc_26_1156
.int 26
.int 1156
.byte 2
.quad .loc_26_1159
.int 26
.int 1159
.byte 2
.quad .loc_26_1162
.int 26
.int 1162
.byte 2
.quad .loc_26_1164
.int 26
.int 1164
.byte 2
.quad .loc_26_1168
.int 26
.int 1168
.byte 2
.quad .loc_26_1170
.int 26
.int 1170
.byte 2
.quad .loc_26_1171
.int 26
.int 1171
.byte 2
.quad .loc_26_1172
.int 26
.int 1172
.byte 2
.quad .loc_26_1174
.int 26
.int 1174
.byte 2
.quad .loc_26_1177
.int 26
.int 1177
.byte 2
.quad .loc_26_1178
.int 26
.int 1178
.byte 2
.quad .loc_26_1179
.int 26
.int 1179
.byte 2
.quad .loc_26_1180
.int 26
.int 1180
.byte 2
.quad .loc_26_1181
.int 26
.int 1181
.byte 2
.quad .loc_26_1184
.int 26
.int 1184
.byte 2
.quad .loc_26_1185
.int 26
.int 1185
.byte 2
.quad .loc_26_1186
.int 26
.int 1186
.byte 2
.quad .loc_26_1187
.int 26
.int 1187
.byte 2
.quad .loc_26_1188
.int 26
.int 1188
.byte 2
.quad .loc_26_1189
.int 26
.int 1189
.byte 2
.quad .loc_26_1190
.int 26
.int 1190
.byte 2
.quad .loc_26_1191
.int 26
.int 1191
.byte 2
.quad .loc_26_1192
.int 26
.int 1192
.byte 2
.quad .loc_26_1193
.int 26
.int 1193
.byte 2
.quad .loc_26_1194
.int 26
.int 1194
.byte 2
.quad .loc_26_1195
.int 26
.int 1195
.byte 2
.quad .loc_26_1197
.int 26
.int 1197
.byte 2
.quad .loc_26_1198
.int 26
.int 1198
.byte 2
.quad .loc_26_1199
.int 26
.int 1199
.byte 2
.quad .loc_26_1200
.int 26
.int 1200
.byte 2
.quad .loc_26_1202
.int 26
.int 1202
.byte 2
.quad .loc_26_1203
.int 26
.int 1203
.byte 2
.quad .loc_26_1204
.int 26
.int 1204
.byte 2
.quad .loc_26_1205
.int 26
.int 1205
.byte 2
.quad .loc_26_1207
.int 26
.int 1207
.byte 2
.quad .loc_26_1217
.int 26
.int 1217
.byte 2
.quad .loc_26_1218
.int 26
.int 1218
.byte 2
.quad .loc_26_1219
.int 26
.int 1219
.byte 2
.quad .loc_26_1220
.int 26
.int 1220
.byte 2
.quad .loc_26_1223
.int 26
.int 1223
.byte 2
.quad .loc_26_1224
.int 26
.int 1224
.byte 2
.quad .loc_26_1225
.int 26
.int 1225
.byte 2
.quad .loc_26_1226
.int 26
.int 1226
.byte 2
.quad .loc_26_1227
.int 26
.int 1227
.byte 2
.quad .loc_26_1228
.int 26
.int 1228
.byte 2
.quad .loc_26_1229
.int 26
.int 1229
.byte 2
.quad .loc_26_1230
.int 26
.int 1230
.byte 2
.quad .loc_26_1233
.int 26
.int 1233
.byte 2
.quad .loc_26_1234
.int 26
.int 1234
.byte 2
.quad .loc_26_1235
.int 26
.int 1235
.byte 2
.quad .loc_26_1237
.int 26
.int 1237
.byte 2
.quad .loc_26_1238
.int 26
.int 1238
.byte 2
.quad .loc_26_1240
.int 26
.int 1240
.byte 2
.quad .loc_26_1242
.int 26
.int 1242
.byte 2
.quad .loc_26_1243
.int 26
.int 1243
.byte 2
.quad .loc_26_1245
.int 26
.int 1245
.byte 2
.quad .loc_26_1247
.int 26
.int 1247
.byte 2
.quad .loc_26_1249
.int 26
.int 1249
.byte 2
.quad .loc_26_1250
.int 26
.int 1250
.byte 2
.quad .loc_26_1251
.int 26
.int 1251
.byte 2
.quad .loc_26_1252
.int 26
.int 1252
.byte 2
.quad .loc_26_1253
.int 26
.int 1253
.byte 2
.quad .loc_26_1256
.int 26
.int 1256
.byte 2
.quad .loc_26_1257
.int 26
.int 1257
.byte 2
.quad .loc_26_1258
.int 26
.int 1258
.byte 2
.quad .loc_26_1259
.int 26
.int 1259
.byte 2
.quad .loc_26_1260
.int 26
.int 1260
.byte 2
.quad .loc_26_1261
.int 26
.int 1261
.byte 2
.quad .loc_26_1262
.int 26
.int 1262
.byte 2
.quad .loc_26_1263
.int 26
.int 1263
.byte 2
.quad .loc_26_1266
.int 26
.int 1266
.byte 2
.quad .loc_26_1267
.int 26
.int 1267
.byte 2
.quad .loc_26_1270
.int 26
.int 1270
.byte 2
.quad .loc_26_1272
.int 26
.int 1272
.byte 2
.quad .loc_26_1282
.int 26
.int 1282
.byte 2
.quad .loc_26_1283
.int 26
.int 1283
.byte 2
.quad .loc_26_1284
.int 26
.int 1284
.byte 2
.quad .loc_26_1288
.int 26
.int 1288
.byte 2
.quad .loc_26_1290
.int 26
.int 1290
.byte 2
.quad .loc_26_1291
.int 26
.int 1291
.byte 2
.quad .loc_26_1292
.int 26
.int 1292
.byte 2
.quad .loc_26_1294
.int 26
.int 1294
.byte 2
.quad .loc_26_1297
.int 26
.int 1297
.byte 2
.quad .loc_26_1298
.int 26
.int 1298
.byte 2
.quad .loc_26_1301
.int 26
.int 1301
.byte 2
.quad .loc_26_1302
.int 26
.int 1302
.byte 2
.quad .loc_26_1303
.int 26
.int 1303
.byte 2
.quad .loc_26_1305
.int 26
.int 1305
.byte 2
.quad .loc_26_1308
.int 26
.int 1308
.byte 2
.quad .loc_26_1309
.int 26
.int 1309
.byte 2
.quad .loc_26_1310
.int 26
.int 1310
.byte 2
.quad .loc_26_1311
.int 26
.int 1311
.byte 2
.quad .loc_26_1312
.int 26
.int 1312
.byte 2
.quad .loc_26_1313
.int 26
.int 1313
.byte 2
.quad .loc_26_1314
.int 26
.int 1314
.byte 2
.quad .loc_26_1315
.int 26
.int 1315
.byte 2
.quad .loc_26_1316
.int 26
.int 1316
.byte 2
.quad .loc_26_1317
.int 26
.int 1317
.byte 2
.quad .loc_26_1318
.int 26
.int 1318
.byte 2
.quad .loc_26_1319
.int 26
.int 1319
.byte 2
.quad .loc_26_1323
.int 26
.int 1323
.byte 2
.quad .loc_26_1324
.int 26
.int 1324
.byte 2
.quad .loc_26_1325
.int 26
.int 1325
.byte 2
.quad .loc_26_1328
.int 26
.int 1328
.byte 2
.quad .loc_26_1329
.int 26
.int 1329
.byte 2
.quad .loc_26_1330
.int 26
.int 1330
.byte 2
.quad .loc_26_1331
.int 26
.int 1331
.byte 2
.quad .loc_26_1332
.int 26
.int 1332
.byte 2
.quad .loc_26_1336
.int 26
.int 1336
.byte 2
.quad .loc_26_1337
.int 26
.int 1337
.byte 2
.quad .loc_26_1338
.int 26
.int 1338
.byte 2
.quad .loc_26_1339
.int 26
.int 1339
.byte 2
.quad .loc_26_1340
.int 26
.int 1340
.byte 2
.quad .loc_26_1341
.int 26
.int 1341
.byte 2
.quad .loc_26_1342
.int 26
.int 1342
.byte 2
.quad .loc_26_1343
.int 26
.int 1343
.byte 2
.quad .loc_26_1347
.int 26
.int 1347
.byte 2
.quad .loc_26_1348
.int 26
.int 1348
.byte 2
.quad .loc_26_1349
.int 26
.int 1349
.byte 2
.quad .loc_26_1350
.int 26
.int 1350
.byte 2
.quad .loc_26_1351
.int 26
.int 1351
.byte 2
.quad .loc_26_1355
.int 26
.int 1355
.byte 2
.quad .loc_26_1356
.int 26
.int 1356
.byte 2
.quad .loc_26_1357
.int 26
.int 1357
.byte 2
.quad .loc_26_1358
.int 26
.int 1358
.byte 2
.quad .loc_26_1359
.int 26
.int 1359
.byte 2
.quad .loc_26_1360
.int 26
.int 1360
.byte 2
.quad .loc_26_1362
.int 26
.int 1362
.byte 2
.quad .loc_26_1363
.int 26
.int 1363
.byte 2
.quad .loc_26_1364
.int 26
.int 1364
.byte 2
.quad .loc_26_1366
.int 26
.int 1366
.byte 2
.quad .loc_26_1367
.int 26
.int 1367
.byte 2
.quad .loc_26_1368
.int 26
.int 1368
.byte 2
.quad .loc_26_1369
.int 26
.int 1369
.byte 2
.quad .loc_26_1372
.int 26
.int 1372
.byte 2
.quad .loc_26_1373
.int 26
.int 1373
.byte 2
.quad .loc_26_1374
.int 26
.int 1374
.byte 2
.quad .loc_26_1376
.int 26
.int 1376
.byte 2
.quad .loc_26_1377
.int 26
.int 1377
.byte 2
.quad .loc_26_1378
.int 26
.int 1378
.byte 2
.quad .loc_26_1381
.int 26
.int 1381
.byte 2
.quad .loc_26_1382
.int 26
.int 1382
.byte 2
.quad .loc_26_1383
.int 26
.int 1383
.byte 2
.quad .loc_26_1384
.int 26
.int 1384
.byte 2
.quad .loc_26_1385
.int 26
.int 1385
.byte 2
.quad .loc_26_1386
.int 26
.int 1386
.byte 2
.quad .loc_26_1387
.int 26
.int 1387
.byte 2
.quad .loc_26_1388
.int 26
.int 1388
.byte 2
.quad .loc_26_1391
.int 26
.int 1391
.byte 2
.quad .loc_26_1392
.int 26
.int 1392
.byte 2
.quad .loc_26_1393
.int 26
.int 1393
.byte 2
.quad .loc_26_1395
.int 26
.int 1395
.byte 2
.quad .loc_26_1397
.int 26
.int 1397
.byte 2
.quad .loc_26_1398
.int 26
.int 1398
.byte 2
.quad .loc_26_1399
.int 26
.int 1399
.byte 2
.quad .loc_26_1400
.int 26
.int 1400
.byte 2
.quad .loc_26_1401
.int 26
.int 1401
.byte 2
.quad .loc_26_1403
.int 26
.int 1403
.byte 2
.quad .loc_26_1404
.int 26
.int 1404
.byte 2
.quad .loc_26_1405
.int 26
.int 1405
.byte 2
.quad .loc_26_1406
.int 26
.int 1406
.byte 2
.quad .loc_26_1408
.int 26
.int 1408
.byte 2
.quad .loc_26_1409
.int 26
.int 1409
.byte 2
.quad .loc_26_1410
.int 26
.int 1410
.byte 2
.quad .loc_26_1412
.int 26
.int 1412
.byte 2
.quad .loc_26_1413
.int 26
.int 1413
.byte 2
.quad .loc_26_1414
.int 26
.int 1414
.byte 2
.quad .loc_26_1415
.int 26
.int 1415
.byte 2
.quad .loc_26_1417
.int 26
.int 1417
.byte 2
.quad .loc_26_1419
.int 26
.int 1419
.byte 2
.quad .loc_26_1420
.int 26
.int 1420
.byte 2
.quad .loc_26_1421
.int 26
.int 1421
.byte 2
.quad .loc_26_1422
.int 26
.int 1422
.byte 2
.quad .loc_26_1423
.int 26
.int 1423
.byte 2
.quad .loc_26_1425
.int 26
.int 1425
.byte 2
.quad .loc_26_1426
.int 26
.int 1426
.byte 2
.quad .loc_26_1427
.int 26
.int 1427
.byte 2
.quad .loc_26_1429
.int 26
.int 1429
.byte 2
.quad .loc_26_1430
.int 26
.int 1430
.byte 2
.quad .loc_26_1431
.int 26
.int 1431
.byte 2
.quad .loc_26_1432
.int 26
.int 1432
.byte 2
.quad .loc_26_1435
.int 26
.int 1435
.byte 2
.quad .loc_26_1436
.int 26
.int 1436
.byte 2
.quad .loc_26_1437
.int 26
.int 1437
.byte 2
.quad .loc_26_1439
.int 26
.int 1439
.byte 2
.quad .loc_26_1440
.int 26
.int 1440
.byte 2
.quad .loc_26_1441
.int 26
.int 1441
.byte 2
.quad .loc_26_1444
.int 26
.int 1444
.byte 2
.quad .loc_26_1445
.int 26
.int 1445
.byte 2
.quad .loc_26_1446
.int 26
.int 1446
.byte 2
.quad .loc_26_1447
.int 26
.int 1447
.byte 2
.quad .loc_26_1448
.int 26
.int 1448
.byte 2
.quad .loc_26_1449
.int 26
.int 1449
.byte 2
.quad .loc_26_1450
.int 26
.int 1450
.byte 2
.quad .loc_26_1451
.int 26
.int 1451
.byte 2
.quad .loc_26_1454
.int 26
.int 1454
.byte 2
.quad .loc_26_1455
.int 26
.int 1455
.byte 2
.quad .loc_26_1456
.int 26
.int 1456
.byte 2
.quad .loc_26_1457
.int 26
.int 1457
.byte 2
.quad .loc_26_1458
.int 26
.int 1458
.byte 2
.quad .loc_26_1460
.int 26
.int 1460
.byte 2
.quad .loc_26_1461
.int 26
.int 1461
.byte 2
.quad .loc_26_1462
.int 26
.int 1462
.byte 2
.quad .loc_26_1463
.int 26
.int 1463
.byte 2
.quad .loc_26_1464
.int 26
.int 1464
.byte 2
.quad .loc_26_1466
.int 26
.int 1466
.byte 2
.quad .loc_26_1467
.int 26
.int 1467
.byte 2
.quad .loc_26_1468
.int 26
.int 1468
.byte 2
.quad .loc_26_1469
.int 26
.int 1469
.byte 2
.quad .loc_26_1471
.int 26
.int 1471
.byte 2
.quad .loc_26_1472
.int 26
.int 1472
.byte 2
.quad .loc_26_1473
.int 26
.int 1473
.byte 2
.quad .loc_26_1475
.int 26
.int 1475
.byte 2
.quad .loc_26_1476
.int 26
.int 1476
.byte 2
.quad .loc_26_1477
.int 26
.int 1477
.byte 2
.quad .loc_26_1478
.int 26
.int 1478
.byte 2
.quad .loc_26_1480
.int 26
.int 1480
.byte 2
.quad .loc_26_1481
.int 26
.int 1481
.byte 2
.quad .loc_26_1483
.int 26
.int 1483
.byte 2
.quad .loc_26_1484
.int 26
.int 1484
.byte 2
.quad .loc_26_1488
.int 26
.int 1488
.byte 2
.quad .loc_26_1489
.int 26
.int 1489
.byte 2
.quad .loc_26_1491
.int 26
.int 1491
.byte 2
.quad .loc_26_1495
.int 26
.int 1495
.byte 2
.quad .loc_26_1497
.int 26
.int 1497
.byte 2
.quad .loc_26_1498
.int 26
.int 1498
.byte 2
.quad .loc_26_1499
.int 26
.int 1499
.byte 2
.quad .loc_26_1503
.int 26
.int 1503
.byte 2
.quad .loc_26_1504
.int 26
.int 1504
.byte 2
.quad .loc_26_1505
.int 26
.int 1505
.byte 2
.quad .loc_26_1508
.int 26
.int 1508
.byte 2
.quad .loc_26_1509
.int 26
.int 1509
.byte 2
.quad .loc_26_1510
.int 26
.int 1510
.byte 2
.quad .loc_26_1511
.int 26
.int 1511
.byte 2
.quad .loc_26_1512
.int 26
.int 1512
.byte 2
.quad .loc_26_1514
.int 26
.int 1514
.byte 2
.quad .loc_26_1516
.int 26
.int 1516
.byte 2
.quad .loc_26_1520
.int 26
.int 1520
.byte 2
.quad .loc_26_1521
.int 26
.int 1521
.byte 2
.quad .loc_26_1524
.int 26
.int 1524
.byte 2
.quad .loc_26_1525
.int 26
.int 1525
.byte 2
.quad .loc_26_1528
.int 26
.int 1528
.byte 2
.quad .loc_26_1530
.int 26
.int 1530
.byte 2
.quad .loc_26_1531
.int 26
.int 1531
.byte 2
.quad .loc_26_1534
.int 26
.int 1534
.byte 2
.quad .loc_26_1535
.int 26
.int 1535
.byte 2
.quad .loc_26_1538
.int 26
.int 1538
.byte 2
.quad .loc_26_1540
.int 26
.int 1540
.byte 2
.quad .loc_26_1541
.int 26
.int 1541
.byte 2
.quad .loc_26_1542
.int 26
.int 1542
.byte 2
.quad .loc_26_1544
.int 26
.int 1544
.byte 2
.quad .loc_26_1547
.int 26
.int 1547
.byte 2
.quad .loc_26_1549
.int 26
.int 1549
.byte 2
.quad .loc_26_1551
.int 26
.int 1551
.byte 2
.quad .loc_26_1552
.int 26
.int 1552
.byte 2
.quad .loc_26_1555
.int 26
.int 1555
.byte 2
.quad .loc_26_1556
.int 26
.int 1556
.byte 2
.quad .loc_26_1557
.int 26
.int 1557
.byte 2
.quad .loc_26_1558
.int 26
.int 1558
.byte 2
.quad .loc_26_1564
.int 26
.int 1564
.byte 2
.quad .loc_26_1565
.int 26
.int 1565
.byte 2
.quad .loc_26_1566
.int 26
.int 1566
.byte 2
.quad .loc_26_1567
.int 26
.int 1567
.byte 2
.quad .loc_26_1569
.int 26
.int 1569
.byte 2
.quad .loc_26_1570
.int 26
.int 1570
.byte 2
.quad .loc_26_1571
.int 26
.int 1571
.byte 2
.quad .loc_26_1572
.int 26
.int 1572
.byte 2
.quad .loc_26_1574
.int 26
.int 1574
.byte 2
.quad .loc_26_1579
.int 26
.int 1579
.byte 2
.quad .loc_26_1581
.int 26
.int 1581
.byte 2
.quad .loc_26_1582
.int 26
.int 1582
.byte 2
.quad .loc_26_1587
.int 26
.int 1587
.byte 2
.quad .loc_26_1588
.int 26
.int 1588
.byte 2
.quad .loc_26_1591
.int 26
.int 1591
.byte 2
.quad .loc_26_1592
.int 26
.int 1592
.byte 2
.quad .loc_26_1596
.int 26
.int 1596
.byte 2
.quad .loc_26_1597
.int 26
.int 1597
.byte 2
.quad .loc_26_1598
.int 26
.int 1598
.byte 2
.quad .loc_26_1600
.int 26
.int 1600
.byte 2
.quad .loc_26_1602
.int 26
.int 1602
.byte 2
.quad .loc_26_1607
.int 26
.int 1607
.byte 2
.quad .loc_26_1608
.int 26
.int 1608
.byte 2
.quad .loc_26_1609
.int 26
.int 1609
.byte 2
.quad .loc_26_1616
.int 26
.int 1616
.byte 2
.quad .loc_26_1617
.int 26
.int 1617
.byte 2
.quad .loc_26_1618
.int 26
.int 1618
.byte 2
.quad .loc_26_1622
.int 26
.int 1622
.byte 2
.quad .loc_26_1623
.int 26
.int 1623
.byte 2
.quad .loc_26_1625
.int 26
.int 1625
.byte 2
.quad .loc_26_1626
.int 26
.int 1626
.byte 2
.quad .loc_26_1627
.int 26
.int 1627
.byte 2
.quad .loc_26_1628
.int 26
.int 1628
.byte 2
.quad .loc_26_1631
.int 26
.int 1631
.byte 2
.quad .loc_26_1633
.int 26
.int 1633
.byte 2
.quad .loc_26_1638
.int 26
.int 1638
.byte 2
.quad .loc_26_1643
.int 26
.int 1643
.byte 2
.quad .loc_26_1648
.int 26
.int 1648
.byte 2
.quad .loc_26_1653
.int 26
.int 1653
.byte 2
.quad .loc_26_1659
.int 26
.int 1659
.byte 2
.quad .loc_26_1660
.int 26
.int 1660
.byte 2
.quad .loc_26_1661
.int 26
.int 1661
.byte 2
.quad .loc_26_1662
.int 26
.int 1662
.byte 2
.quad .loc_26_1663
.int 26
.int 1663
.byte 2
.quad .loc_26_1664
.int 26
.int 1664
.byte 2
.quad .loc_26_1666
.int 26
.int 1666
.byte 2
.quad .loc_26_1671
.int 26
.int 1671
.byte 2
.quad .loc_26_1672
.int 26
.int 1672
.byte 2
.quad .loc_26_1673
.int 26
.int 1673
.byte 2
.quad .loc_26_1674
.int 26
.int 1674
.byte 2
.quad .loc_26_1676
.int 26
.int 1676
.byte 2
.quad .loc_26_1677
.int 26
.int 1677
.byte 2
.quad .loc_26_1678
.int 26
.int 1678
.byte 2
.quad .loc_26_1681
.int 26
.int 1681
.byte 2
.quad .loc_26_1682
.int 26
.int 1682
.byte 2
.quad .loc_26_1683
.int 26
.int 1683
.byte 2
.quad .loc_26_1685
.int 26
.int 1685
.byte 2
.quad .loc_26_1687
.int 26
.int 1687
.byte 2
.quad .loc_26_1688
.int 26
.int 1688
.byte 2
.quad .loc_26_1689
.int 26
.int 1689
.byte 2
.quad .loc_26_1690
.int 26
.int 1690
.byte 2
.quad .loc_26_1691
.int 26
.int 1691
.byte 2
.quad .loc_26_1692
.int 26
.int 1692
.byte 2
.quad .loc_26_1693
.int 26
.int 1693
.byte 2
.quad .loc_26_1695
.int 26
.int 1695
.byte 2
.quad .loc_26_1696
.int 26
.int 1696
.byte 2
.quad .loc_26_1697
.int 26
.int 1697
.byte 2
.quad .loc_26_1698
.int 26
.int 1698
.byte 2
.quad .loc_26_1702
.int 26
.int 1702
.byte 2
.quad .loc_26_1703
.int 26
.int 1703
.byte 2
.quad .loc_26_1704
.int 26
.int 1704
.byte 2
.quad .loc_26_1705
.int 26
.int 1705
.byte 2
.quad .loc_26_1707
.int 26
.int 1707
.byte 2
.quad .loc_26_1708
.int 26
.int 1708
.byte 2
.quad .loc_26_1709
.int 26
.int 1709
.byte 2
.quad .loc_26_1710
.int 26
.int 1710
.byte 2
.quad .loc_26_1711
.int 26
.int 1711
.byte 2
.quad .loc_26_1713
.int 26
.int 1713
.byte 2
.quad .loc_26_1720
.int 26
.int 1720
.byte 2
.quad .loc_26_1721
.int 26
.int 1721
.byte 2
.quad .loc_26_1725
.int 26
.int 1725
.byte 2
.quad .loc_26_1726
.int 26
.int 1726
.byte 2
.quad .loc_26_1727
.int 26
.int 1727
.byte 2
.quad .loc_26_1728
.int 26
.int 1728
.byte 2
.quad .loc_26_1730
.int 26
.int 1730
.byte 2
.quad .loc_26_1734
.int 26
.int 1734
.byte 2
.quad .loc_26_1735
.int 26
.int 1735
.byte 2
.quad .loc_26_1741
.int 26
.int 1741
.byte 2
.quad .loc_26_1742
.int 26
.int 1742
.byte 2
.quad .loc_26_1745
.int 26
.int 1745
.byte 2
.quad .loc_26_1746
.int 26
.int 1746
.byte 2
.quad .loc_26_1747
.int 26
.int 1747
.byte 2
.quad .loc_26_1748
.int 26
.int 1748
.byte 2
.quad .loc_26_1749
.int 26
.int 1749
.byte 2
.quad .loc_26_1751
.int 26
.int 1751
.byte 2
.quad .loc_26_1752
.int 26
.int 1752
.byte 2
.quad .loc_26_1754
.int 26
.int 1754
.byte 2
.quad .loc_26_1755
.int 26
.int 1755
.byte 2
.quad .loc_26_1758
.int 26
.int 1758
.byte 2
.quad .loc_26_1762
.int 26
.int 1762
.byte 1
.int 27
.int 46
.asciz "/home/alois/Documents/bah-asm/src/./parser.bah"
.byte 2
.quad .loc_27_24
.int 27
.int 24
.byte 2
.quad .loc_27_26
.int 27
.int 26
.byte 2
.quad .loc_27_27
.int 27
.int 27
.byte 2
.quad .loc_27_28
.int 27
.int 28
.byte 2
.quad .loc_27_29
.int 27
.int 29
.byte 2
.quad .loc_27_32
.int 27
.int 32
.byte 2
.quad .loc_27_34
.int 27
.int 34
.byte 2
.quad .loc_27_35
.int 27
.int 35
.byte 2
.quad .loc_27_37
.int 27
.int 37
.byte 2
.quad .loc_27_38
.int 27
.int 38
.byte 2
.quad .loc_27_39
.int 27
.int 39
.byte 2
.quad .loc_27_42
.int 27
.int 42
.byte 2
.quad .loc_27_43
.int 27
.int 43
.byte 2
.quad .loc_27_44
.int 27
.int 44
.byte 2
.quad .loc_27_45
.int 27
.int 45
.byte 2
.quad .loc_27_48
.int 27
.int 48
.byte 2
.quad .loc_27_52
.int 27
.int 52
.byte 2
.quad .loc_27_53
.int 27
.int 53
.byte 2
.quad .loc_27_56
.int 27
.int 56
.byte 2
.quad .loc_27_58
.int 27
.int 58
.byte 2
.quad .loc_27_59
.int 27
.int 59
.byte 2
.quad .loc_27_60
.int 27
.int 60
.byte 2
.quad .loc_27_61
.int 27
.int 61
.byte 2
.quad .loc_27_64
.int 27
.int 64
.byte 2
.quad .loc_27_65
.int 27
.int 65
.byte 2
.quad .loc_27_66
.int 27
.int 66
.byte 2
.quad .loc_27_67
.int 27
.int 67
.byte 2
.quad .loc_27_69
.int 27
.int 69
.byte 2
.quad .loc_27_70
.int 27
.int 70
.byte 2
.quad .loc_27_71
.int 27
.int 71
.byte 2
.quad .loc_27_72
.int 27
.int 72
.byte 2
.quad .loc_27_75
.int 27
.int 75
.byte 2
.quad .loc_27_76
.int 27
.int 76
.byte 2
.quad .loc_27_78
.int 27
.int 78
.byte 2
.quad .loc_27_80
.int 27
.int 80
.byte 2
.quad .loc_27_81
.int 27
.int 81
.byte 2
.quad .loc_27_84
.int 27
.int 84
.byte 2
.quad .loc_27_85
.int 27
.int 85
.byte 2
.quad .loc_27_86
.int 27
.int 86
.byte 2
.quad .loc_27_87
.int 27
.int 87
.byte 2
.quad .loc_27_92
.int 27
.int 92
.byte 2
.quad .loc_27_93
.int 27
.int 93
.byte 2
.quad .loc_27_94
.int 27
.int 94
.byte 2
.quad .loc_27_97
.int 27
.int 97
.byte 2
.quad .loc_27_98
.int 27
.int 98
.byte 2
.quad .loc_27_101
.int 27
.int 101
.byte 2
.quad .loc_27_104
.int 27
.int 104
.byte 2
.quad .loc_27_105
.int 27
.int 105
.byte 2
.quad .loc_27_106
.int 27
.int 106
.byte 2
.quad .loc_27_107
.int 27
.int 107
.byte 2
.quad .loc_27_108
.int 27
.int 108
.byte 2
.quad .loc_27_109
.int 27
.int 109
.byte 2
.quad .loc_27_111
.int 27
.int 111
.byte 2
.quad .loc_27_112
.int 27
.int 112
.byte 2
.quad .loc_27_113
.int 27
.int 113
.byte 2
.quad .loc_27_114
.int 27
.int 114
.byte 2
.quad .loc_27_116
.int 27
.int 116
.byte 2
.quad .loc_27_117
.int 27
.int 117
.byte 2
.quad .loc_27_118
.int 27
.int 118
.byte 2
.quad .loc_27_119
.int 27
.int 119
.byte 2
.quad .loc_27_120
.int 27
.int 120
.byte 2
.quad .loc_27_122
.int 27
.int 122
.byte 2
.quad .loc_27_123
.int 27
.int 123
.byte 2
.quad .loc_27_124
.int 27
.int 124
.byte 2
.quad .loc_27_126
.int 27
.int 126
.byte 2
.quad .loc_27_127
.int 27
.int 127
.byte 2
.quad .loc_27_129
.int 27
.int 129
.byte 2
.quad .loc_27_130
.int 27
.int 130
.byte 2
.quad .loc_27_131
.int 27
.int 131
.byte 2
.quad .loc_27_134
.int 27
.int 134
.byte 2
.quad .loc_27_136
.int 27
.int 136
.byte 2
.quad .loc_27_137
.int 27
.int 137
.byte 2
.quad .loc_27_138
.int 27
.int 138
.byte 2
.quad .loc_27_139
.int 27
.int 139
.byte 2
.quad .loc_27_140
.int 27
.int 140
.byte 2
.quad .loc_27_141
.int 27
.int 141
.byte 2
.quad .loc_27_145
.int 27
.int 145
.byte 2
.quad .loc_27_146
.int 27
.int 146
.byte 2
.quad .loc_27_149
.int 27
.int 149
.byte 2
.quad .loc_27_151
.int 27
.int 151
.byte 2
.quad .loc_27_153
.int 27
.int 153
.byte 2
.quad .loc_27_155
.int 27
.int 155
.byte 2
.quad .loc_27_156
.int 27
.int 156
.byte 2
.quad .loc_27_157
.int 27
.int 157
.byte 2
.quad .loc_27_159
.int 27
.int 159
.byte 2
.quad .loc_27_160
.int 27
.int 160
.byte 2
.quad .loc_27_163
.int 27
.int 163
.byte 2
.quad .loc_27_164
.int 27
.int 164
.byte 2
.quad .loc_27_166
.int 27
.int 166
.byte 2
.quad .loc_27_167
.int 27
.int 167
.byte 2
.quad .loc_27_170
.int 27
.int 170
.byte 2
.quad .loc_27_171
.int 27
.int 171
.byte 2
.quad .loc_27_172
.int 27
.int 172
.byte 2
.quad .loc_27_173
.int 27
.int 173
.byte 2
.quad .loc_27_174
.int 27
.int 174
.byte 2
.quad .loc_27_177
.int 27
.int 177
.byte 2
.quad .loc_27_178
.int 27
.int 178
.byte 2
.quad .loc_27_181
.int 27
.int 181
.byte 2
.quad .loc_27_183
.int 27
.int 183
.byte 2
.quad .loc_27_184
.int 27
.int 184
.byte 2
.quad .loc_27_186
.int 27
.int 186
.byte 2
.quad .loc_27_188
.int 27
.int 188
.byte 2
.quad .loc_27_189
.int 27
.int 189
.byte 2
.quad .loc_27_194
.int 27
.int 194
.byte 2
.quad .loc_27_197
.int 27
.int 197
.byte 2
.quad .loc_27_198
.int 27
.int 198
.byte 2
.quad .loc_27_200
.int 27
.int 200
.byte 2
.quad .loc_27_202
.int 27
.int 202
.byte 2
.quad .loc_27_203
.int 27
.int 203
.byte 2
.quad .loc_27_204
.int 27
.int 204
.byte 2
.quad .loc_27_205
.int 27
.int 205
.byte 2
.quad .loc_27_206
.int 27
.int 206
.byte 2
.quad .loc_27_209
.int 27
.int 209
.byte 2
.quad .loc_27_212
.int 27
.int 212
.byte 2
.quad .loc_27_214
.int 27
.int 214
.byte 2
.quad .loc_27_215
.int 27
.int 215
.byte 2
.quad .loc_27_218
.int 27
.int 218
.byte 2
.quad .loc_27_219
.int 27
.int 219
.byte 2
.quad .loc_27_220
.int 27
.int 220
.byte 2
.quad .loc_27_221
.int 27
.int 221
.byte 2
.quad .loc_27_223
.int 27
.int 223
.byte 2
.quad .loc_27_225
.int 27
.int 225
.byte 2
.quad .loc_27_226
.int 27
.int 226
.byte 2
.quad .loc_27_230
.int 27
.int 230
.byte 2
.quad .loc_27_231
.int 27
.int 231
.byte 2
.quad .loc_27_234
.int 27
.int 234
.byte 2
.quad .loc_27_235
.int 27
.int 235
.byte 2
.quad .loc_27_237
.int 27
.int 237
.byte 2
.quad .loc_27_239
.int 27
.int 239
.byte 2
.quad .loc_27_240
.int 27
.int 240
.byte 2
.quad .loc_27_241
.int 27
.int 241
.byte 2
.quad .loc_27_242
.int 27
.int 242
.byte 2
.quad .loc_27_245
.int 27
.int 245
.byte 2
.quad .loc_27_246
.int 27
.int 246
.byte 2
.quad .loc_27_248
.int 27
.int 248
.byte 2
.quad .loc_27_249
.int 27
.int 249
.byte 2
.quad .loc_27_250
.int 27
.int 250
.byte 2
.quad .loc_27_251
.int 27
.int 251
.byte 2
.quad .loc_27_252
.int 27
.int 252
.byte 2
.quad .loc_27_253
.int 27
.int 253
.byte 2
.quad .loc_27_254
.int 27
.int 254
.byte 2
.quad .loc_27_256
.int 27
.int 256
.byte 2
.quad .loc_27_257
.int 27
.int 257
.byte 2
.quad .loc_27_258
.int 27
.int 258
.byte 2
.quad .loc_27_261
.int 27
.int 261
.byte 2
.quad .loc_27_263
.int 27
.int 263
.byte 2
.quad .loc_27_265
.int 27
.int 265
.byte 2
.quad .loc_27_266
.int 27
.int 266
.byte 2
.quad .loc_27_267
.int 27
.int 267
.byte 2
.quad .loc_27_269
.int 27
.int 269
.byte 2
.quad .loc_27_270
.int 27
.int 270
.byte 2
.quad .loc_27_273
.int 27
.int 273
.byte 2
.quad .loc_27_274
.int 27
.int 274
.byte 2
.quad .loc_27_275
.int 27
.int 275
.byte 2
.quad .loc_27_276
.int 27
.int 276
.byte 2
.quad .loc_27_278
.int 27
.int 278
.byte 2
.quad .loc_27_279
.int 27
.int 279
.byte 2
.quad .loc_27_280
.int 27
.int 280
.byte 2
.quad .loc_27_281
.int 27
.int 281
.byte 2
.quad .loc_27_283
.int 27
.int 283
.byte 2
.quad .loc_27_284
.int 27
.int 284
.byte 2
.quad .loc_27_287
.int 27
.int 287
.byte 2
.quad .loc_27_289
.int 27
.int 289
.byte 2
.quad .loc_27_291
.int 27
.int 291
.byte 2
.quad .loc_27_292
.int 27
.int 292
.byte 2
.quad .loc_27_296
.int 27
.int 296
.byte 2
.quad .loc_27_297
.int 27
.int 297
.byte 2
.quad .loc_27_300
.int 27
.int 300
.byte 2
.quad .loc_27_302
.int 27
.int 302
.byte 2
.quad .loc_27_303
.int 27
.int 303
.byte 2
.quad .loc_27_304
.int 27
.int 304
.byte 2
.quad .loc_27_305
.int 27
.int 305
.byte 2
.quad .loc_27_306
.int 27
.int 306
.byte 2
.quad .loc_27_307
.int 27
.int 307
.byte 2
.quad .loc_27_308
.int 27
.int 308
.byte 2
.quad .loc_27_309
.int 27
.int 309
.byte 2
.quad .loc_27_310
.int 27
.int 310
.byte 2
.quad .loc_27_311
.int 27
.int 311
.byte 2
.quad .loc_27_312
.int 27
.int 312
.byte 2
.quad .loc_27_313
.int 27
.int 313
.byte 2
.quad .loc_27_314
.int 27
.int 314
.byte 2
.quad .loc_27_315
.int 27
.int 315
.byte 2
.quad .loc_27_316
.int 27
.int 316
.byte 2
.quad .loc_27_317
.int 27
.int 317
.byte 2
.quad .loc_27_318
.int 27
.int 318
.byte 2
.quad .loc_27_319
.int 27
.int 319
.byte 2
.quad .loc_27_320
.int 27
.int 320
.byte 2
.quad .loc_27_321
.int 27
.int 321
.byte 2
.quad .loc_27_322
.int 27
.int 322
.byte 2
.quad .loc_27_323
.int 27
.int 323
.byte 2
.quad .loc_27_324
.int 27
.int 324
.byte 2
.quad .loc_27_325
.int 27
.int 325
.byte 2
.quad .loc_27_326
.int 27
.int 326
.byte 2
.quad .loc_27_327
.int 27
.int 327
.byte 2
.quad .loc_27_328
.int 27
.int 328
.byte 2
.quad .loc_27_329
.int 27
.int 329
.byte 2
.quad .loc_27_330
.int 27
.int 330
.byte 2
.quad .loc_27_331
.int 27
.int 331
.byte 2
.quad .loc_27_332
.int 27
.int 332
.byte 2
.quad .loc_27_333
.int 27
.int 333
.byte 2
.quad .loc_27_334
.int 27
.int 334
.byte 2
.quad .loc_27_335
.int 27
.int 335
.byte 2
.quad .loc_27_336
.int 27
.int 336
.byte 2
.quad .loc_27_337
.int 27
.int 337
.byte 2
.quad .loc_27_338
.int 27
.int 338
.byte 2
.quad .loc_27_339
.int 27
.int 339
.byte 2
.quad .loc_27_340
.int 27
.int 340
.byte 2
.quad .loc_27_341
.int 27
.int 341
.byte 2
.quad .loc_27_342
.int 27
.int 342
.byte 2
.quad .loc_27_343
.int 27
.int 343
.byte 2
.quad .loc_27_344
.int 27
.int 344
.byte 2
.quad .loc_27_345
.int 27
.int 345
.byte 2
.quad .loc_27_349
.int 27
.int 349
.byte 2
.quad .loc_27_350
.int 27
.int 350
.byte 2
.quad .loc_27_351
.int 27
.int 351
.byte 2
.quad .loc_27_352
.int 27
.int 352
.byte 2
.quad .loc_27_354
.int 27
.int 354
.byte 2
.quad .loc_27_356
.int 27
.int 356
.byte 2
.quad .loc_27_357
.int 27
.int 357
.byte 2
.quad .loc_27_358
.int 27
.int 358
.byte 2
.quad .loc_27_359
.int 27
.int 359
.byte 2
.quad .loc_27_360
.int 27
.int 360
.byte 2
.quad .loc_27_362
.int 27
.int 362
.byte 2
.quad .loc_27_363
.int 27
.int 363
.byte 2
.quad .loc_27_366
.int 27
.int 366
.byte 2
.quad .loc_27_368
.int 27
.int 368
.byte 2
.quad .loc_27_372
.int 27
.int 372
.byte 2
.quad .loc_27_377
.int 27
.int 377
.byte 2
.quad .loc_27_378
.int 27
.int 378
.byte 2
.quad .loc_27_383
.int 27
.int 383
.byte 2
.quad .loc_27_385
.int 27
.int 385
.byte 2
.quad .loc_27_387
.int 27
.int 387
.byte 2
.quad .loc_27_388
.int 27
.int 388
.byte 2
.quad .loc_27_389
.int 27
.int 389
.byte 2
.quad .loc_27_392
.int 27
.int 392
.byte 2
.quad .loc_27_393
.int 27
.int 393
.byte 2
.quad .loc_27_394
.int 27
.int 394
.byte 2
.quad .loc_27_397
.int 27
.int 397
.byte 2
.quad .loc_27_398
.int 27
.int 398
.byte 2
.quad .loc_27_400
.int 27
.int 400
.byte 2
.quad .loc_27_401
.int 27
.int 401
.byte 2
.quad .loc_27_404
.int 27
.int 404
.byte 2
.quad .loc_27_405
.int 27
.int 405
.byte 2
.quad .loc_27_409
.int 27
.int 409
.byte 2
.quad .loc_27_416
.int 27
.int 416
.byte 2
.quad .loc_27_419
.int 27
.int 419
.byte 2
.quad .loc_27_420
.int 27
.int 420
.byte 2
.quad .loc_27_421
.int 27
.int 421
.byte 2
.quad .loc_27_422
.int 27
.int 422
.byte 2
.quad .loc_27_423
.int 27
.int 423
.byte 2
.quad .loc_27_427
.int 27
.int 427
.byte 2
.quad .loc_27_430
.int 27
.int 430
.byte 2
.quad .loc_27_431
.int 27
.int 431
.byte 2
.quad .loc_27_435
.int 27
.int 435
.byte 2
.quad .loc_27_436
.int 27
.int 436
.byte 2
.quad .loc_27_439
.int 27
.int 439
.byte 2
.quad .loc_27_440
.int 27
.int 440
.byte 2
.quad .loc_27_443
.int 27
.int 443
.byte 2
.quad .loc_27_450
.int 27
.int 450
.byte 2
.quad .loc_27_451
.int 27
.int 451
.byte 2
.quad .loc_27_452
.int 27
.int 452
.byte 2
.quad .loc_27_453
.int 27
.int 453
.byte 2
.quad .loc_27_454
.int 27
.int 454
.byte 2
.quad .loc_27_457
.int 27
.int 457
.byte 2
.quad .loc_27_458
.int 27
.int 458
.byte 2
.quad .loc_27_462
.int 27
.int 462
.byte 2
.quad .loc_27_463
.int 27
.int 463
.byte 2
.quad .loc_27_464
.int 27
.int 464
.byte 2
.quad .loc_27_466
.int 27
.int 466
.byte 2
.quad .loc_27_467
.int 27
.int 467
.byte 2
.quad .loc_27_468
.int 27
.int 468
.byte 2
.quad .loc_27_469
.int 27
.int 469
.byte 2
.quad .loc_27_470
.int 27
.int 470
.byte 2
.quad .loc_27_473
.int 27
.int 473
.byte 2
.quad .loc_27_474
.int 27
.int 474
.byte 2
.quad .loc_27_475
.int 27
.int 475
.byte 2
.quad .loc_27_479
.int 27
.int 479
.byte 2
.quad .loc_27_480
.int 27
.int 480
.byte 2
.quad .loc_27_483
.int 27
.int 483
.byte 2
.quad .loc_27_487
.int 27
.int 487
.byte 2
.quad .loc_27_489
.int 27
.int 489
.byte 2
.quad .loc_27_490
.int 27
.int 490
.byte 2
.quad .loc_27_491
.int 27
.int 491
.byte 2
.quad .loc_27_492
.int 27
.int 492
.byte 2
.quad .loc_27_494
.int 27
.int 494
.byte 2
.quad .loc_27_495
.int 27
.int 495
.byte 2
.quad .loc_27_496
.int 27
.int 496
.byte 2
.quad .loc_27_497
.int 27
.int 497
.byte 2
.quad .loc_27_498
.int 27
.int 498
.byte 2
.quad .loc_27_499
.int 27
.int 499
.byte 2
.quad .loc_27_500
.int 27
.int 500
.byte 2
.quad .loc_27_501
.int 27
.int 501
.byte 2
.quad .loc_27_504
.int 27
.int 504
.byte 2
.quad .loc_27_505
.int 27
.int 505
.byte 2
.quad .loc_27_506
.int 27
.int 506
.byte 2
.quad .loc_27_507
.int 27
.int 507
.byte 2
.quad .loc_27_508
.int 27
.int 508
.byte 2
.quad .loc_27_510
.int 27
.int 510
.byte 2
.quad .loc_27_511
.int 27
.int 511
.byte 2
.quad .loc_27_512
.int 27
.int 512
.byte 2
.quad .loc_27_513
.int 27
.int 513
.byte 2
.quad .loc_27_515
.int 27
.int 515
.byte 2
.quad .loc_27_520
.int 27
.int 520
.byte 2
.quad .loc_27_522
.int 27
.int 522
.byte 2
.quad .loc_27_523
.int 27
.int 523
.byte 2
.quad .loc_27_526
.int 27
.int 526
.byte 2
.quad .loc_27_528
.int 27
.int 528
.byte 2
.quad .loc_27_529
.int 27
.int 529
.byte 2
.quad .loc_27_534
.int 27
.int 534
.byte 2
.quad .loc_27_538
.int 27
.int 538
.byte 2
.quad .loc_27_539
.int 27
.int 539
.byte 2
.quad .loc_27_545
.int 27
.int 545
.byte 2
.quad .loc_27_547
.int 27
.int 547
.byte 2
.quad .loc_27_548
.int 27
.int 548
.byte 2
.quad .loc_27_551
.int 27
.int 551
.byte 2
.quad .loc_27_552
.int 27
.int 552
.byte 2
.quad .loc_27_554
.int 27
.int 554
.byte 2
.quad .loc_27_555
.int 27
.int 555
.byte 2
.quad .loc_27_558
.int 27
.int 558
.byte 2
.quad .loc_27_559
.int 27
.int 559
.byte 2
.quad .loc_27_560
.int 27
.int 560
.byte 2
.quad .loc_27_561
.int 27
.int 561
.byte 2
.quad .loc_27_562
.int 27
.int 562
.byte 2
.quad .loc_27_565
.int 27
.int 565
.byte 2
.quad .loc_27_568
.int 27
.int 568
.byte 2
.quad .loc_27_569
.int 27
.int 569
.byte 2
.quad .loc_27_572
.int 27
.int 572
.byte 2
.quad .loc_27_578
.int 27
.int 578
.byte 2
.quad .loc_27_579
.int 27
.int 579
.byte 2
.quad .loc_27_583
.int 27
.int 583
.byte 2
.quad .loc_27_584
.int 27
.int 584
.byte 2
.quad .loc_27_587
.int 27
.int 587
.byte 2
.quad .loc_27_588
.int 27
.int 588
.byte 2
.quad .loc_27_592
.int 27
.int 592
.byte 2
.quad .loc_27_593
.int 27
.int 593
.byte 2
.quad .loc_27_599
.int 27
.int 599
.byte 2
.quad .loc_27_603
.int 27
.int 603
.byte 2
.quad .loc_27_604
.int 27
.int 604
.byte 2
.quad .loc_27_608
.int 27
.int 608
.byte 2
.quad .loc_27_609
.int 27
.int 609
.byte 2
.quad .loc_27_611
.int 27
.int 611
.byte 2
.quad .loc_27_612
.int 27
.int 612
.byte 2
.quad .loc_27_613
.int 27
.int 613
.byte 2
.quad .loc_27_616
.int 27
.int 616
.byte 2
.quad .loc_27_622
.int 27
.int 622
.byte 2
.quad .loc_27_623
.int 27
.int 623
.byte 2
.quad .loc_27_624
.int 27
.int 624
.byte 2
.quad .loc_27_625
.int 27
.int 625
.byte 2
.quad .loc_27_629
.int 27
.int 629
.byte 2
.quad .loc_27_630
.int 27
.int 630
.byte 2
.quad .loc_27_637
.int 27
.int 637
.byte 2
.quad .loc_27_642
.int 27
.int 642
.byte 2
.quad .loc_27_643
.int 27
.int 643
.byte 2
.quad .loc_27_644
.int 27
.int 644
.byte 2
.quad .loc_27_649
.int 27
.int 649
.byte 2
.quad .loc_27_650
.int 27
.int 650
.byte 2
.quad .loc_27_651
.int 27
.int 651
.byte 2
.quad .loc_27_652
.int 27
.int 652
.byte 2
.quad .loc_27_653
.int 27
.int 653
.byte 2
.quad .loc_27_654
.int 27
.int 654
.byte 2
.quad .loc_27_655
.int 27
.int 655
.byte 2
.quad .loc_27_657
.int 27
.int 657
.byte 2
.quad .loc_27_659
.int 27
.int 659
.byte 2
.quad .loc_27_662
.int 27
.int 662
.byte 2
.quad .loc_27_663
.int 27
.int 663
.byte 2
.quad .loc_27_666
.int 27
.int 666
.byte 2
.quad .loc_27_668
.int 27
.int 668
.byte 2
.quad .loc_27_670
.int 27
.int 670
.byte 2
.quad .loc_27_671
.int 27
.int 671
.byte 2
.quad .loc_27_672
.int 27
.int 672
.byte 2
.quad .loc_27_675
.int 27
.int 675
.byte 2
.quad .loc_27_677
.int 27
.int 677
.byte 2
.quad .loc_27_678
.int 27
.int 678
.byte 2
.quad .loc_27_679
.int 27
.int 679
.byte 2
.quad .loc_27_680
.int 27
.int 680
.byte 2
.quad .loc_27_683
.int 27
.int 683
.byte 2
.quad .loc_27_684
.int 27
.int 684
.byte 2
.quad .loc_27_687
.int 27
.int 687
.byte 2
.quad .loc_27_690
.int 27
.int 690
.byte 2
.quad .loc_27_691
.int 27
.int 691
.byte 2
.quad .loc_27_693
.int 27
.int 693
.byte 2
.quad .loc_27_695
.int 27
.int 695
.byte 2
.quad .loc_27_696
.int 27
.int 696
.byte 2
.quad .loc_27_697
.int 27
.int 697
.byte 2
.quad .loc_27_698
.int 27
.int 698
.byte 2
.quad .loc_27_699
.int 27
.int 699
.byte 2
.quad .loc_27_700
.int 27
.int 700
.byte 2
.quad .loc_27_703
.int 27
.int 703
.byte 2
.quad .loc_27_704
.int 27
.int 704
.byte 2
.quad .loc_27_705
.int 27
.int 705
.byte 2
.quad .loc_27_706
.int 27
.int 706
.byte 2
.quad .loc_27_707
.int 27
.int 707
.byte 2
.quad .loc_27_709
.int 27
.int 709
.byte 2
.quad .loc_27_710
.int 27
.int 710
.byte 2
.quad .loc_27_711
.int 27
.int 711
.byte 2
.quad .loc_27_712
.int 27
.int 712
.byte 2
.quad .loc_27_714
.int 27
.int 714
.byte 2
.quad .loc_27_719
.int 27
.int 719
.byte 2
.quad .loc_27_720
.int 27
.int 720
.byte 2
.quad .loc_27_721
.int 27
.int 721
.byte 2
.quad .loc_27_722
.int 27
.int 722
.byte 2
.quad .loc_27_723
.int 27
.int 723
.byte 2
.quad .loc_27_725
.int 27
.int 725
.byte 2
.quad .loc_27_726
.int 27
.int 726
.byte 2
.quad .loc_27_727
.int 27
.int 727
.byte 2
.quad .loc_27_732
.int 27
.int 732
.byte 2
.quad .loc_27_733
.int 27
.int 733
.byte 2
.quad .loc_27_735
.int 27
.int 735
.byte 2
.quad .loc_27_736
.int 27
.int 736
.byte 2
.quad .loc_27_739
.int 27
.int 739
.byte 2
.quad .loc_27_740
.int 27
.int 740
.byte 2
.quad .loc_27_741
.int 27
.int 741
.byte 2
.quad .loc_27_744
.int 27
.int 744
.byte 2
.quad .loc_27_745
.int 27
.int 745
.byte 2
.quad .loc_27_746
.int 27
.int 746
.byte 2
.quad .loc_27_747
.int 27
.int 747
.byte 2
.quad .loc_27_752
.int 27
.int 752
.byte 2
.quad .loc_27_753
.int 27
.int 753
.byte 2
.quad .loc_27_756
.int 27
.int 756
.byte 2
.quad .loc_27_759
.int 27
.int 759
.byte 2
.quad .loc_27_760
.int 27
.int 760
.byte 2
.quad .loc_27_761
.int 27
.int 761
.byte 2
.quad .loc_27_762
.int 27
.int 762
.byte 2
.quad .loc_27_763
.int 27
.int 763
.byte 2
.quad .loc_27_766
.int 27
.int 766
.byte 2
.quad .loc_27_768
.int 27
.int 768
.byte 2
.quad .loc_27_769
.int 27
.int 769
.byte 2
.quad .loc_27_772
.int 27
.int 772
.byte 2
.quad .loc_27_773
.int 27
.int 773
.byte 2
.quad .loc_27_774
.int 27
.int 774
.byte 2
.quad .loc_27_776
.int 27
.int 776
.byte 2
.quad .loc_27_777
.int 27
.int 777
.byte 2
.quad .loc_27_779
.int 27
.int 779
.byte 2
.quad .loc_27_782
.int 27
.int 782
.byte 2
.quad .loc_27_783
.int 27
.int 783
.byte 2
.quad .loc_27_784
.int 27
.int 784
.byte 2
.quad .loc_27_785
.int 27
.int 785
.byte 2
.quad .loc_27_786
.int 27
.int 786
.byte 2
.quad .loc_27_787
.int 27
.int 787
.byte 2
.quad .loc_27_788
.int 27
.int 788
.byte 2
.quad .loc_27_791
.int 27
.int 791
.byte 2
.quad .loc_27_792
.int 27
.int 792
.byte 2
.quad .loc_27_794
.int 27
.int 794
.byte 2
.quad .loc_27_796
.int 27
.int 796
.byte 2
.quad .loc_27_797
.int 27
.int 797
.byte 2
.quad .loc_27_798
.int 27
.int 798
.byte 2
.quad .loc_27_799
.int 27
.int 799
.byte 2
.quad .loc_27_801
.int 27
.int 801
.byte 2
.quad .loc_27_802
.int 27
.int 802
.byte 2
.quad .loc_27_803
.int 27
.int 803
.byte 2
.quad .loc_27_804
.int 27
.int 804
.byte 2
.quad .loc_27_805
.int 27
.int 805
.byte 2
.quad .loc_27_806
.int 27
.int 806
.byte 2
.quad .loc_27_807
.int 27
.int 807
.byte 2
.quad .loc_27_808
.int 27
.int 808
.byte 2
.quad .loc_27_809
.int 27
.int 809
.byte 2
.quad .loc_27_815
.int 27
.int 815
.byte 2
.quad .loc_27_816
.int 27
.int 816
.byte 2
.quad .loc_27_817
.int 27
.int 817
.byte 2
.quad .loc_27_819
.int 27
.int 819
.byte 2
.quad .loc_27_820
.int 27
.int 820
.byte 2
.quad .loc_27_821
.int 27
.int 821
.byte 2
.quad .loc_27_822
.int 27
.int 822
.byte 2
.quad .loc_27_823
.int 27
.int 823
.byte 2
.quad .loc_27_827
.int 27
.int 827
.byte 2
.quad .loc_27_828
.int 27
.int 828
.byte 2
.quad .loc_27_830
.int 27
.int 830
.byte 2
.quad .loc_27_831
.int 27
.int 831
.byte 2
.quad .loc_27_832
.int 27
.int 832
.byte 2
.quad .loc_27_833
.int 27
.int 833
.byte 2
.quad .loc_27_834
.int 27
.int 834
.byte 2
.quad .loc_27_835
.int 27
.int 835
.byte 2
.quad .loc_27_836
.int 27
.int 836
.byte 2
.quad .loc_27_837
.int 27
.int 837
.byte 2
.quad .loc_27_840
.int 27
.int 840
.byte 2
.quad .loc_27_841
.int 27
.int 841
.byte 2
.quad .loc_27_842
.int 27
.int 842
.byte 2
.quad .loc_27_845
.int 27
.int 845
.byte 2
.quad .loc_27_846
.int 27
.int 846
.byte 2
.quad .loc_27_847
.int 27
.int 847
.byte 2
.quad .loc_27_848
.int 27
.int 848
.byte 2
.quad .loc_27_851
.int 27
.int 851
.byte 2
.quad .loc_27_855
.int 27
.int 855
.byte 2
.quad .loc_27_856
.int 27
.int 856
.byte 2
.quad .loc_27_859
.int 27
.int 859
.byte 2
.quad .loc_27_860
.int 27
.int 860
.byte 2
.quad .loc_27_861
.int 27
.int 861
.byte 2
.quad .loc_27_864
.int 27
.int 864
.byte 2
.quad .loc_27_865
.int 27
.int 865
.byte 2
.quad .loc_27_866
.int 27
.int 866
.byte 2
.quad .loc_27_868
.int 27
.int 868
.byte 2
.quad .loc_27_869
.int 27
.int 869
.byte 2
.quad .loc_27_870
.int 27
.int 870
.byte 2
.quad .loc_27_873
.int 27
.int 873
.byte 2
.quad .loc_27_877
.int 27
.int 877
.byte 2
.quad .loc_27_878
.int 27
.int 878
.byte 2
.quad .loc_27_880
.int 27
.int 880
.byte 2
.quad .loc_27_881
.int 27
.int 881
.byte 2
.quad .loc_27_883
.int 27
.int 883
.byte 2
.quad .loc_27_884
.int 27
.int 884
.byte 2
.quad .loc_27_886
.int 27
.int 886
.byte 2
.quad .loc_27_887
.int 27
.int 887
.byte 2
.quad .loc_27_888
.int 27
.int 888
.byte 2
.quad .loc_27_891
.int 27
.int 891
.byte 2
.quad .loc_27_892
.int 27
.int 892
.byte 2
.quad .loc_27_893
.int 27
.int 893
.byte 2
.quad .loc_27_894
.int 27
.int 894
.byte 2
.quad .loc_27_897
.int 27
.int 897
.byte 2
.quad .loc_27_901
.int 27
.int 901
.byte 2
.quad .loc_27_902
.int 27
.int 902
.byte 2
.quad .loc_27_904
.int 27
.int 904
.byte 2
.quad .loc_27_905
.int 27
.int 905
.byte 2
.quad .loc_27_906
.int 27
.int 906
.byte 2
.quad .loc_27_908
.int 27
.int 908
.byte 2
.quad .loc_27_914
.int 27
.int 914
.byte 2
.quad .loc_27_915
.int 27
.int 915
.byte 2
.quad .loc_27_916
.int 27
.int 916
.byte 2
.quad .loc_27_918
.int 27
.int 918
.byte 2
.quad .loc_27_919
.int 27
.int 919
.byte 2
.quad .loc_27_920
.int 27
.int 920
.byte 2
.quad .loc_27_923
.int 27
.int 923
.byte 2
.quad .loc_27_929
.int 27
.int 929
.byte 2
.quad .loc_27_930
.int 27
.int 930
.byte 2
.quad .loc_27_931
.int 27
.int 931
.byte 2
.quad .loc_27_932
.int 27
.int 932
.byte 2
.quad .loc_27_936
.int 27
.int 936
.byte 2
.quad .loc_27_937
.int 27
.int 937
.byte 2
.quad .loc_27_938
.int 27
.int 938
.byte 2
.quad .loc_27_939
.int 27
.int 939
.byte 2
.quad .loc_27_943
.int 27
.int 943
.byte 2
.quad .loc_27_944
.int 27
.int 944
.byte 2
.quad .loc_27_945
.int 27
.int 945
.byte 2
.quad .loc_27_954
.int 27
.int 954
.byte 2
.quad .loc_27_955
.int 27
.int 955
.byte 2
.quad .loc_27_958
.int 27
.int 958
.byte 2
.quad .loc_27_961
.int 27
.int 961
.byte 2
.quad .loc_27_962
.int 27
.int 962
.byte 2
.quad .loc_27_963
.int 27
.int 963
.byte 2
.quad .loc_27_966
.int 27
.int 966
.byte 2
.quad .loc_27_967
.int 27
.int 967
.byte 2
.quad .loc_27_973
.int 27
.int 973
.byte 2
.quad .loc_27_976
.int 27
.int 976
.byte 2
.quad .loc_27_977
.int 27
.int 977
.byte 2
.quad .loc_27_979
.int 27
.int 979
.byte 2
.quad .loc_27_980
.int 27
.int 980
.byte 2
.quad .loc_27_983
.int 27
.int 983
.byte 2
.quad .loc_27_985
.int 27
.int 985
.byte 2
.quad .loc_27_986
.int 27
.int 986
.byte 2
.quad .loc_27_987
.int 27
.int 987
.byte 2
.quad .loc_27_994
.int 27
.int 994
.byte 2
.quad .loc_27_995
.int 27
.int 995
.byte 2
.quad .loc_27_996
.int 27
.int 996
.byte 2
.quad .loc_27_997
.int 27
.int 997
.byte 2
.quad .loc_27_999
.int 27
.int 999
.byte 2
.quad .loc_27_1000
.int 27
.int 1000
.byte 2
.quad .loc_27_1001
.int 27
.int 1001
.byte 2
.quad .loc_27_1002
.int 27
.int 1002
.byte 2
.quad .loc_27_1003
.int 27
.int 1003
.byte 2
.quad .loc_27_1004
.int 27
.int 1004
.byte 2
.quad .loc_27_1005
.int 27
.int 1005
.byte 2
.quad .loc_27_1009
.int 27
.int 1009
.byte 2
.quad .loc_27_1011
.int 27
.int 1011
.byte 2
.quad .loc_27_1012
.int 27
.int 1012
.byte 2
.quad .loc_27_1015
.int 27
.int 1015
.byte 2
.quad .loc_27_1016
.int 27
.int 1016
.byte 2
.quad .loc_27_1019
.int 27
.int 1019
.byte 2
.quad .loc_27_1021
.int 27
.int 1021
.byte 2
.quad .loc_27_1024
.int 27
.int 1024
.byte 2
.quad .loc_27_1026
.int 27
.int 1026
.byte 2
.quad .loc_27_1027
.int 27
.int 1027
.byte 2
.quad .loc_27_1035
.int 27
.int 1035
.byte 2
.quad .loc_27_1038
.int 27
.int 1038
.byte 2
.quad .loc_27_1039
.int 27
.int 1039
.byte 2
.quad .loc_27_1043
.int 27
.int 1043
.byte 2
.quad .loc_27_1044
.int 27
.int 1044
.byte 2
.quad .loc_27_1046
.int 27
.int 1046
.byte 2
.quad .loc_27_1047
.int 27
.int 1047
.byte 2
.quad .loc_27_1048
.int 27
.int 1048
.byte 2
.quad .loc_27_1049
.int 27
.int 1049
.byte 2
.quad .loc_27_1051
.int 27
.int 1051
.byte 2
.quad .loc_27_1054
.int 27
.int 1054
.byte 2
.quad .loc_27_1055
.int 27
.int 1055
.byte 2
.quad .loc_27_1058
.int 27
.int 1058
.byte 2
.quad .loc_27_1059
.int 27
.int 1059
.byte 2
.quad .loc_27_1060
.int 27
.int 1060
.byte 2
.quad .loc_27_1062
.int 27
.int 1062
.byte 2
.quad .loc_27_1063
.int 27
.int 1063
.byte 2
.quad .loc_27_1064
.int 27
.int 1064
.byte 2
.quad .loc_27_1065
.int 27
.int 1065
.byte 2
.quad .loc_27_1067
.int 27
.int 1067
.byte 2
.quad .loc_27_1070
.int 27
.int 1070
.byte 2
.quad .loc_27_1071
.int 27
.int 1071
.byte 2
.quad .loc_27_1073
.int 27
.int 1073
.byte 2
.quad .loc_27_1076
.int 27
.int 1076
.byte 2
.quad .loc_27_1078
.int 27
.int 1078
.byte 2
.quad .loc_27_1080
.int 27
.int 1080
.byte 2
.quad .loc_27_1081
.int 27
.int 1081
.byte 2
.quad .loc_27_1085
.int 27
.int 1085
.byte 2
.quad .loc_27_1086
.int 27
.int 1086
.byte 2
.quad .loc_27_1089
.int 27
.int 1089
.byte 2
.quad .loc_27_1090
.int 27
.int 1090
.byte 2
.quad .loc_27_1091
.int 27
.int 1091
.byte 2
.quad .loc_27_1093
.int 27
.int 1093
.byte 2
.quad .loc_27_1094
.int 27
.int 1094
.byte 2
.quad .loc_27_1096
.int 27
.int 1096
.byte 2
.quad .loc_27_1097
.int 27
.int 1097
.byte 2
.quad .loc_27_1100
.int 27
.int 1100
.byte 2
.quad .loc_27_1106
.int 27
.int 1106
.byte 2
.quad .loc_27_1108
.int 27
.int 1108
.byte 2
.quad .loc_27_1109
.int 27
.int 1109
.byte 2
.quad .loc_27_1110
.int 27
.int 1110
.byte 2
.quad .loc_27_1112
.int 27
.int 1112
.byte 2
.quad .loc_27_1116
.int 27
.int 1116
.byte 2
.quad .loc_27_1117
.int 27
.int 1117
.byte 2
.quad .loc_27_1118
.int 27
.int 1118
.byte 2
.quad .loc_27_1120
.int 27
.int 1120
.byte 2
.quad .loc_27_1121
.int 27
.int 1121
.byte 2
.quad .loc_27_1123
.int 27
.int 1123
.byte 2
.quad .loc_27_1124
.int 27
.int 1124
.byte 2
.quad .loc_27_1127
.int 27
.int 1127
.byte 2
.quad .loc_27_1129
.int 27
.int 1129
.byte 2
.quad .loc_27_1130
.int 27
.int 1130
.byte 2
.quad .loc_27_1133
.int 27
.int 1133
.byte 2
.quad .loc_27_1135
.int 27
.int 1135
.byte 2
.quad .loc_27_1136
.int 27
.int 1136
.byte 2
.quad .loc_27_1137
.int 27
.int 1137
.byte 2
.quad .loc_27_1139
.int 27
.int 1139
.byte 2
.quad .loc_27_1142
.int 27
.int 1142
.byte 2
.quad .loc_27_1143
.int 27
.int 1143
.byte 2
.quad .loc_27_1146
.int 27
.int 1146
.byte 2
.quad .loc_27_1148
.int 27
.int 1148
.byte 2
.quad .loc_27_1149
.int 27
.int 1149
.byte 2
.quad .loc_27_1150
.int 27
.int 1150
.byte 2
.quad .loc_27_1151
.int 27
.int 1151
.byte 2
.quad .loc_27_1155
.int 27
.int 1155
.byte 2
.quad .loc_27_1156
.int 27
.int 1156
.byte 2
.quad .loc_27_1158
.int 27
.int 1158
.byte 2
.quad .loc_27_1159
.int 27
.int 1159
.byte 2
.quad .loc_27_1160
.int 27
.int 1160
.byte 2
.quad .loc_27_1161
.int 27
.int 1161
.byte 2
.quad .loc_27_1163
.int 27
.int 1163
.byte 2
.quad .loc_27_1164
.int 27
.int 1164
.byte 2
.quad .loc_27_1167
.int 27
.int 1167
.byte 2
.quad .loc_27_1168
.int 27
.int 1168
.byte 2
.quad .loc_27_1169
.int 27
.int 1169
.byte 2
.quad .loc_27_1170
.int 27
.int 1170
.byte 2
.quad .loc_27_1171
.int 27
.int 1171
.byte 2
.quad .loc_27_1172
.int 27
.int 1172
.byte 2
.quad .loc_27_1173
.int 27
.int 1173
.byte 2
.quad .loc_27_1174
.int 27
.int 1174
.byte 2
.quad .loc_27_1178
.int 27
.int 1178
.byte 2
.quad .loc_27_1179
.int 27
.int 1179
.byte 2
.quad .loc_27_1183
.int 27
.int 1183
.byte 2
.quad .loc_27_1184
.int 27
.int 1184
.byte 2
.quad .loc_27_1185
.int 27
.int 1185
.byte 2
.quad .loc_27_1189
.int 27
.int 1189
.byte 2
.quad .loc_27_1190
.int 27
.int 1190
.byte 2
.quad .loc_27_1191
.int 27
.int 1191
.byte 2
.quad .loc_27_1195
.int 27
.int 1195
.byte 2
.quad .loc_27_1196
.int 27
.int 1196
.byte 2
.quad .loc_27_1197
.int 27
.int 1197
.byte 2
.quad .loc_27_1202
.int 27
.int 1202
.byte 2
.quad .loc_27_1203
.int 27
.int 1203
.byte 2
.quad .loc_27_1204
.int 27
.int 1204
.byte 2
.quad .loc_27_1208
.int 27
.int 1208
.byte 2
.quad .loc_27_1209
.int 27
.int 1209
.byte 2
.quad .loc_27_1210
.int 27
.int 1210
.byte 2
.quad .loc_27_1213
.int 27
.int 1213
.byte 2
.quad .loc_27_1214
.int 27
.int 1214
.byte 2
.quad .loc_27_1217
.int 27
.int 1217
.byte 2
.quad .loc_27_1218
.int 27
.int 1218
.byte 2
.quad .loc_27_1222
.int 27
.int 1222
.byte 2
.quad .loc_27_1223
.int 27
.int 1223
.byte 2
.quad .loc_27_1224
.int 27
.int 1224
.byte 2
.quad .loc_27_1225
.int 27
.int 1225
.byte 2
.quad .loc_27_1229
.int 27
.int 1229
.byte 2
.quad .loc_27_1230
.int 27
.int 1230
.byte 2
.quad .loc_27_1231
.int 27
.int 1231
.byte 2
.quad .loc_27_1233
.int 27
.int 1233
.byte 2
.quad .loc_27_1234
.int 27
.int 1234
.byte 2
.quad .loc_27_1237
.int 27
.int 1237
.byte 2
.quad .loc_27_1238
.int 27
.int 1238
.byte 2
.quad .loc_27_1239
.int 27
.int 1239
.byte 2
.quad .loc_27_1240
.int 27
.int 1240
.byte 2
.quad .loc_27_1245
.int 27
.int 1245
.byte 2
.quad .loc_27_1246
.int 27
.int 1246
.byte 2
.quad .loc_27_1250
.int 27
.int 1250
.byte 2
.quad .loc_27_1251
.int 27
.int 1251
.byte 2
.quad .loc_27_1254
.int 27
.int 1254
.byte 2
.quad .loc_27_1255
.int 27
.int 1255
.byte 2
.quad .loc_27_1256
.int 27
.int 1256
.byte 2
.quad .loc_27_1257
.int 27
.int 1257
.byte 2
.quad .loc_27_1258
.int 27
.int 1258
.byte 2
.quad .loc_27_1259
.int 27
.int 1259
.byte 2
.quad .loc_27_1261
.int 27
.int 1261
.byte 2
.quad .loc_27_1262
.int 27
.int 1262
.byte 2
.quad .loc_27_1263
.int 27
.int 1263
.byte 2
.quad .loc_27_1264
.int 27
.int 1264
.byte 2
.quad .loc_27_1265
.int 27
.int 1265
.byte 2
.quad .loc_27_1266
.int 27
.int 1266
.byte 2
.quad .loc_27_1267
.int 27
.int 1267
.byte 2
.quad .loc_27_1272
.int 27
.int 1272
.byte 2
.quad .loc_27_1273
.int 27
.int 1273
.byte 2
.quad .loc_27_1276
.int 27
.int 1276
.byte 2
.quad .loc_27_1277
.int 27
.int 1277
.byte 2
.quad .loc_27_1279
.int 27
.int 1279
.byte 2
.quad .loc_27_1280
.int 27
.int 1280
.byte 2
.quad .loc_27_1283
.int 27
.int 1283
.byte 2
.quad .loc_27_1284
.int 27
.int 1284
.byte 2
.quad .loc_27_1285
.int 27
.int 1285
.byte 2
.quad .loc_27_1288
.int 27
.int 1288
.byte 2
.quad .loc_27_1289
.int 27
.int 1289
.byte 2
.quad .loc_27_1292
.int 27
.int 1292
.byte 2
.quad .loc_27_1293
.int 27
.int 1293
.byte 2
.quad .loc_27_1296
.int 27
.int 1296
.byte 2
.quad .loc_27_1297
.int 27
.int 1297
.byte 2
.quad .loc_27_1300
.int 27
.int 1300
.byte 2
.quad .loc_27_1301
.int 27
.int 1301
.byte 2
.quad .loc_27_1306
.int 27
.int 1306
.byte 2
.quad .loc_27_1307
.int 27
.int 1307
.byte 2
.quad .loc_27_1308
.int 27
.int 1308
.byte 2
.quad .loc_27_1309
.int 27
.int 1309
.byte 2
.quad .loc_27_1310
.int 27
.int 1310
.byte 2
.quad .loc_27_1311
.int 27
.int 1311
.byte 2
.quad .loc_27_1315
.int 27
.int 1315
.byte 2
.quad .loc_27_1322
.int 27
.int 1322
.byte 2
.quad .loc_27_1323
.int 27
.int 1323
.byte 2
.quad .loc_27_1325
.int 27
.int 1325
.byte 2
.quad .loc_27_1326
.int 27
.int 1326
.byte 2
.quad .loc_27_1329
.int 27
.int 1329
.byte 2
.quad .loc_27_1330
.int 27
.int 1330
.byte 2
.quad .loc_27_1331
.int 27
.int 1331
.byte 2
.quad .loc_27_1332
.int 27
.int 1332
.byte 2
.quad .loc_27_1337
.int 27
.int 1337
.byte 2
.quad .loc_27_1338
.int 27
.int 1338
.byte 2
.quad .loc_27_1341
.int 27
.int 1341
.byte 2
.quad .loc_27_1342
.int 27
.int 1342
.byte 2
.quad .loc_27_1344
.int 27
.int 1344
.byte 2
.quad .loc_27_1345
.int 27
.int 1345
.byte 2
.quad .loc_27_1348
.int 27
.int 1348
.byte 2
.quad .loc_27_1349
.int 27
.int 1349
.byte 2
.quad .loc_27_1350
.int 27
.int 1350
.byte 2
.quad .loc_27_1351
.int 27
.int 1351
.byte 2
.quad .loc_27_1352
.int 27
.int 1352
.byte 2
.quad .loc_27_1353
.int 27
.int 1353
.byte 2
.quad .loc_27_1354
.int 27
.int 1354
.byte 2
.quad .loc_27_1355
.int 27
.int 1355
.byte 2
.quad .loc_27_1357
.int 27
.int 1357
.byte 2
.quad .loc_27_1360
.int 27
.int 1360
.byte 2
.quad .loc_27_1361
.int 27
.int 1361
.byte 2
.quad .loc_27_1362
.int 27
.int 1362
.byte 2
.quad .loc_27_1363
.int 27
.int 1363
.byte 2
.quad .loc_27_1364
.int 27
.int 1364
.byte 2
.quad .loc_27_1366
.int 27
.int 1366
.byte 2
.quad .loc_27_1367
.int 27
.int 1367
.byte 2
.quad .loc_27_1368
.int 27
.int 1368
.byte 2
.quad .loc_27_1369
.int 27
.int 1369
.byte 2
.quad .loc_27_1371
.int 27
.int 1371
.byte 2
.quad .loc_27_1376
.int 27
.int 1376
.byte 2
.quad .loc_27_1377
.int 27
.int 1377
.byte 2
.quad .loc_27_1378
.int 27
.int 1378
.byte 2
.quad .loc_27_1380
.int 27
.int 1380
.byte 2
.quad .loc_27_1381
.int 27
.int 1381
.byte 2
.quad .loc_27_1382
.int 27
.int 1382
.byte 2
.quad .loc_27_1383
.int 27
.int 1383
.byte 2
.quad .loc_27_1384
.int 27
.int 1384
.byte 2
.quad .loc_27_1388
.int 27
.int 1388
.byte 2
.quad .loc_27_1389
.int 27
.int 1389
.byte 2
.quad .loc_27_1390
.int 27
.int 1390
.byte 2
.quad .loc_27_1391
.int 27
.int 1391
.byte 2
.quad .loc_27_1392
.int 27
.int 1392
.byte 2
.quad .loc_27_1396
.int 27
.int 1396
.byte 2
.quad .loc_27_1397
.int 27
.int 1397
.byte 2
.quad .loc_27_1400
.int 27
.int 1400
.byte 2
.quad .loc_27_1407
.int 27
.int 1407
.byte 2
.quad .loc_27_1412
.int 27
.int 1412
.byte 2
.quad .loc_27_1413
.int 27
.int 1413
.byte 2
.quad .loc_27_1415
.int 27
.int 1415
.byte 2
.quad .loc_27_1416
.int 27
.int 1416
.byte 2
.quad .loc_27_1419
.int 27
.int 1419
.byte 2
.quad .loc_27_1421
.int 27
.int 1421
.byte 2
.quad .loc_27_1422
.int 27
.int 1422
.byte 2
.quad .loc_27_1425
.int 27
.int 1425
.byte 2
.quad .loc_27_1427
.int 27
.int 1427
.byte 2
.quad .loc_27_1428
.int 27
.int 1428
.byte 2
.quad .loc_27_1431
.int 27
.int 1431
.byte 2
.quad .loc_27_1432
.int 27
.int 1432
.byte 2
.quad .loc_27_1434
.int 27
.int 1434
.byte 2
.quad .loc_27_1435
.int 27
.int 1435
.byte 2
.quad .loc_27_1438
.int 27
.int 1438
.byte 2
.quad .loc_27_1439
.int 27
.int 1439
.byte 2
.quad .loc_27_1440
.int 27
.int 1440
.byte 2
.quad .loc_27_1441
.int 27
.int 1441
.byte 2
.quad .loc_27_1442
.int 27
.int 1442
.byte 2
.quad .loc_27_1445
.int 27
.int 1445
.byte 2
.quad .loc_27_1448
.int 27
.int 1448
.byte 2
.quad .loc_27_1449
.int 27
.int 1449
.byte 2
.quad .loc_27_1452
.int 27
.int 1452
.byte 2
.quad .loc_27_1460
.int 27
.int 1460
.byte 2
.quad .loc_27_1461
.int 27
.int 1461
.byte 2
.quad .loc_27_1462
.int 27
.int 1462
.byte 2
.quad .loc_27_1466
.int 27
.int 1466
.byte 2
.quad .loc_27_1467
.int 27
.int 1467
.byte 2
.quad .loc_27_1468
.int 27
.int 1468
.byte 2
.quad .loc_27_1469
.int 27
.int 1469
.byte 2
.quad .loc_27_1472
.int 27
.int 1472
.byte 2
.quad .loc_27_1473
.int 27
.int 1473
.byte 2
.quad .loc_27_1483
.int 27
.int 1483
.byte 2
.quad .loc_27_1484
.int 27
.int 1484
.byte 2
.quad .loc_27_1485
.int 27
.int 1485
.byte 2
.quad .loc_27_1486
.int 27
.int 1486
.byte 2
.quad .loc_27_1489
.int 27
.int 1489
.byte 2
.quad .loc_27_1491
.int 27
.int 1491
.byte 2
.quad .loc_27_1495
.int 27
.int 1495
.byte 2
.quad .loc_27_1497
.int 27
.int 1497
.byte 2
.quad .loc_27_1498
.int 27
.int 1498
.byte 2
.quad .loc_27_1499
.int 27
.int 1499
.byte 2
.quad .loc_27_1500
.int 27
.int 1500
.byte 2
.quad .loc_27_1503
.int 27
.int 1503
.byte 2
.quad .loc_27_1504
.int 27
.int 1504
.byte 2
.quad .loc_27_1505
.int 27
.int 1505
.byte 2
.quad .loc_27_1509
.int 27
.int 1509
.byte 2
.quad .loc_27_1510
.int 27
.int 1510
.byte 2
.quad .loc_27_1511
.int 27
.int 1511
.byte 2
.quad .loc_27_1512
.int 27
.int 1512
.byte 2
.quad .loc_27_1516
.int 27
.int 1516
.byte 2
.quad .loc_27_1517
.int 27
.int 1517
.byte 2
.quad .loc_27_1518
.int 27
.int 1518
.byte 2
.quad .loc_27_1521
.int 27
.int 1521
.byte 2
.quad .loc_27_1522
.int 27
.int 1522
.byte 2
.quad .loc_27_1523
.int 27
.int 1523
.byte 2
.quad .loc_27_1524
.int 27
.int 1524
.byte 2
.quad .loc_27_1525
.int 27
.int 1525
.byte 2
.quad .loc_27_1533
.int 27
.int 1533
.byte 2
.quad .loc_27_1534
.int 27
.int 1534
.byte 2
.quad .loc_27_1535
.int 27
.int 1535
.byte 2
.quad .loc_27_1536
.int 27
.int 1536
.byte 2
.quad .loc_27_1546
.int 27
.int 1546
.byte 2
.quad .loc_27_1547
.int 27
.int 1547
.byte 2
.quad .loc_27_1548
.int 27
.int 1548
.byte 2
.quad .loc_27_1557
.int 27
.int 1557
.byte 2
.quad .loc_27_1564
.int 27
.int 1564
.byte 2
.quad .loc_27_1565
.int 27
.int 1565
.byte 2
.quad .loc_27_1566
.int 27
.int 1566
.byte 2
.quad .loc_27_1567
.int 27
.int 1567
.byte 2
.quad .loc_27_1569
.int 27
.int 1569
.byte 2
.quad .loc_27_1570
.int 27
.int 1570
.byte 2
.quad .loc_27_1571
.int 27
.int 1571
.byte 2
.quad .loc_27_1572
.int 27
.int 1572
.byte 2
.quad .loc_27_1575
.int 27
.int 1575
.byte 2
.quad .loc_27_1576
.int 27
.int 1576
.byte 2
.quad .loc_27_1579
.int 27
.int 1579
.byte 2
.quad .loc_27_1580
.int 27
.int 1580
.byte 2
.quad .loc_27_1583
.int 27
.int 1583
.byte 2
.quad .loc_27_1584
.int 27
.int 1584
.byte 2
.quad .loc_27_1585
.int 27
.int 1585
.byte 2
.quad .loc_27_1587
.int 27
.int 1587
.byte 2
.quad .loc_27_1592
.int 27
.int 1592
.byte 2
.quad .loc_27_1595
.int 27
.int 1595
.byte 2
.quad .loc_27_1596
.int 27
.int 1596
.byte 2
.quad .loc_27_1597
.int 27
.int 1597
.byte 2
.quad .loc_27_1599
.int 27
.int 1599
.byte 2
.quad .loc_27_1600
.int 27
.int 1600
.byte 2
.quad .loc_27_1602
.int 27
.int 1602
.byte 2
.quad .loc_27_1603
.int 27
.int 1603
.byte 2
.quad .loc_27_1606
.int 27
.int 1606
.byte 2
.quad .loc_27_1607
.int 27
.int 1607
.byte 2
.quad .loc_27_1608
.int 27
.int 1608
.byte 2
.quad .loc_27_1609
.int 27
.int 1609
.byte 2
.quad .loc_27_1612
.int 27
.int 1612
.byte 2
.quad .loc_27_1616
.int 27
.int 1616
.byte 2
.quad .loc_27_1617
.int 27
.int 1617
.byte 2
.quad .loc_27_1618
.int 27
.int 1618
.byte 2
.quad .loc_27_1619
.int 27
.int 1619
.byte 2
.quad .loc_27_1622
.int 27
.int 1622
.byte 2
.quad .loc_27_1627
.int 27
.int 1627
.byte 2
.quad .loc_27_1628
.int 27
.int 1628
.byte 2
.quad .loc_27_1630
.int 27
.int 1630
.byte 2
.quad .loc_27_1631
.int 27
.int 1631
.byte 2
.quad .loc_27_1633
.int 27
.int 1633
.byte 2
.quad .loc_27_1635
.int 27
.int 1635
.byte 2
.quad .loc_27_1636
.int 27
.int 1636
.byte 2
.quad .loc_27_1637
.int 27
.int 1637
.byte 2
.quad .loc_27_1638
.int 27
.int 1638
.byte 2
.quad .loc_27_1641
.int 27
.int 1641
.byte 2
.quad .loc_27_1642
.int 27
.int 1642
.byte 2
.quad .loc_27_1643
.int 27
.int 1643
.byte 2
.quad .loc_27_1645
.int 27
.int 1645
.byte 2
.quad .loc_27_1646
.int 27
.int 1646
.byte 2
.quad .loc_27_1647
.int 27
.int 1647
.byte 2
.quad .loc_27_1648
.int 27
.int 1648
.byte 2
.quad .loc_27_1649
.int 27
.int 1649
.byte 2
.quad .loc_27_1650
.int 27
.int 1650
.byte 2
.quad .loc_27_1651
.int 27
.int 1651
.byte 2
.quad .loc_27_1653
.int 27
.int 1653
.byte 2
.quad .loc_27_1654
.int 27
.int 1654
.byte 2
.quad .loc_27_1656
.int 27
.int 1656
.byte 2
.quad .loc_27_1657
.int 27
.int 1657
.byte 2
.quad .loc_27_1658
.int 27
.int 1658
.byte 2
.quad .loc_27_1661
.int 27
.int 1661
.byte 2
.quad .loc_27_1662
.int 27
.int 1662
.byte 2
.quad .loc_27_1664
.int 27
.int 1664
.byte 2
.quad .loc_27_1665
.int 27
.int 1665
.byte 2
.quad .loc_27_1668
.int 27
.int 1668
.byte 2
.quad .loc_27_1669
.int 27
.int 1669
.byte 2
.quad .loc_27_1673
.int 27
.int 1673
.byte 2
.quad .loc_27_1674
.int 27
.int 1674
.byte 2
.quad .loc_27_1675
.int 27
.int 1675
.byte 2
.quad .loc_27_1676
.int 27
.int 1676
.byte 2
.quad .loc_27_1677
.int 27
.int 1677
.byte 2
.quad .loc_27_1682
.int 27
.int 1682
.byte 2
.quad .loc_27_1688
.int 27
.int 1688
.byte 2
.quad .loc_27_1689
.int 27
.int 1689
.byte 2
.quad .loc_27_1692
.int 27
.int 1692
.byte 2
.quad .loc_27_1698
.int 27
.int 1698
.byte 2
.quad .loc_27_1699
.int 27
.int 1699
.byte 2
.quad .loc_27_1700
.int 27
.int 1700
.byte 2
.quad .loc_27_1702
.int 27
.int 1702
.byte 2
.quad .loc_27_1703
.int 27
.int 1703
.byte 2
.quad .loc_27_1704
.int 27
.int 1704
.byte 2
.quad .loc_27_1709
.int 27
.int 1709
.byte 2
.quad .loc_27_1710
.int 27
.int 1710
.byte 2
.quad .loc_27_1713
.int 27
.int 1713
.byte 2
.quad .loc_27_1715
.int 27
.int 1715
.byte 2
.quad .loc_27_1716
.int 27
.int 1716
.byte 2
.quad .loc_27_1717
.int 27
.int 1717
.byte 2
.quad .loc_27_1720
.int 27
.int 1720
.byte 2
.quad .loc_27_1721
.int 27
.int 1721
.byte 2
.quad .loc_27_1724
.int 27
.int 1724
.byte 2
.quad .loc_27_1725
.int 27
.int 1725
.byte 2
.quad .loc_27_1726
.int 27
.int 1726
.byte 2
.quad .loc_27_1729
.int 27
.int 1729
.byte 2
.quad .loc_27_1730
.int 27
.int 1730
.byte 2
.quad .loc_27_1734
.int 27
.int 1734
.byte 2
.quad .loc_27_1735
.int 27
.int 1735
.byte 2
.quad .loc_27_1739
.int 27
.int 1739
.byte 2
.quad .loc_27_1740
.int 27
.int 1740
.byte 2
.quad .loc_27_1743
.int 27
.int 1743
.byte 2
.quad .loc_27_1744
.int 27
.int 1744
.byte 2
.quad .loc_27_1745
.int 27
.int 1745
.byte 2
.quad .loc_27_1746
.int 27
.int 1746
.byte 2
.quad .loc_27_1749
.int 27
.int 1749
.byte 2
.quad .loc_27_1752
.int 27
.int 1752
.byte 2
.quad .loc_27_1753
.int 27
.int 1753
.byte 2
.quad .loc_27_1754
.int 27
.int 1754
.byte 2
.quad .loc_27_1757
.int 27
.int 1757
.byte 2
.quad .loc_27_1758
.int 27
.int 1758
.byte 2
.quad .loc_27_1759
.int 27
.int 1759
.byte 2
.quad .loc_27_1760
.int 27
.int 1760
.byte 2
.quad .loc_27_1762
.int 27
.int 1762
.byte 2
.quad .loc_27_1763
.int 27
.int 1763
.byte 2
.quad .loc_27_1766
.int 27
.int 1766
.byte 2
.quad .loc_27_1772
.int 27
.int 1772
.byte 2
.quad .loc_27_1773
.int 27
.int 1773
.byte 2
.quad .loc_27_1776
.int 27
.int 1776
.byte 2
.quad .loc_27_1778
.int 27
.int 1778
.byte 2
.quad .loc_27_1779
.int 27
.int 1779
.byte 2
.quad .loc_27_1781
.int 27
.int 1781
.byte 2
.quad .loc_27_1782
.int 27
.int 1782
.byte 2
.quad .loc_27_1783
.int 27
.int 1783
.byte 2
.quad .loc_27_1786
.int 27
.int 1786
.byte 2
.quad .loc_27_1788
.int 27
.int 1788
.byte 2
.quad .loc_27_1789
.int 27
.int 1789
.byte 2
.quad .loc_27_1792
.int 27
.int 1792
.byte 2
.quad .loc_27_1793
.int 27
.int 1793
.byte 2
.quad .loc_27_1796
.int 27
.int 1796
.byte 2
.quad .loc_27_1803
.int 27
.int 1803
.byte 2
.quad .loc_27_1805
.int 27
.int 1805
.byte 2
.quad .loc_27_1806
.int 27
.int 1806
.byte 2
.quad .loc_27_1807
.int 27
.int 1807
.byte 2
.quad .loc_27_1810
.int 27
.int 1810
.byte 2
.quad .loc_27_1812
.int 27
.int 1812
.byte 2
.quad .loc_27_1813
.int 27
.int 1813
.byte 2
.quad .loc_27_1814
.int 27
.int 1814
.byte 2
.quad .loc_27_1815
.int 27
.int 1815
.byte 2
.quad .loc_27_1816
.int 27
.int 1816
.byte 2
.quad .loc_27_1817
.int 27
.int 1817
.byte 2
.quad .loc_27_1821
.int 27
.int 1821
.byte 2
.quad .loc_27_1822
.int 27
.int 1822
.byte 2
.quad .loc_27_1825
.int 27
.int 1825
.byte 2
.quad .loc_27_1826
.int 27
.int 1826
.byte 2
.quad .loc_27_1827
.int 27
.int 1827
.byte 2
.quad .loc_27_1828
.int 27
.int 1828
.byte 2
.quad .loc_27_1832
.int 27
.int 1832
.byte 2
.quad .loc_27_1833
.int 27
.int 1833
.byte 2
.quad .loc_27_1836
.int 27
.int 1836
.byte 2
.quad .loc_27_1838
.int 27
.int 1838
.byte 2
.quad .loc_27_1839
.int 27
.int 1839
.byte 2
.quad .loc_27_1840
.int 27
.int 1840
.byte 2
.quad .loc_27_1843
.int 27
.int 1843
.byte 2
.quad .loc_27_1845
.int 27
.int 1845
.byte 2
.quad .loc_27_1846
.int 27
.int 1846
.byte 2
.quad .loc_27_1847
.int 27
.int 1847
.byte 2
.quad .loc_27_1848
.int 27
.int 1848
.byte 2
.quad .loc_27_1849
.int 27
.int 1849
.byte 2
.quad .loc_27_1850
.int 27
.int 1850
.byte 2
.quad .loc_27_1854
.int 27
.int 1854
.byte 2
.quad .loc_27_1855
.int 27
.int 1855
.byte 2
.quad .loc_27_1859
.int 27
.int 1859
.byte 2
.quad .loc_27_1860
.int 27
.int 1860
.byte 2
.quad .loc_27_1861
.int 27
.int 1861
.byte 2
.quad .loc_27_1862
.int 27
.int 1862
.byte 2
.quad .loc_27_1865
.int 27
.int 1865
.byte 2
.quad .loc_27_1867
.int 27
.int 1867
.byte 2
.quad .loc_27_1868
.int 27
.int 1868
.byte 2
.quad .loc_27_1871
.int 27
.int 1871
.byte 2
.quad .loc_27_1873
.int 27
.int 1873
.byte 2
.quad .loc_27_1874
.int 27
.int 1874
.byte 2
.quad .loc_27_1875
.int 27
.int 1875
.byte 2
.quad .loc_27_1877
.int 27
.int 1877
.byte 2
.quad .loc_27_1878
.int 27
.int 1878
.byte 2
.quad .loc_27_1879
.int 27
.int 1879
.byte 2
.quad .loc_27_1880
.int 27
.int 1880
.byte 2
.quad .loc_27_1882
.int 27
.int 1882
.byte 2
.quad .loc_27_1884
.int 27
.int 1884
.byte 2
.quad .loc_27_1885
.int 27
.int 1885
.byte 2
.quad .loc_27_1886
.int 27
.int 1886
.byte 2
.quad .loc_27_1887
.int 27
.int 1887
.byte 2
.quad .loc_27_1888
.int 27
.int 1888
.byte 2
.quad .loc_27_1889
.int 27
.int 1889
.byte 2
.quad .loc_27_1896
.int 27
.int 1896
.byte 2
.quad .loc_27_1897
.int 27
.int 1897
.byte 2
.quad .loc_27_1900
.int 27
.int 1900
.byte 2
.quad .loc_27_1902
.int 27
.int 1902
.byte 2
.quad .loc_27_1903
.int 27
.int 1903
.byte 2
.quad .loc_27_1906
.int 27
.int 1906
.byte 2
.quad .loc_27_1907
.int 27
.int 1907
.byte 2
.quad .loc_27_1910
.int 27
.int 1910
.byte 2
.quad .loc_27_1911
.int 27
.int 1911
.byte 2
.quad .loc_27_1912
.int 27
.int 1912
.byte 2
.quad .loc_27_1913
.int 27
.int 1913
.byte 2
.quad .loc_27_1916
.int 27
.int 1916
.byte 2
.quad .loc_27_1917
.int 27
.int 1917
.byte 2
.quad .loc_27_1920
.int 27
.int 1920
.byte 2
.quad .loc_27_1921
.int 27
.int 1921
.byte 2
.quad .loc_27_1924
.int 27
.int 1924
.byte 2
.quad .loc_27_1925
.int 27
.int 1925
.byte 2
.quad .loc_27_1928
.int 27
.int 1928
.byte 2
.quad .loc_27_1930
.int 27
.int 1930
.byte 2
.quad .loc_27_1932
.int 27
.int 1932
.byte 2
.quad .loc_27_1933
.int 27
.int 1933
.byte 2
.quad .loc_27_1935
.int 27
.int 1935
.byte 2
.quad .loc_27_1936
.int 27
.int 1936
.byte 2
.quad .loc_27_1937
.int 27
.int 1937
.byte 2
.quad .loc_27_1938
.int 27
.int 1938
.byte 2
.quad .loc_27_1939
.int 27
.int 1939
.byte 2
.quad .loc_27_1941
.int 27
.int 1941
.byte 2
.quad .loc_27_1942
.int 27
.int 1942
.byte 2
.quad .loc_27_1945
.int 27
.int 1945
.byte 2
.quad .loc_27_1946
.int 27
.int 1946
.byte 2
.quad .loc_27_1950
.int 27
.int 1950
.byte 2
.quad .loc_27_1955
.int 27
.int 1955
.byte 2
.quad .loc_27_1956
.int 27
.int 1956
.byte 2
.quad .loc_27_1959
.int 27
.int 1959
.byte 2
.quad .loc_27_1960
.int 27
.int 1960
.byte 2
.quad .loc_27_1961
.int 27
.int 1961
.byte 2
.quad .loc_27_1962
.int 27
.int 1962
.byte 2
.quad .loc_27_1963
.int 27
.int 1963
.byte 2
.quad .loc_27_1964
.int 27
.int 1964
.byte 2
.quad .loc_27_1965
.int 27
.int 1965
.byte 2
.quad .loc_27_1966
.int 27
.int 1966
.byte 2
.quad .loc_27_1967
.int 27
.int 1967
.byte 2
.quad .loc_27_1969
.int 27
.int 1969
.byte 2
.quad .loc_27_1970
.int 27
.int 1970
.byte 2
.quad .loc_27_1976
.int 27
.int 1976
.byte 2
.quad .loc_27_1977
.int 27
.int 1977
.byte 2
.quad .loc_27_1978
.int 27
.int 1978
.byte 2
.quad .loc_27_1981
.int 27
.int 1981
.byte 2
.quad .loc_27_1985
.int 27
.int 1985
.byte 2
.quad .loc_27_1990
.int 27
.int 1990
.byte 2
.quad .loc_27_1992
.int 27
.int 1992
.byte 2
.quad .loc_27_1994
.int 27
.int 1994
.byte 2
.quad .loc_27_1996
.int 27
.int 1996
.byte 2
.quad .loc_27_1998
.int 27
.int 1998
.byte 2
.quad .loc_27_1999
.int 27
.int 1999
.byte 2
.quad .loc_27_2000
.int 27
.int 2000
.byte 2
.quad .loc_27_2001
.int 27
.int 2001
.byte 2
.quad .loc_27_2002
.int 27
.int 2002
.byte 2
.quad .loc_27_2003
.int 27
.int 2003
.byte 2
.quad .loc_27_2010
.int 27
.int 2010
.byte 2
.quad .loc_27_2011
.int 27
.int 2011
.byte 2
.quad .loc_27_2014
.int 27
.int 2014
.byte 2
.quad .loc_27_2015
.int 27
.int 2015
.byte 2
.quad .loc_27_2018
.int 27
.int 2018
.byte 2
.quad .loc_27_2020
.int 27
.int 2020
.byte 2
.quad .loc_27_2021
.int 27
.int 2021
.byte 2
.quad .loc_27_2022
.int 27
.int 2022
.byte 2
.quad .loc_27_2023
.int 27
.int 2023
.byte 2
.quad .loc_27_2024
.int 27
.int 2024
.byte 2
.quad .loc_27_2025
.int 27
.int 2025
.byte 2
.quad .loc_27_2026
.int 27
.int 2026
.byte 2
.quad .loc_27_2027
.int 27
.int 2027
.byte 2
.quad .loc_27_2028
.int 27
.int 2028
.byte 2
.quad .loc_27_2030
.int 27
.int 2030
.byte 2
.quad .loc_27_2031
.int 27
.int 2031
.byte 2
.quad .loc_27_2035
.int 27
.int 2035
.byte 2
.quad .loc_27_2036
.int 27
.int 2036
.byte 2
.quad .loc_27_2037
.int 27
.int 2037
.byte 2
.quad .loc_27_2040
.int 27
.int 2040
.byte 2
.quad .loc_27_2041
.int 27
.int 2041
.byte 2
.quad .loc_27_2043
.int 27
.int 2043
.byte 2
.quad .loc_27_2044
.int 27
.int 2044
.byte 2
.quad .loc_27_2047
.int 27
.int 2047
.byte 2
.quad .loc_27_2049
.int 27
.int 2049
.byte 2
.quad .loc_27_2054
.int 27
.int 2054
.byte 2
.quad .loc_27_2056
.int 27
.int 2056
.byte 2
.quad .loc_27_2058
.int 27
.int 2058
.byte 2
.quad .loc_27_2060
.int 27
.int 2060
.byte 2
.quad .loc_27_2062
.int 27
.int 2062
.byte 2
.quad .loc_27_2063
.int 27
.int 2063
.byte 2
.quad .loc_27_2064
.int 27
.int 2064
.byte 2
.quad .loc_27_2065
.int 27
.int 2065
.byte 2
.quad .loc_27_2066
.int 27
.int 2066
.byte 2
.quad .loc_27_2067
.int 27
.int 2067
.byte 2
.quad .loc_27_2070
.int 27
.int 2070
.byte 2
.quad .loc_27_2072
.int 27
.int 2072
.byte 2
.quad .loc_27_2074
.int 27
.int 2074
.byte 2
.quad .loc_27_2080
.int 27
.int 2080
.byte 2
.quad .loc_27_2082
.int 27
.int 2082
.byte 2
.quad .loc_27_2084
.int 27
.int 2084
.byte 2
.quad .loc_27_2086
.int 27
.int 2086
.byte 2
.quad .loc_27_2088
.int 27
.int 2088
.byte 2
.quad .loc_27_2089
.int 27
.int 2089
.byte 2
.quad .loc_27_2096
.int 27
.int 2096
.byte 2
.quad .loc_27_2097
.int 27
.int 2097
.byte 2
.quad .loc_27_2100
.int 27
.int 2100
.byte 2
.quad .loc_27_2101
.int 27
.int 2101
.byte 2
.quad .loc_27_2102
.int 27
.int 2102
.byte 2
.quad .loc_27_2103
.int 27
.int 2103
.byte 2
.quad .loc_27_2104
.int 27
.int 2104
.byte 2
.quad .loc_27_2105
.int 27
.int 2105
.byte 2
.quad .loc_27_2106
.int 27
.int 2106
.byte 2
.quad .loc_27_2107
.int 27
.int 2107
.byte 2
.quad .loc_27_2108
.int 27
.int 2108
.byte 2
.quad .loc_27_2110
.int 27
.int 2110
.byte 2
.quad .loc_27_2111
.int 27
.int 2111
.byte 2
.quad .loc_27_2115
.int 27
.int 2115
.byte 2
.quad .loc_27_2116
.int 27
.int 2116
.byte 2
.quad .loc_27_2117
.int 27
.int 2117
.byte 2
.quad .loc_27_2120
.int 27
.int 2120
.byte 2
.quad .loc_27_2121
.int 27
.int 2121
.byte 2
.quad .loc_27_2123
.int 27
.int 2123
.byte 2
.quad .loc_27_2124
.int 27
.int 2124
.byte 2
.quad .loc_27_2127
.int 27
.int 2127
.byte 2
.quad .loc_27_2128
.int 27
.int 2128
.byte 2
.quad .loc_27_2130
.int 27
.int 2130
.byte 2
.quad .loc_27_2131
.int 27
.int 2131
.byte 2
.quad .loc_27_2132
.int 27
.int 2132
.byte 2
.quad .loc_27_2133
.int 27
.int 2133
.byte 2
.quad .loc_27_2134
.int 27
.int 2134
.byte 2
.quad .loc_27_2135
.int 27
.int 2135
.byte 2
.quad .loc_27_2136
.int 27
.int 2136
.byte 2
.quad .loc_27_2141
.int 27
.int 2141
.byte 2
.quad .loc_27_2142
.int 27
.int 2142
.byte 2
.quad .loc_27_2145
.int 27
.int 2145
.byte 2
.quad .loc_27_2147
.int 27
.int 2147
.byte 2
.quad .loc_27_2152
.int 27
.int 2152
.byte 2
.quad .loc_27_2154
.int 27
.int 2154
.byte 2
.quad .loc_27_2155
.int 27
.int 2155
.byte 2
.quad .loc_27_2158
.int 27
.int 2158
.byte 2
.quad .loc_27_2159
.int 27
.int 2159
.byte 2
.quad .loc_27_2162
.int 27
.int 2162
.byte 2
.quad .loc_27_2165
.int 27
.int 2165
.byte 2
.quad .loc_27_2167
.int 27
.int 2167
.byte 2
.quad .loc_27_2169
.int 27
.int 2169
.byte 2
.quad .loc_27_2176
.int 27
.int 2176
.byte 2
.quad .loc_27_2177
.int 27
.int 2177
.byte 2
.quad .loc_27_2180
.int 27
.int 2180
.byte 2
.quad .loc_27_2181
.int 27
.int 2181
.byte 2
.quad .loc_27_2184
.int 27
.int 2184
.byte 2
.quad .loc_27_2185
.int 27
.int 2185
.byte 2
.quad .loc_27_2190
.int 27
.int 2190
.byte 2
.quad .loc_27_2193
.int 27
.int 2193
.byte 2
.quad .loc_27_2197
.int 27
.int 2197
.byte 2
.quad .loc_27_2198
.int 27
.int 2198
.byte 2
.quad .loc_27_2201
.int 27
.int 2201
.byte 2
.quad .loc_27_2203
.int 27
.int 2203
.byte 2
.quad .loc_27_2204
.int 27
.int 2204
.byte 2
.quad .loc_27_2206
.int 27
.int 2206
.byte 2
.quad .loc_27_2207
.int 27
.int 2207
.byte 2
.quad .loc_27_2208
.int 27
.int 2208
.byte 2
.quad .loc_27_2211
.int 27
.int 2211
.byte 2
.quad .loc_27_2212
.int 27
.int 2212
.byte 2
.quad .loc_27_2213
.int 27
.int 2213
.byte 2
.quad .loc_27_2215
.int 27
.int 2215
.byte 2
.quad .loc_27_2217
.int 27
.int 2217
.byte 2
.quad .loc_27_2219
.int 27
.int 2219
.byte 2
.quad .loc_27_2220
.int 27
.int 2220
.byte 2
.quad .loc_27_2221
.int 27
.int 2221
.byte 2
.quad .loc_27_2223
.int 27
.int 2223
.byte 2
.quad .loc_27_2225
.int 27
.int 2225
.byte 2
.quad .loc_27_2226
.int 27
.int 2226
.byte 2
.quad .loc_27_2229
.int 27
.int 2229
.byte 2
.quad .loc_27_2230
.int 27
.int 2230
.byte 2
.quad .loc_27_2233
.int 27
.int 2233
.byte 2
.quad .loc_27_2234
.int 27
.int 2234
.byte 2
.quad .loc_27_2235
.int 27
.int 2235
.byte 2
.quad .loc_27_2236
.int 27
.int 2236
.byte 2
.quad .loc_27_2238
.int 27
.int 2238
.byte 2
.quad .loc_27_2239
.int 27
.int 2239
.byte 2
.quad .loc_27_2241
.int 27
.int 2241
.byte 2
.quad .loc_27_2244
.int 27
.int 2244
.byte 2
.quad .loc_27_2247
.int 27
.int 2247
.byte 2
.quad .loc_27_2249
.int 27
.int 2249
.byte 2
.quad .loc_27_2250
.int 27
.int 2250
.byte 2
.quad .loc_27_2252
.int 27
.int 2252
.byte 2
.quad .loc_27_2255
.int 27
.int 2255
.byte 2
.quad .loc_27_2256
.int 27
.int 2256
.byte 2
.quad .loc_27_2257
.int 27
.int 2257
.byte 2
.quad .loc_27_2258
.int 27
.int 2258
.byte 2
.quad .loc_27_2260
.int 27
.int 2260
.byte 2
.quad .loc_27_2262
.int 27
.int 2262
.byte 2
.quad .loc_27_2263
.int 27
.int 2263
.byte 2
.quad .loc_27_2264
.int 27
.int 2264
.byte 2
.quad .loc_27_2265
.int 27
.int 2265
.byte 2
.quad .loc_27_2266
.int 27
.int 2266
.byte 2
.quad .loc_27_2267
.int 27
.int 2267
.byte 2
.quad .loc_27_2268
.int 27
.int 2268
.byte 2
.quad .loc_27_2269
.int 27
.int 2269
.byte 2
.quad .loc_27_2273
.int 27
.int 2273
.byte 2
.quad .loc_27_2275
.int 27
.int 2275
.byte 2
.quad .loc_27_2276
.int 27
.int 2276
.byte 2
.quad .loc_27_2279
.int 27
.int 2279
.byte 2
.quad .loc_27_2285
.int 27
.int 2285
.byte 2
.quad .loc_27_2286
.int 27
.int 2286
.byte 2
.quad .loc_27_2287
.int 27
.int 2287
.byte 2
.quad .loc_27_2288
.int 27
.int 2288
.byte 2
.quad .loc_27_2290
.int 27
.int 2290
.byte 2
.quad .loc_27_2291
.int 27
.int 2291
.byte 2
.quad .loc_27_2292
.int 27
.int 2292
.byte 2
.quad .loc_27_2293
.int 27
.int 2293
.byte 2
.quad .loc_27_2294
.int 27
.int 2294
.byte 2
.quad .loc_27_2295
.int 27
.int 2295
.byte 2
.quad .loc_27_2296
.int 27
.int 2296
.byte 2
.quad .loc_27_2297
.int 27
.int 2297
.byte 2
.quad .loc_27_2298
.int 27
.int 2298
.byte 2
.quad .loc_27_2299
.int 27
.int 2299
.byte 2
.quad .loc_27_2304
.int 27
.int 2304
.byte 2
.quad .loc_27_2305
.int 27
.int 2305
.byte 2
.quad .loc_27_2307
.int 27
.int 2307
.byte 2
.quad .loc_27_2309
.int 27
.int 2309
.byte 2
.quad .loc_27_2310
.int 27
.int 2310
.byte 2
.quad .loc_27_2312
.int 27
.int 2312
.byte 2
.quad .loc_27_2316
.int 27
.int 2316
.byte 2
.quad .loc_27_2317
.int 27
.int 2317
.byte 2
.quad .loc_27_2318
.int 27
.int 2318
.byte 2
.quad .loc_27_2321
.int 27
.int 2321
.byte 2
.quad .loc_27_2322
.int 27
.int 2322
.byte 2
.quad .loc_27_2323
.int 27
.int 2323
.byte 2
.quad .loc_27_2324
.int 27
.int 2324
.byte 2
.quad .loc_27_2326
.int 27
.int 2326
.byte 2
.quad .loc_27_2328
.int 27
.int 2328
.byte 2
.quad .loc_27_2329
.int 27
.int 2329
.byte 2
.quad .loc_27_2332
.int 27
.int 2332
.byte 2
.quad .loc_27_2333
.int 27
.int 2333
.byte 2
.quad .loc_27_2337
.int 27
.int 2337
.byte 2
.quad .loc_27_2338
.int 27
.int 2338
.byte 2
.quad .loc_27_2339
.int 27
.int 2339
.byte 2
.quad .loc_27_2342
.int 27
.int 2342
.byte 2
.quad .loc_27_2343
.int 27
.int 2343
.byte 2
.quad .loc_27_2344
.int 27
.int 2344
.byte 2
.quad .loc_27_2345
.int 27
.int 2345
.byte 2
.quad .loc_27_2346
.int 27
.int 2346
.byte 2
.quad .loc_27_2347
.int 27
.int 2347
.byte 2
.quad .loc_27_2350
.int 27
.int 2350
.byte 2
.quad .loc_27_2351
.int 27
.int 2351
.byte 2
.quad .loc_27_2356
.int 27
.int 2356
.byte 2
.quad .loc_27_2357
.int 27
.int 2357
.byte 2
.quad .loc_27_2358
.int 27
.int 2358
.byte 2
.quad .loc_27_2361
.int 27
.int 2361
.byte 2
.quad .loc_27_2362
.int 27
.int 2362
.byte 2
.quad .loc_27_2365
.int 27
.int 2365
.byte 2
.quad .loc_27_2367
.int 27
.int 2367
.byte 2
.quad .loc_27_2374
.int 27
.int 2374
.byte 2
.quad .loc_27_2375
.int 27
.int 2375
.byte 2
.quad .loc_27_2376
.int 27
.int 2376
.byte 2
.quad .loc_27_2377
.int 27
.int 2377
.byte 2
.quad .loc_27_2378
.int 27
.int 2378
.byte 2
.quad .loc_27_2383
.int 27
.int 2383
.byte 2
.quad .loc_27_2384
.int 27
.int 2384
.byte 2
.quad .loc_27_2385
.int 27
.int 2385
.byte 2
.quad .loc_27_2386
.int 27
.int 2386
.byte 2
.quad .loc_27_2387
.int 27
.int 2387
.byte 2
.quad .loc_27_2389
.int 27
.int 2389
.byte 2
.quad .loc_27_2398
.int 27
.int 2398
.byte 2
.quad .loc_27_2399
.int 27
.int 2399
.byte 2
.quad .loc_27_2402
.int 27
.int 2402
.byte 2
.quad .loc_27_2404
.int 27
.int 2404
.byte 2
.quad .loc_27_2405
.int 27
.int 2405
.byte 2
.quad .loc_27_2406
.int 27
.int 2406
.byte 2
.quad .loc_27_2409
.int 27
.int 2409
.byte 2
.quad .loc_27_2418
.int 27
.int 2418
.byte 2
.quad .loc_27_2420
.int 27
.int 2420
.byte 2
.quad .loc_27_2422
.int 27
.int 2422
.byte 2
.quad .loc_27_2423
.int 27
.int 2423
.byte 2
.quad .loc_27_2425
.int 27
.int 2425
.byte 2
.quad .loc_27_2426
.int 27
.int 2426
.byte 2
.quad .loc_27_2429
.int 27
.int 2429
.byte 2
.quad .loc_27_2431
.int 27
.int 2431
.byte 2
.quad .loc_27_2432
.int 27
.int 2432
.byte 2
.quad .loc_27_2435
.int 27
.int 2435
.byte 2
.quad .loc_27_2436
.int 27
.int 2436
.byte 2
.quad .loc_27_2437
.int 27
.int 2437
.byte 2
.quad .loc_27_2439
.int 27
.int 2439
.byte 2
.quad .loc_27_2443
.int 27
.int 2443
.byte 2
.quad .loc_27_2444
.int 27
.int 2444
.byte 2
.quad .loc_27_2445
.int 27
.int 2445
.byte 2
.quad .loc_27_2447
.int 27
.int 2447
.byte 2
.quad .loc_27_2448
.int 27
.int 2448
.byte 2
.quad .loc_27_2449
.int 27
.int 2449
.byte 2
.quad .loc_27_2450
.int 27
.int 2450
.byte 2
.quad .loc_27_2451
.int 27
.int 2451
.byte 2
.quad .loc_27_2452
.int 27
.int 2452
.byte 2
.quad .loc_27_2457
.int 27
.int 2457
.byte 2
.quad .loc_27_2458
.int 27
.int 2458
.byte 2
.quad .loc_27_2459
.int 27
.int 2459
.byte 2
.quad .loc_27_2461
.int 27
.int 2461
.byte 2
.quad .loc_27_2462
.int 27
.int 2462
.byte 2
.quad .loc_27_2463
.int 27
.int 2463
.byte 2
.quad .loc_27_2464
.int 27
.int 2464
.byte 2
.quad .loc_27_2465
.int 27
.int 2465
.byte 2
.quad .loc_27_2467
.int 27
.int 2467
.byte 2
.quad .loc_27_2468
.int 27
.int 2468
.byte 2
.quad .loc_27_2471
.int 27
.int 2471
.byte 2
.quad .loc_27_2472
.int 27
.int 2472
.byte 2
.quad .loc_27_2475
.int 27
.int 2475
.byte 2
.quad .loc_27_2478
.int 27
.int 2478
.byte 2
.quad .loc_27_2480
.int 27
.int 2480
.byte 2
.quad .loc_27_2482
.int 27
.int 2482
.byte 2
.quad .loc_27_2483
.int 27
.int 2483
.byte 2
.quad .loc_27_2486
.int 27
.int 2486
.byte 2
.quad .loc_27_2488
.int 27
.int 2488
.byte 2
.quad .loc_27_2493
.int 27
.int 2493
.byte 2
.quad .loc_27_2494
.int 27
.int 2494
.byte 2
.quad .loc_27_2495
.int 27
.int 2495
.byte 2
.quad .loc_27_2496
.int 27
.int 2496
.byte 2
.quad .loc_27_2497
.int 27
.int 2497
.byte 2
.quad .loc_27_2498
.int 27
.int 2498
.byte 2
.quad .loc_27_2499
.int 27
.int 2499
.byte 2
.quad .loc_27_2500
.int 27
.int 2500
.byte 2
.quad .loc_27_2501
.int 27
.int 2501
.byte 2
.quad .loc_27_2503
.int 27
.int 2503
.byte 2
.quad .loc_27_2504
.int 27
.int 2504
.byte 2
.quad .loc_27_2508
.int 27
.int 2508
.byte 2
.quad .loc_27_2510
.int 27
.int 2510
.byte 2
.quad .loc_27_2512
.int 27
.int 2512
.byte 2
.quad .loc_27_2514
.int 27
.int 2514
.byte 2
.quad .loc_27_2515
.int 27
.int 2515
.byte 2
.quad .loc_27_2518
.int 27
.int 2518
.byte 2
.quad .loc_27_2520
.int 27
.int 2520
.byte 2
.quad .loc_27_2521
.int 27
.int 2521
.byte 2
.quad .loc_27_2526
.int 27
.int 2526
.byte 2
.quad .loc_27_2527
.int 27
.int 2527
.byte 2
.quad .loc_27_2528
.int 27
.int 2528
.byte 2
.quad .loc_27_2529
.int 27
.int 2529
.byte 2
.quad .loc_27_2530
.int 27
.int 2530
.byte 2
.quad .loc_27_2531
.int 27
.int 2531
.byte 2
.quad .loc_27_2533
.int 27
.int 2533
.byte 2
.quad .loc_27_2534
.int 27
.int 2534
.byte 2
.quad .loc_27_2538
.int 27
.int 2538
.byte 2
.quad .loc_27_2539
.int 27
.int 2539
.byte 2
.quad .loc_27_2542
.int 27
.int 2542
.byte 2
.quad .loc_27_2544
.int 27
.int 2544
.byte 2
.quad .loc_27_2548
.int 27
.int 2548
.byte 2
.quad .loc_27_2550
.int 27
.int 2550
.byte 2
.quad .loc_27_2551
.int 27
.int 2551
.byte 2
.quad .loc_27_2554
.int 27
.int 2554
.byte 2
.quad .loc_27_2555
.int 27
.int 2555
.byte 2
.quad .loc_27_2558
.int 27
.int 2558
.byte 2
.quad .loc_27_2559
.int 27
.int 2559
.byte 2
.quad .loc_27_2560
.int 27
.int 2560
.byte 2
.quad .loc_27_2561
.int 27
.int 2561
.byte 2
.quad .loc_27_2562
.int 27
.int 2562
.byte 2
.quad .loc_27_2563
.int 27
.int 2563
.byte 2
.quad .loc_27_2566
.int 27
.int 2566
.byte 2
.quad .loc_27_2567
.int 27
.int 2567
.byte 2
.quad .loc_27_2570
.int 27
.int 2570
.byte 2
.quad .loc_27_2576
.int 27
.int 2576
.byte 2
.quad .loc_27_2577
.int 27
.int 2577
.byte 2
.quad .loc_27_2579
.int 27
.int 2579
.byte 2
.quad .loc_27_2580
.int 27
.int 2580
.byte 2
.quad .loc_27_2581
.int 27
.int 2581
.byte 2
.quad .loc_27_2584
.int 27
.int 2584
.byte 2
.quad .loc_27_2585
.int 27
.int 2585
.byte 2
.quad .loc_27_2594
.int 27
.int 2594
.byte 2
.quad .loc_27_2597
.int 27
.int 2597
.byte 2
.quad .loc_27_2598
.int 27
.int 2598
.byte 2
.quad .loc_27_2601
.int 27
.int 2601
.byte 2
.quad .loc_27_2607
.int 27
.int 2607
.byte 2
.quad .loc_27_2608
.int 27
.int 2608
.byte 2
.quad .loc_27_2609
.int 27
.int 2609
.byte 2
.quad .loc_27_2610
.int 27
.int 2610
.byte 2
.quad .loc_27_2611
.int 27
.int 2611
.byte 2
.quad .loc_27_2614
.int 27
.int 2614
.byte 2
.quad .loc_27_2616
.int 27
.int 2616
.byte 2
.quad .loc_27_2617
.int 27
.int 2617
.byte 2
.quad .loc_27_2618
.int 27
.int 2618
.byte 2
.quad .loc_27_2619
.int 27
.int 2619
.byte 2
.quad .loc_27_2620
.int 27
.int 2620
.byte 2
.quad .loc_27_2621
.int 27
.int 2621
.byte 2
.quad .loc_27_2622
.int 27
.int 2622
.byte 2
.quad .loc_27_2625
.int 27
.int 2625
.byte 2
.quad .loc_27_2626
.int 27
.int 2626
.byte 2
.quad .loc_27_2627
.int 27
.int 2627
.byte 2
.quad .loc_27_2630
.int 27
.int 2630
.byte 2
.quad .loc_27_2631
.int 27
.int 2631
.byte 2
.quad .loc_27_2632
.int 27
.int 2632
.byte 2
.quad .loc_27_2634
.int 27
.int 2634
.byte 2
.quad .loc_27_2635
.int 27
.int 2635
.byte 2
.quad .loc_27_2639
.int 27
.int 2639
.byte 2
.quad .loc_27_2641
.int 27
.int 2641
.byte 2
.quad .loc_27_2642
.int 27
.int 2642
.byte 2
.quad .loc_27_2645
.int 27
.int 2645
.byte 2
.quad .loc_27_2646
.int 27
.int 2646
.byte 2
.quad .loc_27_2647
.int 27
.int 2647
.byte 2
.quad .loc_27_2648
.int 27
.int 2648
.byte 2
.quad .loc_27_2650
.int 27
.int 2650
.byte 2
.quad .loc_27_2651
.int 27
.int 2651
.byte 2
.quad .loc_27_2652
.int 27
.int 2652
.byte 2
.quad .loc_27_2653
.int 27
.int 2653
.byte 2
.quad .loc_27_2654
.int 27
.int 2654
.byte 2
.quad .loc_27_2655
.int 27
.int 2655
.byte 2
.quad .loc_27_2656
.int 27
.int 2656
.byte 2
.quad .loc_27_2658
.int 27
.int 2658
.byte 2
.quad .loc_27_2661
.int 27
.int 2661
.byte 2
.quad .loc_27_2662
.int 27
.int 2662
.byte 2
.quad .loc_27_2663
.int 27
.int 2663
.byte 2
.quad .loc_27_2664
.int 27
.int 2664
.byte 2
.quad .loc_27_2665
.int 27
.int 2665
.byte 2
.quad .loc_27_2666
.int 27
.int 2666
.byte 2
.quad .loc_27_2667
.int 27
.int 2667
.byte 2
.quad .loc_27_2668
.int 27
.int 2668
.byte 2
.quad .loc_27_2670
.int 27
.int 2670
.byte 2
.quad .loc_27_2671
.int 27
.int 2671
.byte 2
.quad .loc_27_2672
.int 27
.int 2672
.byte 2
.quad .loc_27_2674
.int 27
.int 2674
.byte 2
.quad .loc_27_2675
.int 27
.int 2675
.byte 2
.quad .loc_27_2676
.int 27
.int 2676
.byte 2
.quad .loc_27_2677
.int 27
.int 2677
.byte 2
.quad .loc_27_2678
.int 27
.int 2678
.byte 2
.quad .loc_27_2681
.int 27
.int 2681
.byte 2
.quad .loc_27_2682
.int 27
.int 2682
.byte 2
.quad .loc_27_2685
.int 27
.int 2685
.byte 2
.quad .loc_27_2686
.int 27
.int 2686
.byte 2
.quad .loc_27_2687
.int 27
.int 2687
.byte 2
.quad .loc_27_2688
.int 27
.int 2688
.byte 2
.quad .loc_27_2689
.int 27
.int 2689
.byte 2
.quad .loc_27_2702
.int 27
.int 2702
.byte 2
.quad .loc_27_2703
.int 27
.int 2703
.byte 2
.quad .loc_27_2704
.int 27
.int 2704
.byte 2
.quad .loc_27_2708
.int 27
.int 2708
.byte 2
.quad .loc_27_2709
.int 27
.int 2709
.byte 2
.quad .loc_27_2711
.int 27
.int 2711
.byte 2
.quad .loc_27_2712
.int 27
.int 2712
.byte 2
.quad .loc_27_2714
.int 27
.int 2714
.byte 2
.quad .loc_27_2715
.int 27
.int 2715
.byte 2
.quad .loc_27_2718
.int 27
.int 2718
.byte 2
.quad .loc_27_2720
.int 27
.int 2720
.byte 2
.quad .loc_27_2721
.int 27
.int 2721
.byte 2
.quad .loc_27_2724
.int 27
.int 2724
.byte 2
.quad .loc_27_2726
.int 27
.int 2726
.byte 2
.quad .loc_27_2727
.int 27
.int 2727
.byte 2
.quad .loc_27_2730
.int 27
.int 2730
.byte 2
.quad .loc_27_2732
.int 27
.int 2732
.byte 2
.quad .loc_27_2733
.int 27
.int 2733
.byte 2
.quad .loc_27_2734
.int 27
.int 2734
.byte 2
.quad .loc_27_2735
.int 27
.int 2735
.byte 2
.quad .loc_27_2736
.int 27
.int 2736
.byte 2
.quad .loc_27_2737
.int 27
.int 2737
.byte 2
.quad .loc_27_2738
.int 27
.int 2738
.byte 2
.quad .loc_27_2740
.int 27
.int 2740
.byte 2
.quad .loc_27_2741
.int 27
.int 2741
.byte 2
.quad .loc_27_2745
.int 27
.int 2745
.byte 2
.quad .loc_27_2746
.int 27
.int 2746
.byte 2
.quad .loc_27_2747
.int 27
.int 2747
.byte 2
.quad .loc_27_2748
.int 27
.int 2748
.byte 2
.quad .loc_27_2749
.int 27
.int 2749
.byte 2
.quad .loc_27_2754
.int 27
.int 2754
.byte 2
.quad .loc_27_2757
.int 27
.int 2757
.byte 2
.quad .loc_27_2764
.int 27
.int 2764
.byte 2
.quad .loc_27_2766
.int 27
.int 2766
.byte 2
.quad .loc_27_2771
.int 27
.int 2771
.byte 2
.quad .loc_27_2772
.int 27
.int 2772
.byte 2
.quad .loc_27_2775
.int 27
.int 2775
.byte 2
.quad .loc_27_2776
.int 27
.int 2776
.byte 2
.quad .loc_27_2778
.int 27
.int 2778
.byte 2
.quad .loc_27_2782
.int 27
.int 2782
.byte 2
.quad .loc_27_2783
.int 27
.int 2783
.byte 2
.quad .loc_27_2786
.int 27
.int 2786
.byte 2
.quad .loc_27_2787
.int 27
.int 2787
.byte 2
.quad .loc_27_2789
.int 27
.int 2789
.byte 2
.quad .loc_27_2793
.int 27
.int 2793
.byte 2
.quad .loc_27_2794
.int 27
.int 2794
.byte 2
.quad .loc_27_2797
.int 27
.int 2797
.byte 2
.quad .loc_27_2799
.int 27
.int 2799
.byte 2
.quad .loc_27_2800
.int 27
.int 2800
.byte 2
.quad .loc_27_2803
.int 27
.int 2803
.byte 2
.quad .loc_27_2805
.int 27
.int 2805
.byte 2
.quad .loc_27_2810
.int 27
.int 2810
.byte 2
.quad .loc_27_2812
.int 27
.int 2812
.byte 2
.quad .loc_27_2813
.int 27
.int 2813
.byte 2
.quad .loc_27_2814
.int 27
.int 2814
.byte 2
.quad .loc_27_2817
.int 27
.int 2817
.byte 2
.quad .loc_27_2818
.int 27
.int 2818
.byte 2
.quad .loc_27_2819
.int 27
.int 2819
.byte 2
.quad .loc_27_2820
.int 27
.int 2820
.byte 2
.quad .loc_27_2821
.int 27
.int 2821
.byte 2
.quad .loc_27_2822
.int 27
.int 2822
.byte 2
.quad .loc_27_2823
.int 27
.int 2823
.byte 2
.quad .loc_27_2824
.int 27
.int 2824
.byte 2
.quad .loc_27_2825
.int 27
.int 2825
.byte 2
.quad .loc_27_2826
.int 27
.int 2826
.byte 2
.quad .loc_27_2827
.int 27
.int 2827
.byte 2
.quad .loc_27_2828
.int 27
.int 2828
.byte 2
.quad .loc_27_2829
.int 27
.int 2829
.byte 2
.quad .loc_27_2830
.int 27
.int 2830
.byte 2
.quad .loc_27_2831
.int 27
.int 2831
.byte 2
.quad .loc_27_2832
.int 27
.int 2832
.byte 2
.quad .loc_27_2833
.int 27
.int 2833
.byte 2
.quad .loc_27_2834
.int 27
.int 2834
.byte 2
.quad .loc_27_2835
.int 27
.int 2835
.byte 2
.quad .loc_27_2836
.int 27
.int 2836
.byte 2
.quad .loc_27_2837
.int 27
.int 2837
.byte 2
.quad .loc_27_2838
.int 27
.int 2838
.byte 2
.quad .loc_27_2839
.int 27
.int 2839
.byte 2
.quad .loc_27_2841
.int 27
.int 2841
.byte 2
.quad .loc_27_2842
.int 27
.int 2842
.byte 2
.quad .loc_27_2843
.int 27
.int 2843
.byte 2
.quad .loc_27_2844
.int 27
.int 2844
.byte 2
.quad .loc_27_2845
.int 27
.int 2845
.byte 2
.quad .loc_27_2846
.int 27
.int 2846
.byte 2
.quad .loc_27_2847
.int 27
.int 2847
.byte 2
.quad .loc_27_2848
.int 27
.int 2848
.byte 2
.quad .loc_27_2852
.int 27
.int 2852
.byte 2
.quad .loc_27_2853
.int 27
.int 2853
.byte 2
.quad .loc_27_2854
.int 27
.int 2854
.byte 2
.quad .loc_27_2856
.int 27
.int 2856
.byte 2
.quad .loc_27_2857
.int 27
.int 2857
.byte 2
.quad .loc_27_2860
.int 27
.int 2860
.byte 2
.quad .loc_27_2861
.int 27
.int 2861
.byte 2
.quad .loc_27_2863
.int 27
.int 2863
.byte 2
.quad .loc_27_2866
.int 27
.int 2866
.byte 2
.quad .loc_27_2868
.int 27
.int 2868
.byte 2
.quad .loc_27_2870
.int 27
.int 2870
.byte 2
.quad .loc_27_2871
.int 27
.int 2871
.byte 2
.quad .loc_27_2872
.int 27
.int 2872
.byte 2
.quad .loc_27_2873
.int 27
.int 2873
.byte 2
.quad .loc_27_2874
.int 27
.int 2874
.byte 2
.quad .loc_27_2875
.int 27
.int 2875
.byte 2
.quad .loc_27_2876
.int 27
.int 2876
.byte 2
.quad .loc_27_2878
.int 27
.int 2878
.byte 2
.quad .loc_27_2879
.int 27
.int 2879
.byte 2
.quad .loc_27_2880
.int 27
.int 2880
.byte 2
.quad .loc_27_2881
.int 27
.int 2881
.byte 2
.quad .loc_27_2884
.int 27
.int 2884
.byte 2
.quad .loc_27_2890
.int 27
.int 2890
.byte 2
.quad .loc_27_2891
.int 27
.int 2891
.byte 2
.quad .loc_27_2892
.int 27
.int 2892
.byte 2
.quad .loc_27_2894
.int 27
.int 2894
.byte 2
.quad .loc_27_2895
.int 27
.int 2895
.byte 2
.quad .loc_27_2898
.int 27
.int 2898
.byte 2
.quad .loc_27_2899
.int 27
.int 2899
.byte 2
.quad .loc_27_2900
.int 27
.int 2900
.byte 2
.quad .loc_27_2901
.int 27
.int 2901
.byte 2
.quad .loc_27_2902
.int 27
.int 2902
.byte 2
.quad .loc_27_2905
.int 27
.int 2905
.byte 2
.quad .loc_27_2906
.int 27
.int 2906
.byte 2
.quad .loc_27_2908
.int 27
.int 2908
.byte 2
.quad .loc_27_2909
.int 27
.int 2909
.byte 2
.quad .loc_27_2912
.int 27
.int 2912
.byte 2
.quad .loc_27_2917
.int 27
.int 2917
.byte 2
.quad .loc_27_2919
.int 27
.int 2919
.byte 2
.quad .loc_27_2920
.int 27
.int 2920
.byte 2
.quad .loc_27_2921
.int 27
.int 2921
.byte 2
.quad .loc_27_2922
.int 27
.int 2922
.byte 2
.quad .loc_27_2923
.int 27
.int 2923
.byte 2
.quad .loc_27_2924
.int 27
.int 2924
.byte 2
.quad .loc_27_2926
.int 27
.int 2926
.byte 2
.quad .loc_27_2927
.int 27
.int 2927
.byte 2
.quad .loc_27_2938
.int 27
.int 2938
.byte 2
.quad .loc_27_2939
.int 27
.int 2939
.byte 2
.quad .loc_27_2940
.int 27
.int 2940
.byte 2
.quad .loc_27_2941
.int 27
.int 2941
.byte 2
.quad .loc_27_2943
.int 27
.int 2943
.byte 2
.quad .loc_27_2944
.int 27
.int 2944
.byte 2
.quad .loc_27_2946
.int 27
.int 2946
.byte 2
.quad .loc_27_2947
.int 27
.int 2947
.byte 2
.quad .loc_27_2950
.int 27
.int 2950
.byte 2
.quad .loc_27_2951
.int 27
.int 2951
.byte 2
.quad .loc_27_2952
.int 27
.int 2952
.byte 2
.quad .loc_27_2953
.int 27
.int 2953
.byte 2
.quad .loc_27_2954
.int 27
.int 2954
.byte 2
.quad .loc_27_2955
.int 27
.int 2955
.byte 2
.quad .loc_27_2957
.int 27
.int 2957
.byte 2
.quad .loc_27_2958
.int 27
.int 2958
.byte 2
.quad .loc_27_2959
.int 27
.int 2959
.byte 2
.quad .loc_27_2960
.int 27
.int 2960
.byte 2
.quad .loc_27_2961
.int 27
.int 2961
.byte 2
.quad .loc_27_2963
.int 27
.int 2963
.byte 2
.quad .loc_27_2964
.int 27
.int 2964
.byte 2
.quad .loc_27_2965
.int 27
.int 2965
.byte 2
.quad .loc_27_2968
.int 27
.int 2968
.byte 2
.quad .loc_27_2972
.int 27
.int 2972
.byte 2
.quad .loc_27_2973
.int 27
.int 2973
.byte 2
.quad .loc_27_2974
.int 27
.int 2974
.byte 2
.quad .loc_27_2975
.int 27
.int 2975
.byte 2
.quad .loc_27_2976
.int 27
.int 2976
.byte 2
.quad .loc_27_2978
.int 27
.int 2978
.byte 2
.quad .loc_27_2979
.int 27
.int 2979
.byte 2
.quad .loc_27_2980
.int 27
.int 2980
.byte 2
.quad .loc_27_2983
.int 27
.int 2983
.byte 2
.quad .loc_27_2988
.int 27
.int 2988
.byte 2
.quad .loc_27_2989
.int 27
.int 2989
.byte 2
.quad .loc_27_2990
.int 27
.int 2990
.byte 2
.quad .loc_0_56
.int 0
.int 56
.byte 2
.quad .loc_0_60
.int 0
.int 60
.byte 2
.quad .loc_0_61
.int 0
.int 61
.byte 2
.quad .loc_0_64
.int 0
.int 64
.byte 2
.quad .loc_0_65
.int 0
.int 65
.byte 2
.quad .loc_0_66
.int 0
.int 66
.byte 2
.quad .loc_0_68
.int 0
.int 68
.byte 2
.quad .loc_0_69
.int 0
.int 69
.byte 2
.quad .loc_0_72
.int 0
.int 72
.byte 2
.quad .loc_0_80
.int 0
.int 80
.byte 2
.quad .loc_0_89
.int 0
.int 89
.byte 2
.quad .loc_0_90
.int 0
.int 90
.byte 2
.quad .loc_0_91
.int 0
.int 91
.byte 2
.quad .loc_0_92
.int 0
.int 92
.byte 2
.quad .loc_0_93
.int 0
.int 93
.byte 2
.quad .loc_0_94
.int 0
.int 94
.byte 2
.quad .loc_0_95
.int 0
.int 95
.byte 2
.quad .loc_0_96
.int 0
.int 96
.byte 2
.quad .loc_0_97
.int 0
.int 97
.byte 2
.quad .loc_0_98
.int 0
.int 98
.byte 2
.quad .loc_0_99
.int 0
.int 99
.byte 2
.quad .loc_0_101
.int 0
.int 101
.byte 2
.quad .loc_0_103
.int 0
.int 103
.byte 2
.quad .loc_0_104
.int 0
.int 104
.byte 2
.quad .loc_0_105
.int 0
.int 105
.byte 2
.quad .loc_0_106
.int 0
.int 106
.byte 2
.quad .loc_0_109
.int 0
.int 109
.byte 2
.quad .loc_0_110
.int 0
.int 110
.byte 2
.quad .loc_0_111
.int 0
.int 111
.byte 2
.quad .loc_0_113
.int 0
.int 113
.byte 2
.quad .loc_0_114
.int 0
.int 114
.byte 2
.quad .loc_0_116
.int 0
.int 116
.byte 2
.quad .loc_0_117
.int 0
.int 117
.byte 2
.quad .loc_0_118
.int 0
.int 118
.byte 2
.quad .loc_0_121
.int 0
.int 121
.byte 2
.quad .loc_0_125
.int 0
.int 125
.byte 2
.quad .loc_0_129
.int 0
.int 129
.byte 2
.quad .loc_0_133
.int 0
.int 133
.byte 2
.quad .loc_0_137
.int 0
.int 137
.byte 2
.quad .loc_0_141
.int 0
.int 141
.byte 2
.quad .loc_0_145
.int 0
.int 145
.byte 2
.quad .loc_0_147
.int 0
.int 147
.byte 2
.quad .loc_0_148
.int 0
.int 148
.byte 2
.quad .loc_0_149
.int 0
.int 149
.byte 2
.quad .loc_0_150
.int 0
.int 150
.byte 2
.quad .loc_0_160
.int 0
.int 160
.byte 2
.quad .loc_0_161
.int 0
.int 161
.byte 2
.quad .loc_0_175
.int 0
.int 175
.byte 2
.quad .loc_0_176
.int 0
.int 176
.byte 2
.quad .loc_0_179
.int 0
.int 179
.byte 2
.quad .loc_0_180
.int 0
.int 180
.byte 2
.quad .loc_0_181
.int 0
.int 181
.byte 2
.quad .loc_0_182
.int 0
.int 182
.byte 2
.quad .loc_0_183
.int 0
.int 183
.byte 2
.quad .loc_0_184
.int 0
.int 184
.byte 2
.quad .loc_0_185
.int 0
.int 185
.byte 2
.quad .loc_0_186
.int 0
.int 186
.byte 2
.quad .loc_0_187
.int 0
.int 187
.byte 2
.quad .loc_0_190
.int 0
.int 190
.byte 2
.quad .loc_0_191
.int 0
.int 191
.byte 2
.quad .loc_0_192
.int 0
.int 192
.byte 2
.quad .loc_0_194
.int 0
.int 194
.byte 2
.quad .loc_0_195
.int 0
.int 195
.byte 2
.quad .loc_0_196
.int 0
.int 196
.byte 2
.quad .loc_0_199
.int 0
.int 199
.byte 2
.quad .loc_0_200
.int 0
.int 200
.byte 2
.quad .loc_0_202
.int 0
.int 202
.byte 2
.quad .loc_0_204
.int 0
.int 204
.byte 2
.quad .loc_0_205
.int 0
.int 205
.byte 2
.quad .loc_0_207
.int 0
.int 207
.byte 2
.quad .loc_0_209
.int 0
.int 209
.byte 2
.quad .loc_0_211
.int 0
.int 211
.byte 2
.quad .loc_0_212
.int 0
.int 212
.byte 2
.quad .loc_0_216
.int 0
.int 216
.byte 2
.quad .loc_0_218
.int 0
.int 218
.byte 2
.quad .loc_0_219
.int 0
.int 219
.byte 2
.quad .loc_0_221
.int 0
.int 221
.byte 2
.quad .loc_0_222
.int 0
.int 222
.byte 2
.quad .loc_0_224
.int 0
.int 224
.byte 2
.quad .loc_0_225
.int 0
.int 225
.byte 2
.quad .loc_0_226
.int 0
.int 226
.byte 2
.quad .loc_0_227
.int 0
.int 227
.byte 2
.quad .loc_0_228
.int 0
.int 228
.byte 2
.quad .loc_0_229
.int 0
.int 229
.byte 2
.quad .loc_0_232
.int 0
.int 232
.byte 2
.quad .loc_0_235
.int 0
.int 235
.byte 2
.quad .loc_0_236
.int 0
.int 236
.byte 2
.quad .loc_0_237
.int 0
.int 237
.byte 2
.quad .loc_0_238
.int 0
.int 238
.byte 2
.quad .loc_0_240
.int 0
.int 240
.byte 2
.quad .loc_0_241
.int 0
.int 241
.byte 2
.quad .loc_0_242
.int 0
.int 242
.byte 2
.quad .loc_0_246
.int 0
.int 246
.byte 2
.quad .loc_0_247
.int 0
.int 247
.byte 2
.quad .loc_0_248
.int 0
.int 248
.byte 2
.quad .loc_0_251
.int 0
.int 251
.byte 2
.quad .loc_0_252
.int 0
.int 252
.byte 2
.quad .loc_0_254
.int 0
.int 254
.byte 2
.quad .loc_0_255
.int 0
.int 255
.byte 2
.quad .loc_0_256
.int 0
.int 256
.byte 2
.quad .loc_0_257
.int 0
.int 257
.byte 2
.quad .loc_0_258
.int 0
.int 258
.byte 2
.quad .loc_0_259
.int 0
.int 259
.byte 2
.quad .loc_0_260
.int 0
.int 260
.byte 2
.quad .loc_0_261
.int 0
.int 261
.byte 2
.quad .loc_0_264
.int 0
.int 264
.byte 2
.quad .loc_0_265
.int 0
.int 265
.byte 2
.quad .loc_0_268
.int 0
.int 268
.byte 2
.quad .loc_0_269
.int 0
.int 269
.byte 2
.quad .loc_0_273
.int 0
.int 273
.byte 2
.quad .loc_0_274
.int 0
.int 274
.byte 2
.quad .loc_0_275
.int 0
.int 275
.byte 2
.quad .loc_0_276
.int 0
.int 276
.byte 2
.quad .loc_0_278
.int 0
.int 278
.byte 2
.quad .loc_0_279
.int 0
.int 279
.byte 2
.quad .loc_0_282
.int 0
.int 282
.byte 2
.quad .loc_0_283
.int 0
.int 283
.byte 2
.quad .loc_0_287
.int 0
.int 287
.byte 2
.quad .loc_0_288
.int 0
.int 288
.byte 2
.quad .loc_0_289
.int 0
.int 289
.byte 2
.quad .loc_0_290
.int 0
.int 290
.byte 2
.quad .loc_0_293
.int 0
.int 293
.byte 2
.quad .loc_0_294
.int 0
.int 294
.byte 2
.quad .loc_0_295
.int 0
.int 295
.byte 2
.quad .loc_0_296
.int 0
.int 296
.byte 2
.quad .loc_0_298
.int 0
.int 298
.byte 2
.quad .loc_0_299
.int 0
.int 299
.byte 2
.quad .loc_0_303
.int 0
.int 303
.byte 2
.quad .loc_0_304
.int 0
.int 304
.byte 2
.quad .loc_0_307
.int 0
.int 307
.byte 2
.quad .loc_0_308
.int 0
.int 308
.byte 2
.quad .loc_0_309
.int 0
.int 309
.byte 2
.quad .loc_0_310
.int 0
.int 310
.byte 2
.quad .loc_0_313
.int 0
.int 313
.byte 2
.quad .loc_0_314
.int 0
.int 314
.byte 2
.quad .loc_0_315
.int 0
.int 315
.byte 2
.quad .loc_0_317
.int 0
.int 317
.byte 2
.quad .loc_0_318
.int 0
.int 318
.byte 2
.quad .loc_0_319
.int 0
.int 319
.byte 2
.quad .loc_0_320
.int 0
.int 320
.byte 2
.quad .loc_0_323
.int 0
.int 323
.byte 2
.quad .loc_0_324
.int 0
.int 324
.byte 2
.quad .loc_0_325
.int 0
.int 325
.byte 2
.quad .loc_0_326
.int 0
.int 326
.byte 2
.quad .loc_0_327
.int 0
.int 327
.byte 2
.quad .loc_0_329
.int 0
.int 329
.byte 2
.quad .loc_0_332
.int 0
.int 332
.byte 2
.quad .loc_0_333
.int 0
.int 333
.byte 2
.quad .loc_0_334
.int 0
.int 334
.byte 2
.quad .loc_0_337
.int 0
.int 337
.byte 2
.quad .loc_0_340
.int 0
.int 340
.byte 2
.quad .loc_0_341
.int 0
.int 341
.byte 2
.quad .loc_0_343
.int 0
.int 343
.byte 2
.quad .loc_0_344
.int 0
.int 344
.byte 2
.quad .loc_0_345
.int 0
.int 345
.byte 2
.quad .loc_0_346
.int 0
.int 346
.byte 2
.quad .loc_0_347
.int 0
.int 347
.byte 2
.quad .loc_0_350
.int 0
.int 350
.byte 2
.quad .loc_0_351
.int 0
.int 351
.byte 2
.quad .loc_0_358
.int 0
.int 358
.byte 0
.global .bah_debug_info
.bah_debug_info:
.quad __bah_strlenSTR
.quad .__bah_strlenSTR_end
.int 15
.asciz "__bah_strlenSTR"
.quad __bah_arrayLength
.quad .__bah_arrayLength_end
.int 17
.asciz "__bah_arrayLength"
.quad __bah_compareStr
.quad .__bah_compareStr_end
.int 16
.asciz "__bah_compareStr"
.quad cStr
.quad .cStr_end
.int 4
.asciz "cStr"
.quad cArr
.quad .cArr_end
.int 4
.asciz "cArr"
.quad clear
.quad .clear_end
.int 5
.asciz "clear"
.quad delete
.quad .delete_end
.int 6
.asciz "delete"
.quad deleteRange
.quad .deleteRange_end
.int 11
.asciz "deleteRange"
.quad memoryAlloc
.quad .memoryAlloc_end
.int 11
.asciz "memoryAlloc"
.quad memoryRealloc
.quad .memoryRealloc_end
.int 13
.asciz "memoryRealloc"
.quad memoryAllocSTR
.quad .memoryAllocSTR_end
.int 14
.asciz "memoryAllocSTR"
.quad GC_thread_create
.quad .GC_thread_create_end
.int 16
.asciz "GC_thread_create"
.quad GC_thread_join
.quad .GC_thread_join_end
.int 14
.asciz "GC_thread_join"
.quad mutex.init
.quad .mutex.init_end
.int 10
.asciz "mutex.init"
.quad mutex.lock
.quad .mutex.lock_end
.int 10
.asciz "mutex.lock"
.quad mutex.unlock
.quad .mutex.unlock_end
.int 12
.asciz "mutex.unlock"
.quad mutex.destroy
.quad .mutex.destroy_end
.int 13
.asciz "mutex.destroy"
.quad mutexCondition.init
.quad .mutexCondition.init_end
.int 19
.asciz "mutexCondition.init"
.quad mutexCondition.wait
.quad .mutexCondition.wait_end
.int 19
.asciz "mutexCondition.wait"
.quad mutexCondition.send
.quad .mutexCondition.send_end
.int 19
.asciz "mutexCondition.send"
.quad mutexCondition.destroy
.quad .mutexCondition.destroy_end
.int 22
.asciz "mutexCondition.destroy"
.quad mutexCondition
.quad .mutexCondition_end
.int 14
.asciz "mutexCondition"
.quad thread.create
.quad .thread.create_end
.int 13
.asciz "thread.create"
.quad thread.createWithArg
.quad .thread.createWithArg_end
.int 20
.asciz "thread.createWithArg"
.quad thread.wait
.quad .thread.wait_end
.int 11
.asciz "thread.wait"
.quad mutex
.quad .mutex_end
.int 5
.asciz "mutex"
.quad intToStr
.quad .intToStr_end
.int 8
.asciz "intToStr"
.quad println
.quad .println_end
.int 7
.asciz "println"
.quad printInt
.quad .printInt_end
.int 8
.asciz "printInt"
.quad backtrace
.quad .backtrace_end
.int 9
.asciz "backtrace"
.quad BAH_GC_thread.clean
.quad .BAH_GC_thread.clean_end
.int 19
.asciz "BAH_GC_thread.clean"
.quad BAH_GC_state_tag.isPointerInBounds
.quad .BAH_GC_state_tag.isPointerInBounds_end
.int 34
.asciz "BAH_GC_state_tag.isPointerInBounds"
.quad BAH_GC_state_tag.updatePagesBounds
.quad .BAH_GC_state_tag.updatePagesBounds_end
.int 34
.asciz "BAH_GC_state_tag.updatePagesBounds"
.quad BAH_GC_state_tag.allocate
.quad .BAH_GC_state_tag.allocate_end
.int 25
.asciz "BAH_GC_state_tag.allocate"
.quad BAH_GC_state_tag.find
.quad .BAH_GC_state_tag.find_end
.int 21
.asciz "BAH_GC_state_tag.find"
.quad GC_sort_pointers
.quad .GC_sort_pointers_end
.int 16
.asciz "GC_sort_pointers"
.quad GC_setHeapSize
.quad .GC_setHeapSize_end
.int 14
.asciz "GC_setHeapSize"
.quad GC_scan
.quad .GC_scan_end
.int 7
.asciz "GC_scan"
.quad GC_thread_wrapper
.quad .GC_thread_wrapper_end
.int 17
.asciz "GC_thread_wrapper"
.quad GC_thread_sig_handler
.quad .GC_thread_sig_handler_end
.int 21
.asciz "GC_thread_sig_handler"
.quad GC_setStackBase
.quad .GC_setStackBase_end
.int 15
.asciz "GC_setStackBase"
.quad GC_init
.quad .GC_init_end
.int 7
.asciz "GC_init"
.quad GC_markPtr
.quad .GC_markPtr_end
.int 10
.asciz "GC_markPtr"
.quad GC_scanReversed
.quad .GC_scanReversed_end
.int 15
.asciz "GC_scanReversed"
.quad GC_stopWorld
.quad .GC_stopWorld_end
.int 12
.asciz "GC_stopWorld"
.quad GC_collect
.quad .GC_collect_end
.int 10
.asciz "GC_collect"
.quad memoryAlloc_NZ
.quad .memoryAlloc_NZ_end
.int 14
.asciz "memoryAlloc_NZ"
.quad memoryAllocSTR_NZ
.quad .memoryAllocSTR_NZ_end
.int 17
.asciz "memoryAllocSTR_NZ"
.quad queue.insert
.quad .queue.insert_end
.int 12
.asciz "queue.insert"
.quad queue.pop
.quad .queue.pop_end
.int 9
.asciz "queue.pop"
.quad queue.clear
.quad .queue.clear_end
.int 11
.asciz "queue.clear"
.quad channel.send
.quad .channel.send_end
.int 12
.asciz "channel.send"
.quad channel.sendAny
.quad .channel.sendAny_end
.int 15
.asciz "channel.sendAny"
.quad channel.receive
.quad .channel.receive_end
.int 15
.asciz "channel.receive"
.quad channel.destroy
.quad .channel.destroy_end
.int 15
.asciz "channel.destroy"
.quad channel.len
.quad .channel.len_end
.int 11
.asciz "channel.len"
.quad channel
.quad .channel_end
.int 7
.asciz "channel"
.quad setChanCap
.quad .setChanCap_end
.int 10
.asciz "setChanCap"
.quad print
.quad .print_end
.int 5
.asciz "print"
.quad __Bah_panic
.quad .__Bah_panic_end
.int 5
.asciz "panic"
.quad uintToStr
.quad .uintToStr_end
.int 9
.asciz "uintToStr"
.quad arrayDuplicate
.quad .arrayDuplicate_end
.int 14
.asciz "arrayDuplicate"
.quad __Bah_realocate_arr
.quad .__Bah_realocate_arr_end
.int 19
.asciz "__Bah_realocate_arr"
.quad allocateArray
.quad .allocateArray_end
.int 13
.asciz "allocateArray"
.quad buffToStr
.quad .buffToStr_end
.int 9
.asciz "buffToStr"
.quad cStrToBah
.quad .cStrToBah_end
.int 9
.asciz "cStrToBah"
.quad __bah_argsToArr
.quad .__bah_argsToArr_end
.int 15
.asciz "__bah_argsToArr"
.quad strSubstitute
.quad .strSubstitute_end
.int 13
.asciz "strSubstitute"
.quad arraySubstitute
.quad .arraySubstitute_end
.int 15
.asciz "arraySubstitute"
.quad arraySubstituteAndCopy
.quad .arraySubstituteAndCopy_end
.int 22
.asciz "arraySubstituteAndCopy"
.quad arrToStr
.quad .arrToStr_end
.int 8
.asciz "arrToStr"
.quad strToArr
.quad .strToArr_end
.int 8
.asciz "strToArr"
.quad strBuilder._init
.quad .strBuilder._init_end
.int 16
.asciz "strBuilder._init"
.quad strBuilder.append
.quad .strBuilder.append_end
.int 17
.asciz "strBuilder.append"
.quad strBuilder.str
.quad .strBuilder.str_end
.int 14
.asciz "strBuilder.str"
.quad stdinput
.quad .stdinput_end
.int 8
.asciz "stdinput"
.quad fileStream.isValid
.quad .fileStream.isValid_end
.int 18
.asciz "fileStream.isValid"
.quad fileStream.open
.quad .fileStream.open_end
.int 15
.asciz "fileStream.open"
.quad fileStream.close
.quad .fileStream.close_end
.int 16
.asciz "fileStream.close"
.quad fileStream.getPos
.quad .fileStream.getPos_end
.int 17
.asciz "fileStream.getPos"
.quad fileStream.setPos
.quad .fileStream.setPos_end
.int 17
.asciz "fileStream.setPos"
.quad fileStream.getSize
.quad .fileStream.getSize_end
.int 18
.asciz "fileStream.getSize"
.quad fileStream.rewind
.quad .fileStream.rewind_end
.int 17
.asciz "fileStream.rewind"
.quad fileStream.getChar
.quad .fileStream.getChar_end
.int 18
.asciz "fileStream.getChar"
.quad fileStream.setChar
.quad .fileStream.setChar_end
.int 18
.asciz "fileStream.setChar"
.quad fileStream.createFile
.quad .fileStream.createFile_end
.int 21
.asciz "fileStream.createFile"
.quad fileStream.writeFile
.quad .fileStream.writeFile_end
.int 20
.asciz "fileStream.writeFile"
.quad fileStream.writePtr
.quad .fileStream.writePtr_end
.int 19
.asciz "fileStream.writePtr"
.quad fileStream.readPtr
.quad .fileStream.readPtr_end
.int 18
.asciz "fileStream.readPtr"
.quad fileStream.readContent
.quad .fileStream.readContent_end
.int 22
.asciz "fileStream.readContent"
.quad fileStream.readBytes
.quad .fileStream.readBytes_end
.int 20
.asciz "fileStream.readBytes"
.quad fileStream.writeBytes
.quad .fileStream.writeBytes_end
.int 21
.asciz "fileStream.writeBytes"
.quad fileStream._end
.quad .fileStream._end_end
.int 15
.asciz "fileStream._end"
.quad fileMap.open
.quad .fileMap.open_end
.int 12
.asciz "fileMap.open"
.quad fileMap.isValid
.quad .fileMap.isValid_end
.int 15
.asciz "fileMap.isValid"
.quad fileMap.close
.quad .fileMap.close_end
.int 13
.asciz "fileMap.close"
.quad listFiles
.quad .listFiles_end
.int 9
.asciz "listFiles"
.quad fileExists
.quad .fileExists_end
.int 10
.asciz "fileExists"
.quad isFolder
.quad .isFolder_end
.int 8
.asciz "isFolder"
.quad removeFile
.quad .removeFile_end
.int 10
.asciz "removeFile"
.quad getLastModified
.quad .getLastModified_end
.int 15
.asciz "getLastModified"
.quad makeDir
.quad .makeDir_end
.int 7
.asciz "makeDir"
.quad strCatOffset
.quad .strCatOffset_end
.int 12
.asciz "strCatOffset"
.quad charToStr
.quad .charToStr_end
.int 9
.asciz "charToStr"
.quad isUpper
.quad .isUpper_end
.int 7
.asciz "isUpper"
.quad isLower
.quad .isLower_end
.int 7
.asciz "isLower"
.quad isLetter
.quad .isLetter_end
.int 8
.asciz "isLetter"
.quad isNumber
.quad .isNumber_end
.int 8
.asciz "isNumber"
.quad isAlphaNumeric
.quad .isAlphaNumeric_end
.int 14
.asciz "isAlphaNumeric"
.quad isSpace
.quad .isSpace_end
.int 7
.asciz "isSpace"
.quad strReplace
.quad .strReplace_end
.int 10
.asciz "strReplace"
.quad string.set
.quad .string.set_end
.int 10
.asciz "string.set"
.quad string.makeEditable
.quad .string.makeEditable_end
.int 19
.asciz "string.makeEditable"
.quad string.append
.quad .string.append_end
.int 13
.asciz "string.append"
.quad string.prepend
.quad .string.prepend_end
.int 14
.asciz "string.prepend"
.quad string.charAt
.quad .string.charAt_end
.int 13
.asciz "string.charAt"
.quad string.compare
.quad .string.compare_end
.int 14
.asciz "string.compare"
.quad string.str
.quad .string.str_end
.int 10
.asciz "string.str"
.quad string.replace
.quad .string.replace_end
.int 14
.asciz "string.replace"
.quad string.countChar
.quad .string.countChar_end
.int 16
.asciz "string.countChar"
.quad string.count
.quad .string.count_end
.int 12
.asciz "string.count"
.quad string.contains
.quad .string.contains_end
.int 15
.asciz "string.contains"
.quad string.containsChar
.quad .string.containsChar_end
.int 19
.asciz "string.containsChar"
.quad string.hasPrefix
.quad .string.hasPrefix_end
.int 16
.asciz "string.hasPrefix"
.quad string.hasSuffix
.quad .string.hasSuffix_end
.int 16
.asciz "string.hasSuffix"
.quad string.trim
.quad .string.trim_end
.int 11
.asciz "string.trim"
.quad string.trimLeft
.quad .string.trimLeft_end
.int 15
.asciz "string.trimLeft"
.quad string.trimRight
.quad .string.trimRight_end
.int 16
.asciz "string.trimRight"
.quad string.add
.quad .string.add_end
.int 10
.asciz "string.add"
.quad string.asArr
.quad .string.asArr_end
.int 12
.asciz "string.asArr"
.quad string.resetLength
.quad .string.resetLength_end
.int 18
.asciz "string.resetLength"
.quad string
.quad .string_end
.int 6
.asciz "string"
.quad uintToHex
.quad .uintToHex_end
.int 9
.asciz "uintToHex"
.quad hexToInt
.quad .hexToInt_end
.int 8
.asciz "hexToInt"
.quad hexToUint
.quad .hexToUint_end
.int 9
.asciz "hexToUint"
.quad intToString
.quad .intToString_end
.int 11
.asciz "intToString"
.quad floatToStr
.quad .floatToStr_end
.int 10
.asciz "floatToStr"
.quad strToInt
.quad .strToInt_end
.int 8
.asciz "strToInt"
.quad strToUint
.quad .strToUint_end
.int 9
.asciz "strToUint"
.quad strToFloat
.quad .strToFloat_end
.int 10
.asciz "strToFloat"
.quad stringToInt
.quad .stringToInt_end
.int 11
.asciz "stringToInt"
.quad splitString
.quad .splitString_end
.int 11
.asciz "splitString"
.quad strJoin
.quad .strJoin_end
.int 7
.asciz "strJoin"
.quad joinString
.quad .joinString_end
.int 10
.asciz "joinString"
.quad splitStringBefore
.quad .splitStringBefore_end
.int 17
.asciz "splitStringBefore"
.quad toLower
.quad .toLower_end
.int 7
.asciz "toLower"
.quad strHasPrefix
.quad .strHasPrefix_end
.int 12
.asciz "strHasPrefix"
.quad strHasSuffix
.quad .strHasSuffix_end
.int 12
.asciz "strHasSuffix"
.quad strCount
.quad .strCount_end
.int 8
.asciz "strCount"
.quad time.now
.quad .time.now_end
.int 8
.asciz "time.now"
.quad time.format
.quad .time.format_end
.int 11
.asciz "time.format"
.quad time.since
.quad .time.since_end
.int 10
.asciz "time.since"
.quad getTimeUnix
.quad .getTimeUnix_end
.int 11
.asciz "getTimeUnix"
.quad bahSleep
.quad .bahSleep_end
.int 8
.asciz "bahSleep"
.quad reflectElement.calculateOffset
.quad .reflectElement.calculateOffset_end
.int 30
.asciz "reflectElement.calculateOffset"
.quad reflectIsPtrType
.quad .reflectIsPtrType_end
.int 16
.asciz "reflectIsPtrType"
.quad reflectUnwrapPtr
.quad .reflectUnwrapPtr_end
.int 16
.asciz "reflectUnwrapPtr"
.quad __reflect
.quad .__reflect_end
.int 9
.asciz "__reflect"
.quad __dumpSymbols
.quad .__dumpSymbols_end
.int 13
.asciz "__dumpSymbols"
.quad __debug_get_sym
.quad .__debug_get_sym_end
.int 15
.asciz "__debug_get_sym"
.quad rope.isStraightConcat
.quad .rope.isStraightConcat_end
.int 21
.asciz "rope.isStraightConcat"
.quad rope.addStr
.quad .rope.addStr_end
.int 11
.asciz "rope.addStr"
.quad rope.getLen
.quad .rope.getLen_end
.int 11
.asciz "rope.getLen"
.quad rope.toStr
.quad .rope.toStr_end
.int 10
.asciz "rope.toStr"
.quad rope.add
.quad .rope.add_end
.int 8
.asciz "rope.add"
.quad rope.append
.quad .rope.append_end
.int 11
.asciz "rope.append"
.quad ropeSet
.quad .ropeSet_end
.int 7
.asciz "ropeSet"
.quad rope
.quad .rope_end
.int 4
.asciz "rope"
.quad toJson
.quad .toJson_end
.int 6
.asciz "toJson"
.quad json_scan_inner
.quad .json_scan_inner_end
.int 15
.asciz "json_scan_inner"
.quad jsonElement.get
.quad .jsonElement.get_end
.int 15
.asciz "jsonElement.get"
.quad jsonElement.str
.quad .jsonElement.str_end
.int 15
.asciz "jsonElement.str"
.quad jsonElement.scan
.quad .jsonElement.scan_end
.int 16
.asciz "jsonElement.scan"
.quad parseJson_inner
.quad .parseJson_inner_end
.int 15
.asciz "parseJson_inner"
.quad parseJson
.quad .parseJson_end
.int 9
.asciz "parseJson"
.quad json_isPrintable
.quad .json_isPrintable_end
.int 16
.asciz "json_isPrintable"
.quad jsonEscapeStr
.quad .jsonEscapeStr_end
.int 13
.asciz "jsonEscapeStr"
.quad toJsonRope
.quad .toJsonRope_end
.int 10
.asciz "toJsonRope"
.quad toObjectInner
.quad .toObjectInner_end
.int 13
.asciz "toObjectInner"
.quad object_realocate_arr
.quad .object_realocate_arr_end
.int 20
.asciz "object_realocate_arr"
.quad object_int32toarr
.quad .object_int32toarr_end
.int 17
.asciz "object_int32toarr"
.quad object_int32toarrAt
.quad .object_int32toarrAt_end
.int 19
.asciz "object_int32toarrAt"
.quad object_inttoarr
.quad .object_inttoarr_end
.int 15
.asciz "object_inttoarr"
.quad object_strtoarr
.quad .object_strtoarr_end
.int 15
.asciz "object_strtoarr"
.quad object_memtoarr
.quad .object_memtoarr_end
.int 15
.asciz "object_memtoarr"
.quad object_getRefsFromElem
.quad .object_getRefsFromElem_end
.int 22
.asciz "object_getRefsFromElem"
.quad fromObjectInner
.quad .fromObjectInner_end
.int 15
.asciz "fromObjectInner"
.quad toObject
.quad .toObject_end
.int 8
.asciz "toObject"
.quad fromObject
.quad .fromObject_end
.int 10
.asciz "fromObject"
.quad absPath
.quad .absPath_end
.int 7
.asciz "absPath"
.quad getCurrentPath
.quad .getCurrentPath_end
.int 14
.asciz "getCurrentPath"
.quad isInside
.quad .isInside_end
.int 8
.asciz "isInside"
.quad setCurrentPath
.quad .setCurrentPath_end
.int 14
.asciz "setCurrentPath"
.quad command.open
.quad .command.open_end
.int 12
.asciz "command.open"
.quad command.write
.quad .command.write_end
.int 13
.asciz "command.write"
.quad command.read
.quad .command.read_end
.int 12
.asciz "command.read"
.quad command.close
.quad .command.close_end
.int 13
.asciz "command.close"
.quad command.run
.quad .command.run_end
.int 11
.asciz "command.run"
.quad command.runBytes
.quad .command.runBytes_end
.int 16
.asciz "command.runBytes"
.quad command
.quad .command_end
.int 7
.asciz "command"
.quad exec
.quad .exec_end
.int 4
.asciz "exec"
.quad flags.addString
.quad .flags.addString_end
.int 15
.asciz "flags.addString"
.quad flags.addBool
.quad .flags.addBool_end
.int 13
.asciz "flags.addBool"
.quad flags.addInt
.quad .flags.addInt_end
.int 12
.asciz "flags.addInt"
.quad flags.addFloat
.quad .flags.addFloat_end
.int 14
.asciz "flags.addFloat"
.quad flags.invalidate
.quad .flags.invalidate_end
.int 16
.asciz "flags.invalidate"
.quad flags.getFlag
.quad .flags.getFlag_end
.int 13
.asciz "flags.getFlag"
.quad flags.get
.quad .flags.get_end
.int 9
.asciz "flags.get"
.quad flags.getInt
.quad .flags.getInt_end
.int 12
.asciz "flags.getInt"
.quad flags.getFloat
.quad .flags.getFloat_end
.int 14
.asciz "flags.getFloat"
.quad flags.isSet
.quad .flags.isSet_end
.int 11
.asciz "flags.isSet"
.quad flags.parse
.quad .flags.parse_end
.int 11
.asciz "flags.parse"
.quad objectFile._getELFstr
.quad .objectFile._getELFstr_end
.int 21
.asciz "objectFile._getELFstr"
.quad objectFile._getELFsymName
.quad .objectFile._getELFsymName_end
.int 25
.asciz "objectFile._getELFsymName"
.quad objectFile.performRelocations
.quad .objectFile.performRelocations_end
.int 29
.asciz "objectFile.performRelocations"
.quad objectFile.weakLinker
.quad .objectFile.weakLinker_end
.int 21
.asciz "objectFile.weakLinker"
.quad objectFile.open
.quad .objectFile.open_end
.int 15
.asciz "objectFile.open"
.quad objectFile.getSymbol
.quad .objectFile.getSymbol_end
.int 20
.asciz "objectFile.getSymbol"
.quad objectFile.close
.quad .objectFile.close_end
.int 16
.asciz "objectFile.close"
.quad makeToken
.quad .makeToken_end
.int 9
.asciz "makeToken"
.quad isMinus
.quad .isMinus_end
.int 7
.asciz "isMinus"
.quad lexerErr
.quad .lexerErr_end
.int 8
.asciz "lexerErr"
.quad lexer
.quad .lexer_end
.int 5
.asciz "lexer"
.quad tokToInt
.quad .tokToInt_end
.int 8
.asciz "tokToInt"
.quad tokToUint
.quad .tokToUint_end
.int 9
.asciz "tokToUint"
.quad printDebugContext
.quad .printDebugContext_end
.int 17
.asciz "printDebugContext"
.quad getTwoPow
.quad .getTwoPow_end
.int 9
.asciz "getTwoPow"
.quad spos
.quad .spos_end
.int 4
.asciz "spos"
.quad asmSymbol.toStr
.quad .asmSymbol.toStr_end
.int 15
.asciz "asmSymbol.toStr"
.quad asmSymbolValue
.quad .asmSymbolValue_end
.int 14
.asciz "asmSymbolValue"
.quad asmSymbolReg
.quad .asmSymbolReg_end
.int 12
.asciz "asmSymbolReg"
.quad asmSymbolStack
.quad .asmSymbolStack_end
.int 14
.asciz "asmSymbolStack"
.quad asmSymbolStaticName
.quad .asmSymbolStaticName_end
.int 19
.asciz "asmSymbolStaticName"
.quad asmSymbolTmp
.quad .asmSymbolTmp_end
.int 12
.asciz "asmSymbolTmp"
.quad isEmptySymbol
.quad .isEmptySymbol_end
.int 13
.asciz "isEmptySymbol"
.quad asmInstruction.toStr
.quad .asmInstruction.toStr_end
.int 20
.asciz "asmInstruction.toStr"
.quad _asm_append_instruction
.quad ._asm_append_instruction_end
.int 23
.asciz "_asm_append_instruction"
.quad asmContext.isSameArg
.quad .asmContext.isSameArg_end
.int 20
.asciz "asmContext.isSameArg"
.quad asmContext.isSameArgAndSize
.quad .asmContext.isSameArgAndSize_end
.int 27
.asciz "asmContext.isSameArgAndSize"
.quad asmContext.isSet
.quad .asmContext.isSet_end
.int 16
.asciz "asmContext.isSet"
.quad asmContext.isUsed
.quad .asmContext.isUsed_end
.int 17
.asciz "asmContext.isUsed"
.quad asmContext.isSetInRange
.quad .asmContext.isSetInRange_end
.int 23
.asciz "asmContext.isSetInRange"
.quad asmContext.isUsedInRange
.quad .asmContext.isUsedInRange_end
.int 24
.asciz "asmContext.isUsedInRange"
.quad asmContext.removeStackAlloc
.quad .asmContext.removeStackAlloc_end
.int 27
.asciz "asmContext.removeStackAlloc"
.quad asmContext.removeStackAllocs
.quad .asmContext.removeStackAllocs_end
.int 28
.asciz "asmContext.removeStackAllocs"
.quad asmContext.optimizeInstructions
.quad .asmContext.optimizeInstructions_end
.int 31
.asciz "asmContext.optimizeInstructions"
.quad asmContext.generateSymFromTmp
.quad .asmContext.generateSymFromTmp_end
.int 29
.asciz "asmContext.generateSymFromTmp"
.quad asmContext.flushInstructions
.quad .asmContext.flushInstructions_end
.int 28
.asciz "asmContext.flushInstructions"
.quad asmContext.setToJump
.quad .asmContext.setToJump_end
.int 20
.asciz "asmContext.setToJump"
.quad asmContext.generateFileLocation
.quad .asmContext.generateFileLocation_end
.int 31
.asciz "asmContext.generateFileLocation"
.quad asmContext.generateLineLocation
.quad .asmContext.generateLineLocation_end
.int 31
.asciz "asmContext.generateLineLocation"
.quad asmContext.resetRegisters
.quad .asmContext.resetRegisters_end
.int 25
.asciz "asmContext.resetRegisters"
.quad asmContext.generateMoveValue
.quad .asmContext.generateMoveValue_end
.int 28
.asciz "asmContext.generateMoveValue"
.quad asmContext.generateStackAlloc
.quad .asmContext.generateStackAlloc_end
.int 29
.asciz "asmContext.generateStackAlloc"
.quad asmContext.generateTmpSym
.quad .asmContext.generateTmpSym_end
.int 25
.asciz "asmContext.generateTmpSym"
.quad asmContext.generatePrefetch
.quad .asmContext.generatePrefetch_end
.int 27
.asciz "asmContext.generatePrefetch"
.quad asmContext.generateUnary
.quad .asmContext.generateUnary_end
.int 24
.asciz "asmContext.generateUnary"
.quad asmContext.generateDereference
.quad .asmContext.generateDereference_end
.int 30
.asciz "asmContext.generateDereference"
.quad asmContext.generateDestDereference
.quad .asmContext.generateDestDereference_end
.int 34
.asciz "asmContext.generateDestDereference"
.quad asmContext.generateStaticStr
.quad .asmContext.generateStaticStr_end
.int 28
.asciz "asmContext.generateStaticStr"
.quad asmContext.staticInt
.quad .asmContext.staticInt_end
.int 20
.asciz "asmContext.staticInt"
.quad asmContext.staticFloat32
.quad .asmContext.staticFloat32_end
.int 24
.asciz "asmContext.staticFloat32"
.quad asmContext.staticFloat64
.quad .asmContext.staticFloat64_end
.int 24
.asciz "asmContext.staticFloat64"
.quad asmContext.generateConvSizes
.quad .asmContext.generateConvSizes_end
.int 28
.asciz "asmContext.generateConvSizes"
.quad asmContext.generateCompare
.quad .asmContext.generateCompare_end
.int 26
.asciz "asmContext.generateCompare"
.quad asmContext.generateBoolOrStart
.quad .asmContext.generateBoolOrStart_end
.int 30
.asciz "asmContext.generateBoolOrStart"
.quad asmContext.generateBoolOr
.quad .asmContext.generateBoolOr_end
.int 25
.asciz "asmContext.generateBoolOr"
.quad asmContext.generateBoolOrEnd
.quad .asmContext.generateBoolOrEnd_end
.int 28
.asciz "asmContext.generateBoolOrEnd"
.quad asmContext.generateBoolAndStart
.quad .asmContext.generateBoolAndStart_end
.int 31
.asciz "asmContext.generateBoolAndStart"
.quad asmContext.generateBoolAnd
.quad .asmContext.generateBoolAnd_end
.int 26
.asciz "asmContext.generateBoolAnd"
.quad asmContext.generateBoolAndEnd
.quad .asmContext.generateBoolAndEnd_end
.int 29
.asciz "asmContext.generateBoolAndEnd"
.quad asmContext.generateStrConcatBegin
.quad .asmContext.generateStrConcatBegin_end
.int 33
.asciz "asmContext.generateStrConcatBegin"
.quad asmContext.generateStrConcat
.quad .asmContext.generateStrConcat_end
.int 28
.asciz "asmContext.generateStrConcat"
.quad asmContext.generateStrConcatEnd
.quad .asmContext.generateStrConcatEnd_end
.int 31
.asciz "asmContext.generateStrConcatEnd"
.quad asmContext.generateFor
.quad .asmContext.generateFor_end
.int 22
.asciz "asmContext.generateFor"
.quad asmContext.generateForCond
.quad .asmContext.generateForCond_end
.int 26
.asciz "asmContext.generateForCond"
.quad asmContext.generateForIncr
.quad .asmContext.generateForIncr_end
.int 26
.asciz "asmContext.generateForIncr"
.quad asmContext.generateForOptimizedCond
.quad .asmContext.generateForOptimizedCond_end
.int 35
.asciz "asmContext.generateForOptimizedCond"
.quad asmContext.generateForEnd
.quad .asmContext.generateForEnd_end
.int 25
.asciz "asmContext.generateForEnd"
.quad asmContext.generateForContinue
.quad .asmContext.generateForContinue_end
.int 30
.asciz "asmContext.generateForContinue"
.quad asmContext.generateForBreak
.quad .asmContext.generateForBreak_end
.int 27
.asciz "asmContext.generateForBreak"
.quad asmContext.generateIf
.quad .asmContext.generateIf_end
.int 21
.asciz "asmContext.generateIf"
.quad asmContext.generateEndIf
.quad .asmContext.generateEndIf_end
.int 24
.asciz "asmContext.generateEndIf"
.quad asmContext.generateElseIf
.quad .asmContext.generateElseIf_end
.int 25
.asciz "asmContext.generateElseIf"
.quad asmContext.generateElse
.quad .asmContext.generateElse_end
.int 23
.asciz "asmContext.generateElse"
.quad asmContext.generateEndElse
.quad .asmContext.generateEndElse_end
.int 26
.asciz "asmContext.generateEndElse"
.quad asmContext.generateVarDecl
.quad .asmContext.generateVarDecl_end
.int 26
.asciz "asmContext.generateVarDecl"
.quad asmContext.generateTmpDecl
.quad .asmContext.generateTmpDecl_end
.int 26
.asciz "asmContext.generateTmpDecl"
.quad asmContext.generateGlobalVarDecl
.quad .asmContext.generateGlobalVarDecl_end
.int 32
.asciz "asmContext.generateGlobalVarDecl"
.quad asmContext.generatePrivateVarWithValue
.quad .asmContext.generatePrivateVarWithValue_end
.int 38
.asciz "asmContext.generatePrivateVarWithValue"
.quad asmContext.generateGlobalVarDeclWithValue
.quad .asmContext.generateGlobalVarDeclWithValue_end
.int 41
.asciz "asmContext.generateGlobalVarDeclWithValue"
.quad asmContext.generateVarSet
.quad .asmContext.generateVarSet_end
.int 25
.asciz "asmContext.generateVarSet"
.quad asmContext.generateOpBitwise
.quad .asmContext.generateOpBitwise_end
.int 28
.asciz "asmContext.generateOpBitwise"
.quad asmContext.generateOpAdd
.quad .asmContext.generateOpAdd_end
.int 24
.asciz "asmContext.generateOpAdd"
.quad asmContext.generateOpMult
.quad .asmContext.generateOpMult_end
.int 25
.asciz "asmContext.generateOpMult"
.quad asmContext.generateOpDiv
.quad .asmContext.generateOpDiv_end
.int 24
.asciz "asmContext.generateOpDiv"
.quad asmContext.generateOpMod
.quad .asmContext.generateOpMod_end
.int 24
.asciz "asmContext.generateOpMod"
.quad asmContext.generateOpSub
.quad .asmContext.generateOpSub_end
.int 24
.asciz "asmContext.generateOpSub"
.quad asmContext.generateConvFloatToInt
.quad .asmContext.generateConvFloatToInt_end
.int 33
.asciz "asmContext.generateConvFloatToInt"
.quad asmContext.generateConvIntToFloat
.quad .asmContext.generateConvIntToFloat_end
.int 33
.asciz "asmContext.generateConvIntToFloat"
.quad asmContext.generateSymOffset
.quad .asmContext.generateSymOffset_end
.int 28
.asciz "asmContext.generateSymOffset"
.quad asmContext.generateDestSymOffset
.quad .asmContext.generateDestSymOffset_end
.int 32
.asciz "asmContext.generateDestSymOffset"
.quad asmContext.generateSelfOp
.quad .asmContext.generateSelfOp_end
.int 25
.asciz "asmContext.generateSelfOp"
.quad asmContext.generateFnStart
.quad .asmContext.generateFnStart_end
.int 26
.asciz "asmContext.generateFnStart"
.quad asmContext.generateFnEnd
.quad .asmContext.generateFnEnd_end
.int 24
.asciz "asmContext.generateFnEnd"
.quad asmContext.generateReturn
.quad .asmContext.generateReturn_end
.int 25
.asciz "asmContext.generateReturn"
.quad asmContext.generateEarlyReturn
.quad .asmContext.generateEarlyReturn_end
.int 30
.asciz "asmContext.generateEarlyReturn"
.quad asmContext.generateFnCallStart
.quad .asmContext.generateFnCallStart_end
.int 30
.asciz "asmContext.generateFnCallStart"
.quad asmContext.generateFnCallArgument
.quad .asmContext.generateFnCallArgument_end
.int 33
.asciz "asmContext.generateFnCallArgument"
.quad asmContext.generateFnCall
.quad .asmContext.generateFnCall_end
.int 25
.asciz "asmContext.generateFnCall"
.quad asmContext.generateSyscall
.quad .asmContext.generateSyscall_end
.int 26
.asciz "asmContext.generateSyscall"
.quad pathToVarName
.quad .pathToVarName_end
.int 13
.asciz "pathToVarName"
.quad readCache
.quad .readCache_end
.int 9
.asciz "readCache"
.quad getCacheFile
.quad .getCacheFile_end
.int 12
.asciz "getCacheFile"
.quad updateCacheFile
.quad .updateCacheFile_end
.int 15
.asciz "updateCacheFile"
.quad makeCacheFile
.quad .makeCacheFile_end
.int 13
.asciz "makeCacheFile"
.quad writeCache
.quad .writeCache_end
.int 10
.asciz "writeCache"
.quad isValidCacheFile
.quad .isValidCacheFile_end
.int 16
.asciz "isValidCacheFile"
.quad bahType.isFlagSet
.quad .bahType.isFlagSet_end
.int 17
.asciz "bahType.isFlagSet"
.quad bahType.toggleFlag
.quad .bahType.toggleFlag_end
.int 18
.asciz "bahType.toggleFlag"
.quad bahType.toStr
.quad .bahType.toStr_end
.int 13
.asciz "bahType.toStr"
.quad bahType.getPtr
.quad .bahType.getPtr_end
.int 14
.asciz "bahType.getPtr"
.quad bahLeftValue.isArrayRecursive
.quad .bahLeftValue.isArrayRecursive_end
.int 29
.asciz "bahLeftValue.isArrayRecursive"
.quad parserContext.addVar
.quad .parserContext.addVar_end
.int 20
.asciz "parserContext.addVar"
.quad parserContext.addFunc
.quad .parserContext.addFunc_end
.int 21
.asciz "parserContext.addFunc"
.quad parserContext.addType
.quad .parserContext.addType_end
.int 21
.asciz "parserContext.addType"
.quad parserContext.startScope
.quad .parserContext.startScope_end
.int 24
.asciz "parserContext.startScope"
.quad parserContext.endScope
.quad .parserContext.endScope_end
.int 22
.asciz "parserContext.endScope"
.quad parserContext.findVar
.quad .parserContext.findVar_end
.int 21
.asciz "parserContext.findVar"
.quad parserContext.findFunc
.quad .parserContext.findFunc_end
.int 22
.asciz "parserContext.findFunc"
.quad parserContext.findMethod
.quad .parserContext.findMethod_end
.int 24
.asciz "parserContext.findMethod"
.quad parserContext.findType
.quad .parserContext.findType_end
.int 22
.asciz "parserContext.findType"
.quad hasScopeReturned
.quad .hasScopeReturned_end
.int 16
.asciz "hasScopeReturned"
.quad reversableCompatibleTypes
.quad .reversableCompatibleTypes_end
.int 25
.asciz "reversableCompatibleTypes"
.quad compatibleTypes
.quad .compatibleTypes_end
.int 15
.asciz "compatibleTypes"
.quad isSameType
.quad .isSameType_end
.int 10
.asciz "isSameType"
.quad containsPtr
.quad .containsPtr_end
.int 11
.asciz "containsPtr"
.quad throwError
.quad .throwError_end
.int 10
.asciz "throwError"
.quad throwTypeError
.quad .throwTypeError_end
.int 14
.asciz "throwTypeError"
.quad isValueSafe
.quad .isValueSafe_end
.int 11
.asciz "isValueSafe"
.quad isValueInexpensive
.quad .isValueInexpensive_end
.int 18
.asciz "isValueInexpensive"
.quad optimizeBranchlessOR
.quad .optimizeBranchlessOR_end
.int 20
.asciz "optimizeBranchlessOR"
.quad optimizeBranchlessAND
.quad .optimizeBranchlessAND_end
.int 21
.asciz "optimizeBranchlessAND"
.quad generateTypeConversion
.quad .generateTypeConversion_end
.int 22
.asciz "generateTypeConversion"
.quad generateReflection
.quad .generateReflection_end
.int 18
.asciz "generateReflection"
.quad generateBahValueSymbol
.quad .generateBahValueSymbol_end
.int 22
.asciz "generateBahValueSymbol"
.quad getStrLen
.quad .getStrLen_end
.int 9
.asciz "getStrLen"
.quad evalFunc
.quad .evalFunc_end
.int 8
.asciz "evalFunc"
.quad generateValueOperation
.quad .generateValueOperation_end
.int 22
.asciz "generateValueOperation"
.quad generateBahLeftValueSymbol
.quad .generateBahLeftValueSymbol_end
.int 26
.asciz "generateBahLeftValueSymbol"
.quad generateReflectionFromType
.quad .generateReflectionFromType_end
.int 26
.asciz "generateReflectionFromType"
.quad generateImmediateValues
.quad .generateImmediateValues_end
.int 23
.asciz "generateImmediateValues"
.quad generateRuntimeDebugInfo
.quad .generateRuntimeDebugInfo_end
.int 24
.asciz "generateRuntimeDebugInfo"
.quad parseLines
.quad .parseLines_end
.int 10
.asciz "parseLines"
.quad parseLine
.quad .parseLine_end
.int 9
.asciz "parseLine"
.quad consumeValue
.quad .consumeValue_end
.int 12
.asciz "consumeValue"
.quad parseFnBody
.quad .parseFnBody_end
.int 11
.asciz "parseFnBody"
.quad parallelObjCompile
.quad .parallelObjCompile_end
.int 18
.asciz "parallelObjCompile"
.quad includeFile
.quad .includeFile_end
.int 11
.asciz "includeFile"
.quad importFile
.quad .importFile_end
.int 10
.asciz "importFile"
.quad consumeType
.quad .consumeType_end
.int 11
.asciz "consumeType"
.quad consumeLeftValue
.quad .consumeLeftValue_end
.int 16
.asciz "consumeLeftValue"
.quad recursiveStructDeclaration
.quad .recursiveStructDeclaration_end
.int 26
.asciz "recursiveStructDeclaration"
.quad parseHashDirective
.quad .parseHashDirective_end
.int 18
.asciz "parseHashDirective"
.quad parseReturn
.quad .parseReturn_end
.int 11
.asciz "parseReturn"
.quad parseIf
.quad .parseIf_end
.int 7
.asciz "parseIf"
.quad parseElse
.quad .parseElse_end
.int 9
.asciz "parseElse"
.quad parseFor
.quad .parseFor_end
.int 8
.asciz "parseFor"
.quad parseStruct
.quad .parseStruct_end
.int 11
.asciz "parseStruct"
.quad parseFnDecl
.quad .parseFnDecl_end
.int 11
.asciz "parseFnDecl"
.quad parseVariableSet
.quad .parseVariableSet_end
.int 16
.asciz "parseVariableSet"
.quad parseConst
.quad .parseConst_end
.int 10
.asciz "parseConst"
.quad parseContinue
.quad .parseContinue_end
.int 13
.asciz "parseContinue"
.quad parseBreak
.quad .parseBreak_end
.int 10
.asciz "parseBreak"
.quad parseAsync
.quad .parseAsync_end
.int 10
.asciz "parseAsync"
.quad main
.quad .main_end
.int 4
.asciz "main"
.quad 0
.global __data_start
__data_start:
.global GC_min_collect
GC_min_collect:
.quad 256000000
.global VERBOSE_GC
VERBOSE_GC:
.quad 0
.global __Bah_iostream_stdinputBuffer
__Bah_iostream_stdinputBuffer:
.quad .VAR_388
.global __Bah_iostream_stdinputBufferLength
__Bah_iostream_stdinputBufferLength:
.quad 0
.global jError
jError:
.quad .VAR_388
.global BAH_VERSION
BAH_VERSION:
.quad .VAR_391
.global BAH_OS
BAH_OS:
.quad .VAR_392
.global isObjectFile
isObjectFile:
.quad 0
.global isImportFile
isImportFile:
.quad 0
.global isSilent
isSilent:
.quad 0
.global compilerPath
compilerPath:
.quad .VAR_388
.global totalLines
totalLines:
.quad 0
.VAR_ARRAY_395:
.quad 0
.quad 6
.quad 6
.quad 1
.quad 0
.global enclavers
enclavers:
.quad .VAR_ARRAY_395
.VAR_ARRAY_396:
.quad 0
.quad 15
.quad 15
.quad 1
.quad 0
.global syntaxes
syntaxes:
.quad .VAR_ARRAY_396
.VAR_ARRAY_397:
.quad 0
.quad 18
.quad 18
.quad 8
.quad 0
.global keywords
keywords:
.quad .VAR_ARRAY_397
.global memoryAllocFunction
memoryAllocFunction:
.quad .VAR_416
.global memoryAllocFunction_NZ
memoryAllocFunction_NZ:
.quad .VAR_417
.global memoryAllocFunctionSTR
memoryAllocFunctionSTR:
.quad .VAR_418
.global memoryAllocFunctionSTR_NZ
memoryAllocFunctionSTR_NZ:
.quad .VAR_419
.global strCompareFunction
strCompareFunction:
.quad .VAR_420
.global argumentsToArrFunction
argumentsToArrFunction:
.quad .VAR_421
.global strSplitFunction
strSplitFunction:
.quad .VAR_422
.global arraySplitFunction
arraySplitFunction:
.quad .VAR_423
.global threadCreateFunction
threadCreateFunction:
.quad .VAR_424
.VAR_ARRAY_441:
.quad 0
.quad 6
.quad 6
.quad 8
.quad 0
.global ASM_arguments_registers_64
ASM_arguments_registers_64:
.quad .VAR_ARRAY_441
.VAR_ARRAY_448:
.quad 0
.quad 6
.quad 6
.quad 8
.quad 0
.global ASM_arguments_registers_32
ASM_arguments_registers_32:
.quad .VAR_ARRAY_448
.VAR_ARRAY_455:
.quad 0
.quad 6
.quad 6
.quad 8
.quad 0
.global ASM_arguments_registers_16
ASM_arguments_registers_16:
.quad .VAR_ARRAY_455
.VAR_ARRAY_462:
.quad 0
.quad 6
.quad 6
.quad 8
.quad 0
.global ASM_arguments_registers_8
ASM_arguments_registers_8:
.quad .VAR_ARRAY_462
.VAR_ARRAY_469:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_arguments_registers
ASM_arguments_registers:
.quad .VAR_ARRAY_469
.VAR_ARRAY_470:
.quad 0
.quad 16
.quad 16
.quad 8
.quad 0
.global ASM_float_registers
ASM_float_registers:
.quad .VAR_ARRAY_470
.VAR_ARRAY_487:
.quad 0
.quad 16
.quad 16
.quad 8
.quad 0
.global ASM_ymm_registers
ASM_ymm_registers:
.quad .VAR_ARRAY_487
.VAR_ARRAY_504:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_syscall_registers_64
ASM_syscall_registers_64:
.quad .VAR_ARRAY_504
.VAR_ARRAY_509:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_syscall_registers_32
ASM_syscall_registers_32:
.quad .VAR_ARRAY_509
.VAR_ARRAY_514:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_syscall_registers_16
ASM_syscall_registers_16:
.quad .VAR_ARRAY_514
.VAR_ARRAY_519:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_syscall_registers_8
ASM_syscall_registers_8:
.quad .VAR_ARRAY_519
.VAR_ARRAY_524:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_syscall_registers
ASM_syscall_registers:
.quad .VAR_ARRAY_524
.VAR_ARRAY_525:
.quad 0
.quad 10
.quad 10
.quad 8
.quad 0
.global ASM_op_registers_64
ASM_op_registers_64:
.quad .VAR_ARRAY_525
.VAR_ARRAY_536:
.quad 0
.quad 10
.quad 10
.quad 8
.quad 0
.global ASM_op_registers_32
ASM_op_registers_32:
.quad .VAR_ARRAY_536
.VAR_ARRAY_547:
.quad 0
.quad 10
.quad 10
.quad 8
.quad 0
.global ASM_op_registers_16
ASM_op_registers_16:
.quad .VAR_ARRAY_547
.VAR_ARRAY_558:
.quad 0
.quad 10
.quad 10
.quad 8
.quad 0
.global ASM_op_registers_8
ASM_op_registers_8:
.quad .VAR_ARRAY_558
.VAR_ARRAY_569:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_op_registers
ASM_op_registers:
.quad .VAR_ARRAY_569
.VAR_ARRAY_570:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_return_register
ASM_return_register:
.quad .VAR_ARRAY_570
.VAR_ARRAY_575:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_addr_dest_register
ASM_addr_dest_register:
.quad .VAR_ARRAY_575
.VAR_ARRAY_580:
.quad 0
.quad 6
.quad 6
.quad 8
.quad 0
.global ASM_set
ASM_set:
.quad .VAR_ARRAY_580
.VAR_ARRAY_587:
.quad 0
.quad 2
.quad 2
.quad 8
.quad 0
.global ASM_set_parity
ASM_set_parity:
.quad .VAR_ARRAY_587
.VAR_ARRAY_590:
.quad 0
.quad 6
.quad 6
.quad 8
.quad 0
.global ASM_set_above_below_floats
ASM_set_above_below_floats:
.quad .VAR_ARRAY_590
.VAR_ARRAY_597:
.quad 0
.quad 6
.quad 6
.quad 8
.quad 0
.global ASM_set_above_below_unsgined
ASM_set_above_below_unsgined:
.quad .VAR_ARRAY_597
.VAR_ARRAY_604:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_or
ASM_or:
.quad .VAR_ARRAY_604
.VAR_ARRAY_609:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_xor
ASM_xor:
.quad .VAR_ARRAY_609
.VAR_ARRAY_614:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_and
ASM_and:
.quad .VAR_ARRAY_614
.VAR_ARRAY_619:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_shift_left
ASM_shift_left:
.quad .VAR_ARRAY_619
.VAR_ARRAY_624:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_shift_right
ASM_shift_right:
.quad .VAR_ARRAY_624
.VAR_ARRAY_629:
.quad 0
.quad 5
.quad 5
.quad 8
.quad 0
.global ASM_bitwise_ops
ASM_bitwise_ops:
.quad .VAR_ARRAY_629
.VAR_ARRAY_630:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_mov
ASM_mov:
.quad .VAR_ARRAY_630
.VAR_ARRAY_635:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_push
ASM_push:
.quad .VAR_ARRAY_635
.VAR_ARRAY_640:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_pop
ASM_pop:
.quad .VAR_ARRAY_640
.VAR_ARRAY_645:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_add
ASM_add:
.quad .VAR_ARRAY_645
.VAR_ARRAY_650:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_sub
ASM_sub:
.quad .VAR_ARRAY_650
.VAR_ARRAY_655:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_imul
ASM_imul:
.quad .VAR_ARRAY_655
.VAR_ARRAY_660:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_mul
ASM_mul:
.quad .VAR_ARRAY_660
.VAR_ARRAY_665:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_idiv
ASM_idiv:
.quad .VAR_ARRAY_665
.VAR_ARRAY_670:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_div
ASM_div:
.quad .VAR_ARRAY_670
.VAR_ARRAY_675:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_cmp
ASM_cmp:
.quad .VAR_ARRAY_675
.VAR_ARRAY_680:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_cmp_float
ASM_cmp_float:
.quad .VAR_ARRAY_680
.VAR_ARRAY_685:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_unordered_cmp_float
ASM_unordered_cmp_float:
.quad .VAR_ARRAY_685
.VAR_ARRAY_690:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_mov_float
ASM_mov_float:
.quad .VAR_ARRAY_690
.VAR_ARRAY_695:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_add_float
ASM_add_float:
.quad .VAR_ARRAY_695
.VAR_ARRAY_700:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_mul_float
ASM_mul_float:
.quad .VAR_ARRAY_700
.VAR_ARRAY_705:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_sub_float
ASM_sub_float:
.quad .VAR_ARRAY_705
.VAR_ARRAY_710:
.quad 0
.quad 4
.quad 4
.quad 8
.quad 0
.global ASM_div_float
ASM_div_float:
.quad .VAR_ARRAY_710
.global asmRandId
asmRandId:
.quad 0
.VAR_ARRAY_717:
.quad 0
.quad 0
.quad 0
.quad 8
.quad 0
.global cache
cache:
.quad .VAR_ARRAY_717
.global initFnName
initFnName:
.quad .VAR_1442
.global falseSym
falseSym:
.quad .VAR_1443
.quad 1
.quad 0
.quad 0
.quad 0
.quad -1
.byte 0
.byte 0
.byte 0
.byte 0
.quad 1
.quad 1
.global trueSym
trueSym:
.quad .VAR_1444
.quad 1
.quad 0
.quad 0
.quad 0
.quad -1
.byte 0
.byte 0
.byte 0
.byte 0
.quad 1
.quad 1
.global evalFuncNb
evalFuncNb:
.quad 0
.VAR_ARRAY_1664:
.quad 0
.quad 0
.quad 0
.quad 8
.quad 0
.global evalTmpOFiles
evalTmpOFiles:
.quad .VAR_ARRAY_1664
.VAR_ARRAY_3713:
.quad 0
.quad 0
.quad 0
.quad 9
.quad 0
.global BAH_boolean_hashes
BAH_boolean_hashes:
.quad .VAR_ARRAY_3713
.bss
.global __bss_start
__bss_start:
BAH_GC_state:
.zero 104
.global BAH_GC_state
cacheMutex:
.zero 8
.global cacheMutex
parserCtx:
.zero 128
.global parserCtx
gen:
.zero 208
.global gen
initFnGen:
.zero 208
.global initFnGen
globalFuncsGen:
.zero 208
.global globalFuncsGen
compileWaitChannel:
.zero 8
.global compileWaitChannel
.global __bss_end
__bss_end:
.text
.file 0 "/home/alois/Documents/bah-asm/src/main.bah"
.file 1 "/opt/bah-asm/builtin.bah"
.file 2 "/opt/bah-asm/cBinds.bah"
.file 3 "/opt/bah-asm/gc.bah"
.file 4 "/opt/bah-asm/thread.bah"
.global mutex.init
mutex.init:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
movq %rdi, -16(%rbp)
.loc_4_100:
movq $40, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
.loc_4_101:
movq -16(%rbp), %rax
movq (%rax), %rdi
movq $0, %rsi
call pthread_mutex_init
leave
ret
.global .mutex.init_end
.mutex.init_end:
.global mutex.lock
mutex.lock:
pushq %rbp
.loc_4_107:
movq %rdi, %rax
movq (%rax), %rdi
call pthread_mutex_lock
popq %rbp
ret
.global .mutex.lock_end
.mutex.lock_end:
.global mutex.unlock
mutex.unlock:
pushq %rbp
.loc_4_112:
movq %rdi, %rax
movq (%rax), %rdi
call pthread_mutex_unlock
popq %rbp
ret
.global .mutex.unlock_end
.mutex.unlock_end:
.global mutex.destroy
mutex.destroy:
pushq %rbp
.loc_4_117:
movq %rdi, %rax
movq (%rax), %rdi
call pthread_mutex_destroy
popq %rbp
ret
.global .mutex.destroy_end
.mutex.destroy_end:
.global mutexCondition.init
mutexCondition.init:
pushq %rbp
.loc_4_129:
movq %rdi, %rax
movq %rax, %rdi
movq $0, %rsi
call pthread_cond_init
popq %rbp
ret
.global .mutexCondition.init_end
.mutexCondition.init_end:
.global mutexCondition.wait
mutexCondition.wait:
pushq %rbp
.loc_4_138:
movq %rsi, %rdx
.loc_4_139:
movq %rdi, %rax
movq %rax, %rdi
movq %rdx, %rsi
call pthread_cond_wait
popq %rbp
ret
.global .mutexCondition.wait_end
.mutexCondition.wait_end:
.global mutexCondition.send
mutexCondition.send:
pushq %rbp
.loc_4_144:
movq %rdi, %rax
movq %rax, %rdi
call pthread_cond_signal
popq %rbp
ret
.global .mutexCondition.send_end
.mutexCondition.send_end:
.global mutexCondition.destroy
mutexCondition.destroy:
pushq %rbp
.loc_4_149:
movq %rdi, %rax
movq %rax, %rdi
call pthread_cond_destroy
popq %rbp
ret
.global .mutexCondition.destroy_end
.mutexCondition.destroy_end:
.global mutexCondition
mutexCondition:
pushq %rbp
movq %rsp, %rbp
subq $112, %rsp
movq %rdi, -16(%rbp)
.loc_4_156:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -64(%rbp)
vmovdqu %xmm0, -32(%rbp)
pxor %xmm0, %xmm0
vmovdqu %ymm0, -112(%rbp)
vmovdqu %xmm0, -80(%rbp)
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, -64(%rbp)
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, -32(%rbp)
.loc_4_157:
leaq -64(%rbp), %rdi
call mutexCondition.init
.loc_4_158:
movq -16(%rbp), %rdi
vmovdqu -64(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -32(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
leave
ret
.global .mutexCondition_end
.mutexCondition_end:
.global thread.create
thread.create:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
.loc_4_172:
movq -16(%rbp), %rax
movq %rax, -32(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq -32(%rbp), %rdi
movq $0, %rsi
movq (%rax), %rdx
movq $0, %rcx
call GC_thread_create
leave
ret
.global .thread.create_end
.thread.create_end:
.global thread.createWithArg
thread.createWithArg:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_4_178:
movq -16(%rbp), %rax
movq %rax, -48(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq -48(%rbp), %rdi
movq $0, %rsi
movq (%rax), %rdx
movq -32(%rbp), %rcx
call GC_thread_create
leave
ret
.global .thread.createWithArg_end
.thread.createWithArg_end:
.global thread.wait
thread.wait:
pushq %rbp
.loc_4_183:
movq %rdi, %rax
movq (%rax), %rdi
movq $0, %rsi
call GC_thread_join
popq %rbp
ret
.global .thread.wait_end
.thread.wait_end:
.global mutex
mutex:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
.loc_4_189:
pxor %xmm0, %xmm0
movq %xmm0, -16(%rbp)
.loc_4_190:
leaq -16(%rbp), %rdi
call mutex.init
.loc_4_191:
movq -16(%rbp), %rax
leave
ret
.global .mutex_end
.mutex_end:
.global BAH_GC_thread.clean
BAH_GC_thread.clean:
pushq %rbp
.loc_3_41:
call free
popq %rbp
ret
.global .BAH_GC_thread.clean_end
.BAH_GC_thread.clean_end:
.global BAH_GC_state_tag.isPointerInBounds
BAH_GC_state_tag.isPointerInBounds:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_3_151:
movq -32(%rbp), %rdx
cmpq $16777216, %rdx
jnb .IF_NOT_14
.loc_3_152:
movq $0, %rax
leave
ret
.IF_NOT_14:
.loc_3_154:
movq $281474976710656, %rax
cmpq -32(%rbp), %rax
jnb .IF_NOT_16
.loc_3_155:
movq $0, %rax
leave
ret
.IF_NOT_16:
.loc_3_157:
movq -32(%rbp), %rbx
sarq $24, %rbx
movl %ebx, -40(%rbp)
.loc_3_159:
movq -16(%rbp), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_3_160:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_18
movb %al, %r11b
.FOR_LOOP_START_18:
.loc_3_161:
movq -48(%rbp), %rax
movq %rax, %r11
movl -40(%rbp), %edx
movq %r11, %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .IF_NOT_24
.loc_3_162:
movq $1, %rax
leave
ret
.IF_NOT_24:
movq -48(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_18
.FOR_NOT_18:
.loc_3_166:
movq $0, %rax
leave
ret
.global .BAH_GC_state_tag.isPointerInBounds_end
.BAH_GC_state_tag.isPointerInBounds_end:
.global BAH_GC_state_tag.updatePagesBounds
BAH_GC_state_tag.updatePagesBounds:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_3_170:
movq -32(%rbp), %rbx
sarq $24, %rbx
movl %ebx, -40(%rbp)
.loc_3_172:
movq -16(%rbp), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_3_173:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_26
movb %al, %r11b
.FOR_LOOP_START_26:
.loc_3_174:
movq -48(%rbp), %rax
movq %rax, %r11
movl -40(%rbp), %edx
movq %r11, %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .IF_NOT_32
.loc_3_175:
jmp .FOR_NOT_26
.IF_NOT_32:
movq -48(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_26
.FOR_NOT_26:
.loc_3_179:
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_34
.loc_3_180:
movq $16, %rdi
call malloc
movq %rax, -48(%rbp)
.loc_3_181:
movq -48(%rbp), %rdi
movl -40(%rbp), %eax
movq %rax, (%rdi)
.loc_3_182:
movq -16(%rbp), %rax
addq $40, %rax
movq -48(%rbp), %rdi
addq $8, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_3_183:
movq -16(%rbp), %rdi
addq $40, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.IF_NOT_34:
leave
ret
.global .BAH_GC_state_tag.updatePagesBounds_end
.BAH_GC_state_tag.updatePagesBounds_end:
.global BAH_GC_state_tag.allocate
BAH_GC_state_tag.allocate:
pushq %rbp
movq %rsp, %rbp
subq $96, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movb %dl, -33(%rbp)
.loc_3_188:
movq -32(%rbp), %rdi
call malloc
movq %rax, -48(%rbp)
.loc_3_190:
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_37
.loc_3_191:
leaq .VAR_38(%rip), %rdi
leaq .VAR_39(%rip), %rsi
call __Bah_panic
.IF_NOT_37:
.loc_3_195:
movq -16(%rbp), %rax
movq (%rax), %rax
movq %rax, %rbx
addq -32(%rbp), %rbx
movq -16(%rbp), %rdi
movq %rbx, (%rdi)
.loc_3_197:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq -16(%rbp), %rax
addq $32, %rax
movq %rax, %r9
movq %r10, %rdx
movq %r9, %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .IF_NOT_46
.loc_3_198:
movq -16(%rbp), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, %rbx
salq $1, %rbx
movq -16(%rbp), %rdi
addq $32, %rdi
movq %rbx, (%rdi)
.loc_3_199:
movq -16(%rbp), %rax
addq $16, %rax
movq %rax, -96(%rbp)
movq -16(%rbp), %rax
addq $32, %rax
movq $18, %rbx
movq (%rax), %rdx
imulq %rdx, %rbx
movq -96(%rbp), %rax
movq (%rax), %rdi
movq %rbx, %rsi
call realloc
movq -16(%rbp), %rdi
addq $16, %rdi
movq %rax, (%rdi)
.loc_3_200:
movq -16(%rbp), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, %rbx
sarq $1, %rbx
imulq $18, %rbx
movq %rbx, -64(%rbp)
.loc_3_201:
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %rbx
addq -64(%rbp), %rbx
movq %rbx, %rdi
movq $0, %rsi
movq -64(%rbp), %rdx
call memset
.IF_NOT_46:
.loc_3_204:
pxor %xmm0, %xmm0
movq %xmm0, -64(%rbp)
.loc_3_206:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
.loc_3_207:
.FOR_LOOP_START_59:
movq -16(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq -80(%rbp), %rdx
movq %r11, %rax
movq (%rax), %r8
cmpq %r8, %rdx
jnb .FOR_NOT_59
movb %al, %r10b
.loc_3_208:
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %r11
movq -80(%rbp), %rbx
imulq $18, %rbx
addq %r11, %rbx
movq %rbx, -64(%rbp)
.loc_3_209:
movq -64(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_67
.loc_3_210:
jmp .FOR_NOT_59
.IF_NOT_67:
addq $1, -80(%rbp)
jmp .FOR_LOOP_START_59
.FOR_NOT_59:
.loc_3_214:
movq -16(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq -80(%rbp), %rdx
movq %r11, %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .IF_NOT_70
.loc_3_215:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %rbx
addq $-1, %rbx
movq %rbx, -80(%rbp)
.loc_3_216:
movq -80(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_73
movb %al, %r11b
.FOR_LOOP_START_73:
.loc_3_217:
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %r11
movq -80(%rbp), %rbx
imulq $18, %rbx
addq %r11, %rbx
movq %rbx, -64(%rbp)
.loc_3_218:
movq -64(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_81
.loc_3_219:
jmp .FOR_NOT_73
.IF_NOT_81:
subq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_73
.FOR_NOT_73:
.IF_NOT_70:
.loc_3_224:
movq -80(%rbp), %rdx
cmpq $-1, %rdx
jne .IF_NOT_83
.loc_3_225:
leaq .VAR_84(%rip), %rdi
leaq .VAR_85(%rip), %rsi
call __Bah_panic
.IF_NOT_83:
.loc_3_228:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, %rdx
addq $1, (%rdx)
.loc_3_230:
movq -64(%rbp), %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_231:
movq -64(%rbp), %rdi
addq $8, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_232:
movq -64(%rbp), %rdi
addq $17, %rdi
movb -33(%rbp), %dl
movb %dl, (%rdi)
.loc_3_234:
movq -16(%rbp), %rdi
movq -48(%rbp), %rsi
call BAH_GC_state_tag.updatePagesBounds
.loc_3_236:
movq -48(%rbp), %rax
leave
ret
.global .BAH_GC_state_tag.allocate_end
.BAH_GC_state_tag.allocate_end:
.global BAH_GC_state_tag.find
BAH_GC_state_tag.find:
pushq %rbp
movq %rsp, %rbp
subq $112, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_3_240:
movq $0, -48(%rbp)
.loc_3_241:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_3_242:
movq -64(%rbp), %rbx
sarq $1, %rbx
addq -48(%rbp), %rbx
movq %rbx, -80(%rbp)
.loc_3_243:
movq -64(%rbp), %rbx
sarq $2, %rbx
movq %rbx, -96(%rbp)
.loc_3_245:
movb $1, -97(%rbp)
.loc_3_246:
movb $0, -98(%rbp)
.loc_3_248:
.FOR_LOOP_START_88:
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jl .BOOL_AND_89
movq -80(%rbp), %rdx
cmpq -64(%rbp), %rdx
jge .BOOL_AND_89
movb $1, %al
jmp .BOOL_AND_89_END
.BOOL_AND_89:
movb $0, %al
.BOOL_AND_89_END:
cmpb $0, %al
je .FOR_NOT_88
.loc_3_249:
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %r11
movq -80(%rbp), %rbx
imulq $18, %rbx
addq %r11, %rbx
movq %rbx, -112(%rbp)
.loc_3_251:
movq -96(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_95
.loc_3_252:
movq $1, -96(%rbp)
.loc_3_253:
movb $1, -98(%rbp)
.IF_NOT_95:
.loc_3_256:
movq -112(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq -32(%rbp), %rax
cmpq %r10, %rax
jnb .IF_NOT_99
.loc_3_257:
cmpb $0, -98(%rbp)
je .BOOL_AND_100
movb -97(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_100
movb $1, %al
jmp .BOOL_AND_100_END
.BOOL_AND_100:
movb $0, %al
.BOOL_AND_100_END:
cmpb $0, %al
je .IF_NOT_102
.loc_3_258:
jmp .FOR_NOT_88
.IF_NOT_102:
.loc_3_260:
movq -80(%rbp), %rbx
addq -96(%rbp), %rbx
movq %rbx, -80(%rbp)
.loc_3_261:
movb $1, -97(%rbp)
jmp .ELSE_NOT_108
.IF_NOT_99:
.loc_3_262:
movq -112(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq -32(%rbp), %rdx
jnb .ELSE_NOT_106
.loc_3_263:
movb -98(%rbp), %bl
andb -97(%rbp), %bl
cmpb $0, %bl
je .IF_NOT_107
.loc_3_264:
jmp .FOR_NOT_88
.IF_NOT_107:
.loc_3_266:
movq -80(%rbp), %rbx
subq -96(%rbp), %rbx
movq %rbx, -80(%rbp)
.loc_3_267:
movb $0, -97(%rbp)
jmp .ELSE_NOT_108
.ELSE_NOT_106:
.loc_3_268:
.loc_3_269:
movq -112(%rbp), %rax
leave
ret
.ELSE_NOT_108:
movq -96(%rbp), %rbx
sarq $1, %rbx
movq %rbx, -96(%rbp)
jmp .FOR_LOOP_START_88
.FOR_NOT_88:
.loc_3_273:
movq $0, %rax
leave
ret
.global .BAH_GC_state_tag.find_end
.BAH_GC_state_tag.find_end:
.global GC_sort_pointers
GC_sort_pointers:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_3_279:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %r9
movq %r10, %rdx
movq %r9, %rax
movq (%rax), %r8
cmpq %r8, %rdx
jnb .IF_NOT_113
.loc_3_280:
movq $1, %rax
leave
ret
.IF_NOT_113:
.loc_3_283:
movq $-1, %rax
leave
ret
.global .GC_sort_pointers_end
.GC_sort_pointers_end:
.global GC_setHeapSize
GC_setHeapSize:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
movq %rdi, -16(%rbp)
.loc_3_289:
movq -16(%rbp), %rdx
movq %rdx, GC_min_collect(%rip)
.loc_3_290:
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
leave
ret
.global .GC_setHeapSize_end
.GC_setHeapSize_end:
.global GC_thread_wrapper
GC_thread_wrapper:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
.loc_3_297:
movq -16(%rbp), %rdx
movq (%rdx), %rax
movq %rax, %rdx
movq %rdx, -32(%rbp)
.loc_3_299:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_300:
movq $186, %rdi
call syscall
movq -32(%rbp), %rdi
addq $8, %rdi
movq %rax, (%rdi)
.loc_3_301:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
.loc_3_303:
movq -16(%rbp), %rbx
addq $16, %rbx
movq %rbx, %rdx
movq (%rdx), %rax
movq %rax, -48(%rbp)
.loc_3_305:
movq -16(%rbp), %rbx
addq $8, %rbx
movq %rbx, %rdx
movq (%rdx), %rax
movq %rax, %rdi
call *-48(%rbp)
.loc_3_307:
movq -16(%rbp), %rdi
call free
.loc_3_310:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_311:
leaq BAH_GC_state(%rip), %rax
addq $56, %rax
movq -32(%rbp), %rdx
cmpq (%rax), %rdx
jne .IF_NOT_121
.loc_3_312:
movq -32(%rbp), %rax
addq $16, %rax
leaq BAH_GC_state(%rip), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_3_313:
movq -32(%rbp), %rdi
call BAH_GC_thread.clean
jmp .ELSE_NOT_123
.IF_NOT_121:
.loc_3_314:
.loc_3_315:
leaq BAH_GC_state(%rip), %rax
addq $56, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
movq -64(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_124
movb %al, %r11b
.FOR_LOOP_START_124:
.loc_3_316:
movq -64(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq -32(%rbp), %rdx
jne .IF_NOT_131
.loc_3_317:
movq -32(%rbp), %rax
addq $16, %rax
movq -64(%rbp), %rdi
addq $16, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_3_318:
movq -32(%rbp), %rdi
call BAH_GC_thread.clean
.loc_3_319:
jmp .FOR_NOT_124
.IF_NOT_131:
movq -64(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_124
.FOR_NOT_124:
.ELSE_NOT_123:
.loc_3_323:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
leave
ret
.global .GC_thread_wrapper_end
.GC_thread_wrapper_end:
.global GC_thread_sig_handler
GC_thread_sig_handler:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
movq %rdi, -16(%rbp)
.loc_3_328:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_329:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
leave
ret
.global .GC_thread_sig_handler_end
.GC_thread_sig_handler_end:
.global GC_thread_create
GC_thread_create:
pushq %rbp
movq %rsp, %rbp
subq $144, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
movq %rcx, -64(%rbp)
.loc_3_333:
movq $24, %rdi
call malloc
movq %rax, -80(%rbp)
.loc_3_334:
movq -16(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_137
.loc_3_335:
movq -80(%rbp), %rax
movq %rax, %rdx
movq %rdx, -16(%rbp)
.IF_NOT_137:
.loc_3_338:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_339:
leaq BAH_GC_state(%rip), %rax
addq $56, %rax
movq -80(%rbp), %rdi
addq $16, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_3_340:
leaq BAH_GC_state(%rip), %rdi
addq $56, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_341:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
.loc_3_343:
movq $24, %rdi
call malloc
movq %rax, -96(%rbp)
.loc_3_345:
movq -96(%rbp), %rbx
addq $8, %rbx
movq %rbx, -112(%rbp)
.loc_3_346:
movq -96(%rbp), %rbx
addq $16, %rbx
movq %rbx, -128(%rbp)
.loc_3_348:
movq -96(%rbp), %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_349:
movq -112(%rbp), %rdi
movq -64(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_350:
movq -128(%rbp), %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_352:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
leaq GC_thread_wrapper, %rdx
movq -96(%rbp), %rcx
call pthread_create
movl %eax, -136(%rbp)
.loc_3_355:
movq -16(%rbp), %rdx
movq (%rdx), %rax
movq -80(%rbp), %rdi
movq %rax, (%rdi)
.loc_3_357:
movl -136(%rbp), %eax
leave
ret
.global .GC_thread_create_end
.GC_thread_create_end:
.global GC_thread_join
GC_thread_join:
pushq %rbp
.loc_3_361:
call pthread_join
popq %rbp
ret
.global .GC_thread_join_end
.GC_thread_join_end:
.global GC_setStackBase
GC_setStackBase:
pushq %rbp
.loc_3_365:
leaq BAH_GC_state(%rip), %rdi
addq $48, %rdi
movq %rsp, (%rdi)
popq %rbp
ret
.global .GC_setStackBase_end
.GC_setStackBase_end:
.global GC_init
GC_init:
pushq %rbp
movq %rsp, %rbp
subq $176, %rsp
.loc_3_371:
movq $186, %rdi
call syscall
leaq BAH_GC_state(%rip), %rdi
addq $72, %rdi
movq %rax, (%rdi)
.loc_3_372:
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq GC_min_collect(%rip), %rdx
movq %rdx, (%rdi)
.loc_3_374:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -160(%rbp)
vmovdqu %ymm0, -128(%rbp)
vmovdqu %ymm0, -96(%rbp)
vmovdqu %ymm0, -64(%rbp)
vmovdqu %xmm0, -32(%rbp)
movq %xmm0, -16(%rbp)
.loc_3_375:
movl $268435460, -24(%rbp)
.loc_3_377:
leaq -152(%rbp), %rdi
movq $0, %rsi
movq $128, %rdx
call memset
.loc_3_378:
leaq GC_thread_sig_handler, %rax
movq %rax, -160(%rbp)
.loc_3_379:
movl $24, %edi
leaq -160(%rbp), %rsi
movq $0, %rdx
call sigaction
.loc_3_381:
movq $40, %rdi
call malloc
leaq BAH_GC_state(%rip), %rdi
addq $80, %rdi
movq %rax, (%rdi)
.loc_3_382:
movq $48, %rdi
call malloc
leaq BAH_GC_state(%rip), %rdi
addq $88, %rdi
movq %rax, (%rdi)
.loc_3_386:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
movq $0, %rsi
call pthread_mutex_init
.loc_3_387:
leaq BAH_GC_state(%rip), %rax
addq $88, %rax
movq (%rax), %rax
movq %rax, %rdi
movq $0, %rsi
call pthread_cond_init
.loc_3_390:
leaq BAH_GC_state(%rip), %rdi
addq $24, %rdi
movq $0, (%rdi)
.loc_3_391:
leaq BAH_GC_state(%rip), %rdi
addq $32, %rdi
movq $4096, (%rdi)
.loc_3_392:
leaq BAH_GC_state(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, %rbx
imulq $18, %rbx
movq %rbx, -176(%rbp)
.loc_3_393:
movq -176(%rbp), %rdi
call malloc
leaq BAH_GC_state(%rip), %rdi
addq $16, %rdi
movq %rax, (%rdi)
.loc_3_394:
leaq BAH_GC_state(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %rdi
movq $0, %rsi
movq -176(%rbp), %rdx
call memset
leave
ret
.global .GC_init_end
.GC_init_end:
.global GC_markPtr
GC_markPtr:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
.loc_3_411:
movq -16(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_147
.loc_3_412:
leave
ret
.IF_NOT_147:
.loc_3_415:
leaq BAH_GC_state(%rip), %rdi
movq -16(%rbp), %rsi
call BAH_GC_state_tag.isPointerInBounds
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
je .BOOL_OR_148
leaq BAH_GC_state(%rip), %rax
addq $16, %rax
movq -16(%rbp), %rdx
cmpq (%rax), %rdx
jne .BOOL_OR_148_NOT
.BOOL_OR_148:
movb $1, %al
jmp .BOOL_OR_148_END
.BOOL_OR_148_NOT:
movb $0, %al
.BOOL_OR_148_END:
cmpb $0, %al
je .IF_NOT_152
.loc_3_416:
leave
ret
.IF_NOT_152:
.loc_3_419:
leaq BAH_GC_state(%rip), %rdi
movq -16(%rbp), %rsi
call BAH_GC_state_tag.find
movq %rax, -32(%rbp)
.loc_3_421:
movq -32(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_154
.loc_3_422:
leave
ret
.IF_NOT_154:
.loc_3_425:
movq -32(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_156
.loc_3_426:
leave
ret
.IF_NOT_156:
.loc_3_429:
movq -32(%rbp), %rdi
addq $16, %rdi
movb $1, (%rdi)
.loc_3_431:
movq -32(%rbp), %rax
addq $17, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_160
.loc_3_432:
leaq BAH_GC_state(%rip), %rax
addq $48, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rbx
subq %rbp, %rbx
movq %rbx, %r10
movq %r10, %rdx
cmpq $6000000, %rdx
jb .IF_NOT_164
.loc_3_433:
movq $16, %rdi
call malloc
movq %rax, -48(%rbp)
.loc_3_434:
movq -48(%rbp), %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_435:
leaq BAH_GC_state(%rip), %rax
addq $96, %rax
movq -48(%rbp), %rdi
addq $8, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_3_436:
leaq BAH_GC_state(%rip), %rdi
addq $96, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_437:
leave
ret
.IF_NOT_164:
.loc_3_439:
movq -32(%rbp), %rax
movq (%rax), %rax
movq %rax, %rbx
subq $7, %rbx
addq -16(%rbp), %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq $1, %rdx
call GC_scan
.IF_NOT_160:
leave
ret
.global .GC_markPtr_end
.GC_markPtr_end:
.global GC_scan
GC_scan:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_3_450:
movq -16(%rbp), %rdx
cmpq -32(%rbp), %rdx
jnb .FOR_NOT_168
movb %al, %r11b
.FOR_LOOP_START_168:
.loc_3_451:
movq -16(%rbp), %rdx
movq (%rdx), %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rdi
call GC_markPtr
movq -16(%rbp), %rbx
addq -48(%rbp), %rbx
movq %rbx, -16(%rbp)
movq -16(%rbp), %rdx
cmpq -32(%rbp), %rdx
jb .FOR_LOOP_START_168
.FOR_NOT_168:
leave
ret
.global .GC_scan_end
.GC_scan_end:
.global GC_scanReversed
GC_scanReversed:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_3_460:
movq -32(%rbp), %rax
cmpq -16(%rbp), %rax
jnb .FOR_NOT_172
movb %al, %r11b
.FOR_LOOP_START_172:
.loc_3_461:
movq -16(%rbp), %rdx
movq (%rdx), %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rdi
call GC_markPtr
movq -16(%rbp), %rbx
subq -48(%rbp), %rbx
movq %rbx, -16(%rbp)
movq -32(%rbp), %rax
cmpq -16(%rbp), %rax
jb .FOR_LOOP_START_172
.FOR_NOT_172:
leave
ret
.global .GC_scanReversed_end
.GC_scanReversed_end:
.global GC_stopWorld
GC_stopWorld:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
.loc_3_466:
leaq BAH_GC_state(%rip), %rax
addq $56, %rax
movq (%rax), %rdx
movq %rdx, -16(%rbp)
.loc_3_467:
movq $186, %rdi
call syscall
movq %rax, -32(%rbp)
.loc_3_468:
.FOR_LOOP_START_176:
movq -16(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_176
movb %al, %r11b
.loc_3_469:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq -32(%rbp), %rdx
jne .IF_NOT_182
.loc_3_470:
movq -16(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -16(%rbp)
jmp .FOR_LOOP_START_176
.IF_NOT_182:
.loc_3_472:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movq (%rax), %rax
movl %eax, -56(%rbp)
movl -56(%rbp), %edi
movl $24, %esi
movq $0, %rdx
call sigqueue
movq -16(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -16(%rbp)
jmp .FOR_LOOP_START_176
.FOR_NOT_176:
leave
ret
.global .GC_stopWorld_end
.GC_stopWorld_end:
.global GC_collect
GC_collect:
pushq %rbp
movq %rsp, %rbp
subq $432, %rsp
.loc_3_485:
movq %rdi, -16(%rbp)
.loc_3_486:
movq %rsi, -32(%rbp)
.loc_3_487:
movq %rdx, -48(%rbp)
.loc_3_488:
movq %rcx, -64(%rbp)
.loc_3_489:
movq %r8, -80(%rbp)
.loc_3_490:
movq %r9, -96(%rbp)
.loc_3_491:
movq %r10, -112(%rbp)
.loc_3_492:
movq %r11, -128(%rbp)
.loc_3_493:
movq %r12, -144(%rbp)
.loc_3_494:
movq %r13, -160(%rbp)
.loc_3_495:
movq %r14, -176(%rbp)
.loc_3_496:
movq %r15, -192(%rbp)
.loc_3_497:
movq %rax, -208(%rbp)
.loc_3_498:
movq %rbx, -224(%rbp)
.loc_3_500:
movq %rbp, %rbx
addq $8, %rbx
movq %rbx, -240(%rbp)
.loc_3_502:
movq $186, %rdi
call syscall
movq %rax, %r11
leaq BAH_GC_state(%rip), %rax
addq $72, %rax
movq %r11, %rdx
cmpq (%rax), %rdx
je .IF_NOT_187
.loc_3_504:
leave
ret
.IF_NOT_187:
.loc_3_507:
call GC_stopWorld
.loc_3_509:
.loc_3_517:
leaq BAH_GC_state(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -416(%rbp)
leaq BAH_GC_state(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq -416(%rbp), %rdi
movq %rax, %rsi
movq $18, %rdx
leaq GC_sort_pointers, %rcx
call qsort
.loc_3_524:
movq -16(%rbp), %rdi
call GC_markPtr
.loc_3_525:
movq -32(%rbp), %rdi
call GC_markPtr
.loc_3_526:
movq -48(%rbp), %rdi
call GC_markPtr
.loc_3_527:
movq -64(%rbp), %rdi
call GC_markPtr
.loc_3_528:
movq -80(%rbp), %rdi
call GC_markPtr
.loc_3_529:
movq -96(%rbp), %rdi
call GC_markPtr
.loc_3_530:
movq -112(%rbp), %rdi
call GC_markPtr
.loc_3_531:
movq -128(%rbp), %rdi
call GC_markPtr
.loc_3_532:
movq -144(%rbp), %rdi
call GC_markPtr
.loc_3_533:
movq -160(%rbp), %rdi
call GC_markPtr
.loc_3_534:
movq -176(%rbp), %rdi
call GC_markPtr
.loc_3_535:
movq -192(%rbp), %rdi
call GC_markPtr
.loc_3_536:
movq -208(%rbp), %rdi
call GC_markPtr
.loc_3_537:
movq -224(%rbp), %rdi
call GC_markPtr
.loc_3_540:
leaq __data_start(%rip), %rax
movq %rax, -256(%rbp)
.loc_3_541:
leaq __bss_start(%rip), %rax
movq %rax, -272(%rbp)
.loc_3_542:
leaq __bss_end(%rip), %rax
movq %rax, -288(%rbp)
.loc_3_544:
movq -256(%rbp), %rdi
movq -272(%rbp), %rsi
movq $1, %rdx
call GC_scan
.loc_3_545:
movq -272(%rbp), %rdi
movq -288(%rbp), %rsi
movq $1, %rdx
call GC_scan
.loc_3_549:
leaq BAH_GC_state(%rip), %rax
addq $48, %rax
movq (%rax), %rax
movq %rax, %rdi
movq -240(%rbp), %rsi
movq $8, %rdx
call GC_scanReversed
.loc_3_553:
leaq BAH_GC_state(%rip), %rax
addq $56, %rax
movq (%rax), %rdx
movq %rdx, -304(%rbp)
.loc_3_554:
movq -304(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_194
movb %al, %r11b
.FOR_LOOP_START_194:
.loc_3_555:
movq $0, -320(%rbp)
.loc_3_556:
movq $0, -336(%rbp)
.loc_3_557:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -400(%rbp)
vmovdqu %xmm0, -368(%rbp)
movq %xmm0, -352(%rbp)
.loc_3_558:
movq -304(%rbp), %rax
movq (%rax), %rdi
leaq -400(%rbp), %rsi
call pthread_getattr_np
.loc_3_559:
leaq -400(%rbp), %rdi
leaq -336(%rbp), %rsi
leaq -320(%rbp), %rdx
call pthread_attr_getstack
.loc_3_560:
leaq -400(%rbp), %rdi
call pthread_attr_destroy
.loc_3_561:
movq -320(%rbp), %rbx
subq $8, %rbx
addq -336(%rbp), %rbx
movq %rbx, -416(%rbp)
movq -416(%rbp), %rdi
movq -336(%rbp), %rsi
movq $8, %rdx
call GC_scanReversed
movq -304(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -304(%rbp)
movq -304(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_194
.FOR_NOT_194:
.loc_3_564:
movq $0, -320(%rbp)
.loc_3_565:
movq $0, -336(%rbp)
.loc_3_567:
movq $0, -352(%rbp)
.loc_3_568:
leaq BAH_GC_state(%rip), %rax
addq $96, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .FOR_NOT_200
movb %al, %r10b
.FOR_LOOP_START_200:
.loc_3_569:
leaq BAH_GC_state(%rip), %rax
addq $96, %rax
movq (%rax), %rdx
movq %rdx, -368(%rbp)
.loc_3_570:
leaq BAH_GC_state(%rip), %rdi
addq $96, %rdi
movq $0, (%rdi)
.loc_3_571:
movq -368(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_205
movb %al, %r11b
.FOR_LOOP_START_205:
.loc_3_572:
movq -368(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -416(%rbp)
movq -368(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq -368(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, %rbx
subq $7, %rbx
addq -432(%rbp), %rbx
movq -416(%rbp), %rax
movq (%rax), %rdi
movq %rbx, %rsi
movq $1, %rdx
call GC_scan
.loc_3_573:
movq -368(%rbp), %rdx
movq %rdx, -384(%rbp)
.loc_3_574:
movq -368(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -368(%rbp)
.loc_3_575:
movq -384(%rbp), %rdi
call free
.loc_3_576:
addq $1, -352(%rbp)
movq -368(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_205
.FOR_NOT_205:
leaq BAH_GC_state(%rip), %rax
addq $96, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_200
.FOR_NOT_200:
.loc_3_580:
leaq BAH_GC_state(%rip), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -368(%rbp)
.loc_3_581:
movq $0, -384(%rbp)
.FOR_LOOP_START_218:
movq -384(%rbp), %rdx
cmpq -368(%rbp), %rdx
jge .FOR_NOT_218
movb %al, %r11b
.loc_3_582:
leaq BAH_GC_state(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %r11
movq -384(%rbp), %rbx
imulq $18, %rbx
addq %r11, %rbx
movq %rbx, -400(%rbp)
.loc_3_583:
movq -400(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_224
.loc_3_584:
addq $1, -384(%rbp)
jmp .FOR_LOOP_START_218
.IF_NOT_224:
.loc_3_587:
movq -400(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_228
.loc_3_588:
addq $1, -320(%rbp)
.loc_3_589:
movq -400(%rbp), %rax
addq $8, %rax
movq (%rax), %rdi
call free
.loc_3_590:
movq -400(%rbp), %rdi
addq $8, %rdi
movq $0, (%rdi)
.loc_3_591:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %r11
movq -400(%rbp), %rax
movq (%rax), %rdx
movq %r11, %rbx
subq %rdx, %rbx
leaq BAH_GC_state(%rip), %rdi
movq %rbx, (%rdi)
.loc_3_592:
leaq BAH_GC_state(%rip), %rax
addq $24, %rax
movq %rax, %rdx
subq $1, (%rdx)
.loc_3_593:
addq $1, -384(%rbp)
jmp .FOR_LOOP_START_218
.IF_NOT_228:
.loc_3_595:
addq $1, -336(%rbp)
.loc_3_597:
movq -400(%rbp), %rdi
addq $16, %rdi
movb $0, (%rdi)
addq $1, -384(%rbp)
jmp .FOR_LOOP_START_218
.FOR_NOT_218:
.loc_3_600:
leaq BAH_GC_state(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %rdi
movq -368(%rbp), %rsi
movq $18, %rdx
leaq GC_sort_pointers, %rcx
call qsort
.loc_3_602:
leave
ret
.global .GC_collect_end
.GC_collect_end:
.global memoryAlloc
memoryAlloc:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
.loc_3_628:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_629:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %r11
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq %r11, %rdx
cmpq (%rax), %rdx
jb .IF_NOT_236
.loc_3_630:
call GC_collect
.loc_3_631:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %rbx
salq $1, %rbx
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_3_632:
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq GC_min_collect(%rip), %rdx
jnb .IF_NOT_240
.loc_3_633:
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq GC_min_collect(%rip), %rdx
movq %rdx, (%rdi)
.IF_NOT_240:
.IF_NOT_236:
.loc_3_638:
leaq BAH_GC_state(%rip), %rdi
movq -16(%rbp), %rsi
movq $0, %rdx
call BAH_GC_state_tag.allocate
movq %rax, -32(%rbp)
.loc_3_639:
movq -32(%rbp), %rdi
movq $0, %rsi
movq -16(%rbp), %rdx
call memset
.loc_3_641:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
.loc_3_642:
movq -32(%rbp), %rax
leave
ret
.global .memoryAlloc_end
.memoryAlloc_end:
.global memoryAlloc_NZ
memoryAlloc_NZ:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
.loc_3_646:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_647:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %r11
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq %r11, %rdx
cmpq (%rax), %rdx
jb .IF_NOT_245
.loc_3_648:
call GC_collect
.loc_3_649:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %rbx
salq $1, %rbx
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_3_650:
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq GC_min_collect(%rip), %rdx
jnb .IF_NOT_249
.loc_3_651:
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq GC_min_collect(%rip), %rdx
movq %rdx, (%rdi)
.IF_NOT_249:
.IF_NOT_245:
.loc_3_656:
leaq BAH_GC_state(%rip), %rdi
movq -16(%rbp), %rsi
movq $0, %rdx
call BAH_GC_state_tag.allocate
movq %rax, -32(%rbp)
.loc_3_658:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
.loc_3_659:
movq -32(%rbp), %rax
leave
ret
.global .memoryAlloc_NZ_end
.memoryAlloc_NZ_end:
.global memoryRealloc
memoryRealloc:
pushq %rbp
movq %rsp, %rbp
subq $96, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_3_663:
movq -16(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_252
.loc_3_664:
movq -32(%rbp), %rdi
call memoryAlloc
leave
ret
.IF_NOT_252:
.loc_3_667:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_668:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %r11
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq %r11, %rdx
cmpq (%rax), %rdx
jb .IF_NOT_256
.loc_3_669:
call GC_collect
.loc_3_670:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %rbx
salq $1, %rbx
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_3_671:
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq GC_min_collect(%rip), %rdx
jnb .IF_NOT_260
.loc_3_672:
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq GC_min_collect(%rip), %rdx
movq %rdx, (%rdi)
.IF_NOT_260:
.IF_NOT_256:
.loc_3_678:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
call realloc
movq %rax, -48(%rbp)
.loc_3_680:
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_262
.loc_3_681:
leaq .VAR_263(%rip), %rdi
leaq .VAR_264(%rip), %rsi
call __Bah_panic
.IF_NOT_262:
.loc_3_684:
pxor %xmm0, %xmm0
movq %xmm0, -64(%rbp)
.loc_3_685:
leaq BAH_GC_state(%rip), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_265
movb %al, %r11b
.FOR_LOOP_START_265:
.loc_3_686:
leaq BAH_GC_state(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %r11
movq -80(%rbp), %rbx
imulq $18, %rbx
addq %r11, %rbx
movq %rbx, -64(%rbp)
.loc_3_687:
movq -64(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq -16(%rbp), %rdx
jne .IF_NOT_272
.loc_3_688:
jmp .FOR_NOT_265
.IF_NOT_272:
subq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_265
.FOR_NOT_265:
.loc_3_693:
leaq BAH_GC_state(%rip), %rax
addq $32, %rax
movq -80(%rbp), %rdx
cmpq (%rax), %rdx
jne .IF_NOT_274
.loc_3_694:
leaq .VAR_275(%rip), %rdi
leaq .VAR_276(%rip), %rsi
call __Bah_panic
.IF_NOT_274:
.loc_3_697:
movq -64(%rbp), %rax
movq -48(%rbp), %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -96(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rdx
movq -32(%rbp), %rbx
subq %rdx, %rbx
movq -96(%rbp), %rdi
movq $0, %rsi
movq %rbx, %rdx
call memset
.loc_3_699:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %r11
movq -64(%rbp), %rax
movq (%rax), %rdx
movq -32(%rbp), %rbx
subq %rdx, %rbx
addq %r11, %rbx
leaq BAH_GC_state(%rip), %rdi
movq %rbx, (%rdi)
.loc_3_700:
movq -64(%rbp), %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_702:
movq -48(%rbp), %rdx
cmpq -16(%rbp), %rdx
je .IF_NOT_284
.loc_3_703:
movq -64(%rbp), %rdi
addq $8, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.loc_3_704:
leaq BAH_GC_state(%rip), %rdi
movq -48(%rbp), %rsi
call BAH_GC_state_tag.updatePagesBounds
.IF_NOT_284:
.loc_3_707:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
.loc_3_708:
movq -48(%rbp), %rax
leave
ret
.global .memoryRealloc_end
.memoryRealloc_end:
.global memoryAllocSTR
memoryAllocSTR:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
.loc_3_713:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_714:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %r11
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq %r11, %rdx
cmpq (%rax), %rdx
jb .IF_NOT_289
.loc_3_715:
call GC_collect
.loc_3_716:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %rbx
salq $1, %rbx
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_3_717:
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq GC_min_collect(%rip), %rdx
jnb .IF_NOT_293
.loc_3_718:
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq GC_min_collect(%rip), %rdx
movq %rdx, (%rdi)
.IF_NOT_293:
.IF_NOT_289:
.loc_3_723:
leaq BAH_GC_state(%rip), %rdi
movq -16(%rbp), %rsi
movq $1, %rdx
call BAH_GC_state_tag.allocate
movq %rax, -32(%rbp)
.loc_3_724:
movq -32(%rbp), %rdi
movq $0, %rsi
movq -16(%rbp), %rdx
call memset
.loc_3_725:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
.loc_3_726:
movq -32(%rbp), %rax
leave
ret
.global .memoryAllocSTR_end
.memoryAllocSTR_end:
.global memoryAllocSTR_NZ
memoryAllocSTR_NZ:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
.loc_3_730:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_3_731:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %r11
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq %r11, %rdx
cmpq (%rax), %rdx
jb .IF_NOT_298
.loc_3_732:
call GC_collect
.loc_3_733:
leaq BAH_GC_state(%rip), %rax
movq (%rax), %rax
movq %rax, %rbx
salq $1, %rbx
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_3_734:
leaq BAH_GC_state(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq GC_min_collect(%rip), %rdx
jnb .IF_NOT_302
.loc_3_735:
leaq BAH_GC_state(%rip), %rdi
addq $8, %rdi
movq GC_min_collect(%rip), %rdx
movq %rdx, (%rdi)
.IF_NOT_302:
.IF_NOT_298:
.loc_3_740:
leaq BAH_GC_state(%rip), %rdi
movq -16(%rbp), %rsi
movq $1, %rdx
call BAH_GC_state_tag.allocate
movq %rax, -32(%rbp)
.loc_3_742:
movq -16(%rbp), %rbx
subq $1, %rbx
addq -32(%rbp), %rbx
.loc_3_743:
movq %rbx, %rdi
movb $0, (%rdi)
.loc_3_744:
leaq BAH_GC_state(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call pthread_mutex_unlock
.loc_3_745:
movq -32(%rbp), %rax
leave
ret
.global .memoryAllocSTR_NZ_end
.memoryAllocSTR_NZ_end:
.file 5 "/opt/bah-asm/channel.bah"
.file 6 "/opt/bah-asm/queue.bah"
.global queue.insert
queue.insert:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_6_21:
movq $24, %rdi
call memoryAlloc
movq %rax, -48(%rbp)
movq -16(%rbp), %rax
movq -48(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -48(%rbp), %rdi
addq $8, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
addq $8, %rax
movq -48(%rbp), %rdi
addq $16, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_6_27:
movq -16(%rbp), %rax
movq %rax, %rdx
addq $1, (%rdx)
.loc_6_28:
movq -16(%rbp), %rdi
addq $8, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
leave
ret
.global .queue.insert_end
.queue.insert_end:
.global queue.pop
queue.pop:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
.loc_6_90:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_310
.loc_6_91:
movq $0, %rax
leave
ret
.IF_NOT_310:
.loc_6_93:
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
.loc_6_94:
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
addq $16, %rax
movq -16(%rbp), %rdi
addq $8, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_6_95:
movq -16(%rbp), %rax
movq %rax, %rdx
subq $1, (%rdx)
.loc_6_96:
movq -32(%rbp), %rax
leave
ret
.global .queue.pop_end
.queue.pop_end:
.global queue.clear
queue.clear:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
movq %rdi, -16(%rbp)
.loc_6_101:
movq -16(%rbp), %rdi
addq $8, %rdi
movq $0, (%rdi)
.loc_6_102:
movq -16(%rbp), %rdi
movq $0, (%rdi)
leave
ret
.global .queue.clear_end
.queue.clear_end:
.global channel.send
channel.send:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_5_24:
movq -16(%rbp), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_5_25:
movq -16(%rbp), %rax
addq $160, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $-1, %rdx
je .IF_NOT_320
.loc_5_26:
.FOR_LOOP_START_321:
movq -16(%rbp), %rax
addq $152, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq -16(%rbp), %rax
addq $160, %rax
movq %rax, -48(%rbp)
movq %r9, %rdx
movq -48(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .FOR_NOT_321
movb %al, %r8b
.loc_5_27:
movq -16(%rbp), %rax
addq $136, %rax
movq %rax, %rdx
addq $1, (%rdx)
.loc_5_28:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, -48(%rbp)
movq -16(%rbp), %rax
movq -48(%rbp), %rdi
movq %rax, %rsi
call pthread_cond_wait
.loc_5_29:
movq -16(%rbp), %rax
addq $136, %rax
movq %rax, %r11
movq %r11, %rdx
subq $1, (%rdx)
jmp .FOR_LOOP_START_321
.FOR_NOT_321:
.IF_NOT_320:
.loc_5_32:
movq -16(%rbp), %rax
addq $152, %rax
movq (%rax), %rdi
movq -32(%rbp), %rsi
call queue.insert
.loc_5_33:
movq -16(%rbp), %rax
addq $144, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jle .IF_NOT_335
.loc_5_34:
movq -16(%rbp), %rax
addq $88, %rax
movq %rax, %rdi
call pthread_cond_signal
.IF_NOT_335:
.loc_5_36:
movq -16(%rbp), %rax
movq %rax, %rdi
call pthread_mutex_unlock
leave
ret
.global .channel.send_end
.channel.send_end:
.global channel.sendAny
channel.sendAny:
pushq %rbp
movq %rsp, %rbp
subq $80, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_5_40:
movq -16(%rbp), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_5_41:
movq -16(%rbp), %rax
addq $160, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $-1, %rdx
je .IF_NOT_342
.loc_5_42:
.FOR_LOOP_START_343:
movq -16(%rbp), %rax
addq $152, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq -16(%rbp), %rax
addq $160, %rax
movq %rax, -80(%rbp)
movq %r9, %rdx
movq -80(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .FOR_NOT_343
movb %al, %r8b
.loc_5_43:
movq -16(%rbp), %rax
addq $136, %rax
movq %rax, %rdx
addq $1, (%rdx)
.loc_5_44:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, -80(%rbp)
movq -16(%rbp), %rax
movq -80(%rbp), %rdi
movq %rax, %rsi
call pthread_cond_wait
.loc_5_45:
movq -16(%rbp), %rax
addq $136, %rax
movq %rax, %r11
movq %r11, %rdx
subq $1, (%rdx)
jmp .FOR_LOOP_START_343
.FOR_NOT_343:
.IF_NOT_342:
.loc_5_48:
movq -48(%rbp), %rdi
call memoryAlloc
movq %rax, -64(%rbp)
.loc_5_49:
movq -64(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call memcpy
.loc_5_50:
movq -16(%rbp), %rax
addq $152, %rax
movq (%rax), %rdi
movq -64(%rbp), %rsi
call queue.insert
.loc_5_51:
movq -16(%rbp), %rax
addq $144, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jle .IF_NOT_357
.loc_5_52:
movq -16(%rbp), %rax
addq $88, %rax
movq %rax, %rdi
call pthread_cond_signal
.IF_NOT_357:
.loc_5_54:
movq -16(%rbp), %rax
movq %rax, %rdi
call pthread_mutex_unlock
leave
ret
.global .channel.sendAny_end
.channel.sendAny_end:
.global channel.receive
channel.receive:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
.loc_5_61:
movq -16(%rbp), %rax
movq %rax, %rdi
call pthread_mutex_lock
.loc_5_62:
.FOR_LOOP_START_361:
movq -16(%rbp), %rax
addq $152, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $0, %rdx
jne .FOR_NOT_361
movb %al, %r8b
.loc_5_63:
movq -16(%rbp), %rax
addq $144, %rax
movq %rax, %rdx
addq $1, (%rdx)
.loc_5_64:
movq -16(%rbp), %rax
addq $88, %rax
movq %rax, -48(%rbp)
movq -16(%rbp), %rax
movq -48(%rbp), %rdi
movq %rax, %rsi
call pthread_cond_wait
.loc_5_65:
movq -16(%rbp), %rax
addq $144, %rax
movq %rax, %r11
movq %r11, %rdx
subq $1, (%rdx)
jmp .FOR_LOOP_START_361
.FOR_NOT_361:
.loc_5_67:
movq -16(%rbp), %rax
addq $152, %rax
movq (%rax), %rdi
call queue.pop
movq %rax, -32(%rbp)
.loc_5_68:
movq -16(%rbp), %rax
addq $136, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jle .IF_NOT_374
.loc_5_69:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, %rdi
call pthread_cond_signal
.IF_NOT_374:
.loc_5_71:
movq -16(%rbp), %rax
movq %rax, %rdi
call pthread_mutex_unlock
.loc_5_76:
movq -32(%rbp), %rax
leave
ret
.global .channel.receive_end
.channel.receive_end:
.global channel.destroy
channel.destroy:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
movq %rdi, -16(%rbp)
.loc_5_81:
movq -16(%rbp), %rax
movq %rax, %rdi
call pthread_mutex_destroy
.loc_5_82:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, %rdi
call pthread_cond_destroy
.loc_5_83:
movq -16(%rbp), %rax
addq $88, %rax
movq %rax, %rdi
call pthread_cond_destroy
leave
ret
.global .channel.destroy_end
.channel.destroy_end:
.global channel.len
channel.len:
pushq %rbp
.loc_5_89:
movq %rdi, %rax
addq $152, %rax
movq (%rax), %rax
movq (%rax), %rdx
.loc_5_90:
movq %rdx, %rax
popq %rbp
ret
.global .channel.len_end
.channel.len_end:
.global channel
channel:
pushq %rbp
movq %rsp, %rbp
subq $176, %rsp
.loc_5_98:
movq $168, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq -16(%rbp), %rdi
addq $160, %rdi
movq $-1, (%rdi)
movq -16(%rbp), %rdi
addq $144, %rdi
movq $0, (%rdi)
movq -16(%rbp), %rdi
addq $136, %rdi
movq $0, (%rdi)
movq -16(%rbp), %rdi
addq $88, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -64(%rbp)
vmovdqu %xmm0, -32(%rbp)
vmovdqu -64(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -32(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
movq -16(%rbp), %rdi
addq $40, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -112(%rbp)
vmovdqu %xmm0, -80(%rbp)
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
movq -16(%rbp), %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -160(%rbp)
movq %xmm0, -128(%rbp)
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -128(%rbp), %xmm1
movq %xmm1, (%rdi)
.loc_5_99:
movq -16(%rbp), %rax
movq %rax, %rdi
movq $0, %rsi
call pthread_mutex_init
.loc_5_100:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, %rdi
movq $0, %rsi
call pthread_cond_init
.loc_5_101:
movq -16(%rbp), %rax
addq $88, %rax
movq %rax, %rdi
movq $0, %rsi
call pthread_cond_init
.loc_5_102:
movq $16, %rdi
call memoryAlloc
movq %rax, -176(%rbp)
movq -176(%rbp), %rdi
addq $8, %rdi
movq $0, (%rdi)
movq -176(%rbp), %rdi
movq $0, (%rdi)
movq -16(%rbp), %rdi
addq $152, %rdi
movq -176(%rbp), %rdx
movq %rdx, (%rdi)
.loc_5_104:
movq -16(%rbp), %rax
leave
ret
.global .channel_end
.channel_end:
.global setChanCap
setChanCap:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rsi, -32(%rbp)
.loc_5_109:
.loc_5_110:
movq %rdi, %rdi
addq $160, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
leave
ret
.global .setChanCap_end
.setChanCap_end:
.file 7 "/opt/bah-asm/iostream.bah"
.file 8 "/opt/bah-asm/string.bah"
.file 9 "/opt/bah-asm/time.bah"
.file 10 "/opt/bah-asm/json.bah"
.file 11 "/opt/bah-asm/reflect.bah"
.file 12 "/opt/bah-asm/rope.bah"
.file 13 "/opt/bah-asm/object.bah"
.file 14 "/opt/bah-asm/path.bah"
.file 15 "/opt/bah-asm/exec.bah"
.file 16 "/opt/bah-asm/flags.bah"
.file 17 "/opt/bah-asm/dl.bah"
.file 18 "/home/alois/Documents/bah-asm/src/lexer.bah"
.file 19 "/home/alois/Documents/bah-asm/src/gen_asm_linux_64.bah"
.file 20 "/home/alois/Documents/bah-asm/src/globals.bah"
.global tokToInt
tokToInt:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
movq %rdi, -16(%rbp)
.loc_20_12:
movq -16(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq $2, %rax
cmpq %r11, %rax
jnb .BOOL_AND_425
movq -16(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $48, %dl
jne .BOOL_AND_425
movq -16(%rbp), %rax
addq $4, %rax
addq $1, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
cmpb $120, %dl
jne .BOOL_AND_425
movb $1, %al
jmp .BOOL_AND_425_END
.BOOL_AND_425:
movb $0, %al
.BOOL_AND_425_END:
cmpb $0, %al
je .IF_NOT_432
.loc_20_13:
movq -16(%rbp), %rdi
call hexToInt
leave
ret
.IF_NOT_432:
.loc_20_16:
movq -16(%rbp), %rdi
call strToInt
leave
ret
.global .tokToInt_end
.tokToInt_end:
.global tokToUint
tokToUint:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
movq %rdi, -16(%rbp)
.loc_20_20:
movq -16(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq $2, %rax
cmpq %r11, %rax
jnb .BOOL_AND_433
movq -16(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $48, %dl
jne .BOOL_AND_433
movq -16(%rbp), %rax
addq $4, %rax
addq $1, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
cmpb $120, %dl
jne .BOOL_AND_433
movb $1, %al
jmp .BOOL_AND_433_END
.BOOL_AND_433:
movb $0, %al
.BOOL_AND_433_END:
cmpb $0, %al
je .IF_NOT_440
.loc_20_21:
movq -16(%rbp), %rdi
call hexToUint
leave
ret
.IF_NOT_440:
.loc_20_24:
movq -16(%rbp), %rdi
call strToUint
leave
ret
.global .tokToUint_end
.tokToUint_end:
.file 21 "/home/alois/Documents/bah-asm/src/./cache.bah"
.global pathToVarName
pathToVarName:
pushq %rbp
movq %rsp, %rbp
subq $80, %rsp
movq %rdi, -16(%rbp)
.loc_21_25:
movq -16(%rbp), %rdi
call strToArr
movq %rax, -32(%rbp)
.loc_21_26:
movq $0, -48(%rbp)
.FOR_LOOP_START_718:
movq -32(%rbp), %rdi
call __bah_arrayLength
cmpq -48(%rbp), %rax
jle .FOR_NOT_718
movb %al, %r11b
.loc_21_27:
movq -32(%rbp), %rax
movq (%rax), %rax
addq -48(%rbp), %rax
movsbq (%rax), %rax
movq %rax, -64(%rbp)
.loc_21_28:
movq -64(%rbp), %rbx
subq $97, %rbx
movq %rbx, -64(%rbp)
.loc_21_29:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jge .IF_NOT_721
.loc_21_30:
movq $0, %rbx
subq -64(%rbp), %rbx
movq %rbx, -64(%rbp)
.IF_NOT_721:
.loc_21_32:
movq $25, %rbx
movq -64(%rbp), %rax
cqto
idivq %rbx
movq %rdx, -64(%rbp)
.loc_21_33:
movq -64(%rbp), %rbx
addq $97, %rbx
movq %rbx, -64(%rbp)
.loc_21_34:
movq -64(%rbp), %rax
movb %al, -65(%rbp)
movq -32(%rbp), %rdi
movq -48(%rbp), %rsi
call __Bah_realocate_arr
movq -32(%rbp), %rdi
movq (%rdi), %rdi
addq -48(%rbp), %rdi
movb -65(%rbp), %dl
movb %dl, (%rdi)
addq $1, -48(%rbp)
jmp .FOR_LOOP_START_718
.FOR_NOT_718:
.loc_21_36:
movq -32(%rbp), %rdi
call arrToStr
leave
ret
.global .pathToVarName_end
.pathToVarName_end:
.global readCache
readCache:
pushq %rbp
movq %rsp, %rbp
subq $96, %rsp
.loc_21_42:
call mutex
movq %rax, cacheMutex(%rip)
.loc_21_43:
pxor %xmm0, %xmm0
vmovdqu %xmm0, -16(%rbp)
.loc_21_44:
leaq .VAR_394(%rip), %rax
movq %rax, -32(%rbp)
leaq .VAR_724(%rip), %rax
movq %rax, -48(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -48(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -64(%rbp)
call memoryAllocSTR_NZ
subq $5, -64(%rbp)
movq -64(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -80(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -64(%rbp)
movq %rdx, -96(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq -64(%rbp), %rdi
addq %rdx, %rdi
movq -48(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -64(%rbp)
movq %rdx, -96(%rbp)
call memcpy
leaq -16(%rbp), %rdi
movq -80(%rbp), %rsi
leaq .VAR_729(%rip), %rdx
call fileStream.open
.loc_21_45:
leaq -16(%rbp), %rdi
call fileStream.isValid
movb %al, -17(%rbp)
movb -17(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
je .BOOL_OR_730
leaq -16(%rbp), %rdi
call fileStream.getSize
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .BOOL_OR_730_NOT
.BOOL_OR_730:
movb $1, %al
jmp .BOOL_OR_730_END
.BOOL_OR_730_NOT:
movb $0, %al
.BOOL_OR_730_END:
cmpb $0, %al
je .IF_NOT_735
.loc_21_46:
leaq .VAR_394(%rip), %rax
movq %rax, -32(%rbp)
leaq .VAR_737(%rip), %rax
movq %rax, -48(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -48(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -64(%rbp)
call memoryAllocSTR_NZ
subq $5, -64(%rbp)
movq -64(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -80(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -64(%rbp)
movq %rdx, -96(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq -64(%rbp), %rdi
addq %rdx, %rdi
movq -48(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -64(%rbp)
movq %rdx, -96(%rbp)
call memcpy
movq -80(%rbp), %rdi
movl $1792, %esi
call makeDir
.loc_21_47:
leaq .VAR_394(%rip), %rax
movq %rax, -32(%rbp)
leaq .VAR_724(%rip), %rax
movq %rax, -48(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -48(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -64(%rbp)
call memoryAllocSTR_NZ
subq $5, -64(%rbp)
movq -64(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -80(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -64(%rbp)
movq %rdx, -96(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq -64(%rbp), %rdi
addq %rdx, %rdi
movq -48(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -64(%rbp)
movq %rdx, -96(%rbp)
call memcpy
leaq -16(%rbp), %rdi
movq -80(%rbp), %rsi
call fileStream.createFile
.loc_21_48:
leave
ret
.IF_NOT_735:
.loc_21_50:
leaq -16(%rbp), %rdi
call fileStream.getSize
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jle .IF_NOT_750
.loc_21_51:
leaq -16(%rbp), %rdi
call fileStream.readBytes
movq %rax, %rdi
call fromObject
movq %rax, cache(%rip)
.loc_21_53:
leaq -16(%rbp), %rdi
call fileStream.close
.IF_NOT_750:
leave
ret
.global .readCache_end
.readCache_end:
.global getCacheFile
getCacheFile:
pushq %rbp
movq %rsp, %rbp
subq $80, %rsp
movq %rdi, -16(%rbp)
.loc_21_59:
leaq cacheMutex(%rip), %rdi
call mutex.lock
.loc_21_60:
movq cache(%rip), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_754
.loc_21_61:
leaq cacheMutex(%rip), %rdi
call mutex.unlock
.loc_21_62:
movq $0, %rax
leave
ret
.IF_NOT_754:
.loc_21_64:
movq $0, -32(%rbp)
.FOR_LOOP_START_755:
movq cache(%rip), %rdi
call __bah_arrayLength
cmpq -32(%rbp), %rax
jle .FOR_NOT_755
movb %al, %r11b
.loc_21_65:
movq -32(%rbp), %rbx
salq $3, %rbx
movq cache(%rip), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_21_66:
movq -48(%rbp), %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rdi
movq -16(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_759
.loc_21_67:
leaq cacheMutex(%rip), %rdi
call mutex.unlock
.loc_21_68:
movq -48(%rbp), %rax
leave
ret
.IF_NOT_759:
addq $1, -32(%rbp)
jmp .FOR_LOOP_START_755
.FOR_NOT_755:
.loc_21_71:
leaq cacheMutex(%rip), %rdi
call mutex.unlock
.loc_21_72:
movq $0, %rax
leave
ret
.global .getCacheFile_end
.getCacheFile_end:
.global updateCacheFile
updateCacheFile:
pushq %rbp
movq %rsp, %rbp
subq $96, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_21_77:
movq -16(%rbp), %rax
movq (%rax), %rdi
call getLastModified
movq -16(%rbp), %rdi
addq $8, %rdi
movq %rax, (%rdi)
.loc_21_78:
movq -16(%rbp), %rdi
addq $16, %rdi
movq BAH_VERSION(%rip), %rdx
movq %rdx, (%rdi)
.loc_21_79:
call getTimeUnix
movq -16(%rbp), %rdi
addq $24, %rdi
movq %rax, (%rdi)
.loc_21_81:
movq -16(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_764
.loc_21_82:
movq $40, %rdi
call memoryAlloc
movq %rax, -48(%rbp)
movq $16, 24(%rax)
movq -16(%rbp), %rdi
addq $32, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.IF_NOT_764:
.loc_21_85:
movq $0, -48(%rbp)
.FOR_LOOP_START_765:
movq -32(%rbp), %rdi
call __bah_arrayLength
cmpq -48(%rbp), %rax
jle .FOR_NOT_765
movb %al, %r11b
.loc_21_86:
pxor %xmm0, %xmm0
vmovdqu %xmm0, -64(%rbp)
movq -48(%rbp), %rbx
salq $3, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
movq -48(%rbp), %rbx
salq $3, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rdi
call getLastModified
movq %rax, -56(%rbp)
movq -16(%rbp), %rdi
addq $32, %rdi
movq (%rdi), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rdi
movq -48(%rbp), %rsi
call __Bah_realocate_arr
movq -96(%rbp), %rdi
movq -48(%rbp), %rbx
salq $4, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -64(%rbp), %xmm0
vmovdqu %xmm0, (%rdi)
addq $1, -48(%rbp)
jmp .FOR_LOOP_START_765
.FOR_NOT_765:
leave
ret
.global .updateCacheFile_end
.updateCacheFile_end:
.global makeCacheFile
makeCacheFile:
pushq %rbp
movq %rsp, %rbp
subq $128, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_21_96:
movq $40, %rdi
call memoryAlloc
movq %rax, -48(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -64(%rbp)
movq $16, 24(%rax)
movq -48(%rbp), %rdi
addq $32, %rdi
movq -64(%rbp), %rdx
movq %rdx, (%rdi)
.loc_21_97:
movq -48(%rbp), %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
.loc_21_98:
movq -48(%rbp), %rdi
addq $16, %rdi
movq BAH_VERSION(%rip), %rdx
movq %rdx, (%rdi)
.loc_21_99:
call getTimeUnix
movq -48(%rbp), %rdi
addq $24, %rdi
movq %rax, (%rdi)
.loc_21_100:
movq -16(%rbp), %rdi
call getLastModified
movq -48(%rbp), %rdi
addq $8, %rdi
movq %rax, (%rdi)
.loc_21_102:
movq $0, -80(%rbp)
.FOR_LOOP_START_769:
movq -32(%rbp), %rdi
call __bah_arrayLength
cmpq -80(%rbp), %rax
jle .FOR_NOT_769
movb %al, %r11b
.loc_21_103:
pxor %xmm0, %xmm0
vmovdqu %xmm0, -96(%rbp)
movq -80(%rbp), %rbx
salq $3, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rdx
movq %rdx, -96(%rbp)
movq -80(%rbp), %rbx
salq $3, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -112(%rbp)
movq -112(%rbp), %rdi
call getLastModified
movq %rax, -88(%rbp)
movq -48(%rbp), %rdi
addq $32, %rdi
movq (%rdi), %rax
movq %rax, -128(%rbp)
movq -128(%rbp), %rdi
movq -80(%rbp), %rsi
call __Bah_realocate_arr
movq -128(%rbp), %rdi
movq -80(%rbp), %rbx
salq $4, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -96(%rbp), %xmm0
vmovdqu %xmm0, (%rdi)
addq $1, -80(%rbp)
jmp .FOR_LOOP_START_769
.FOR_NOT_769:
.loc_21_109:
leaq cacheMutex(%rip), %rdi
call mutex.lock
.loc_21_110:
movq cache(%rip), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_775
.loc_21_111:
movq $40, %rdi
call memoryAlloc
movq %rax, -96(%rbp)
movq $8, 24(%rax)
movq -96(%rbp), %rdx
movq %rdx, cache(%rip)
.IF_NOT_775:
.loc_21_113:
movq cache(%rip), %rbx
movq %rbx, -112(%rbp)
movq cache(%rip), %rdi
call __bah_arrayLength
movq %rax, -128(%rbp)
movq -112(%rbp), %rdi
movq -128(%rbp), %rsi
call __Bah_realocate_arr
movq -112(%rbp), %rdi
movq -128(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.loc_21_114:
leaq cacheMutex(%rip), %rdi
call mutex.unlock
leave
ret
.global .makeCacheFile_end
.makeCacheFile_end:
.global writeCache
writeCache:
pushq %rbp
movq %rsp, %rbp
subq $608, %rsp
.loc_21_120:
pxor %xmm0, %xmm0
vmovdqu %xmm0, -16(%rbp)
.loc_21_121:
leaq .VAR_394(%rip), %rax
movq %rax, -544(%rbp)
leaq .VAR_724(%rip), %rax
movq %rax, -560(%rbp)
movl $5, %edi
movq -544(%rbp), %rbx
addl (%rbx), %edi
movq -560(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -576(%rbp)
call memoryAllocSTR_NZ
subq $5, -576(%rbp)
movq -576(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -592(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -544(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -576(%rbp)
movq %rdx, -608(%rbp)
call memcpy
movq -608(%rbp), %rdx
movq -576(%rbp), %rdi
addq %rdx, %rdi
movq -560(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -576(%rbp)
movq %rdx, -608(%rbp)
call memcpy
leaq -16(%rbp), %rdi
movq -592(%rbp), %rsi
leaq .VAR_784(%rip), %rdx
call fileStream.open
.loc_21_122:
movq $40, -96(%rbp)
leaq .VAR_785(%rip), %rdx
movq %rdx, -88(%rbp)
movq $1, -72(%rbp)
movq $40, -176(%rbp)
leaq .VAR_786(%rip), %rdx
movq %rdx, -168(%rbp)
movq $0, -152(%rbp)
movq $0, -144(%rbp)
movq $1, -136(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -192(%rbp)
movq -192(%rbp), %rdi
addq $24, %rdi
movq $72, (%rdi)
movq -192(%rbp), %rdi
addq $8, %rdi
movq $5, (%rdi)
movq -192(%rbp), %rdi
addq $16, %rdi
movq $5, (%rdi)
movq $360, %rdi
call memoryAlloc
movq -192(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -192(%rbp), %rdx
movq %rdx, -128(%rbp)
movq $8, -272(%rbp)
leaq .VAR_787(%rip), %rdx
movq %rdx, -264(%rbp)
movq $0, -248(%rbp)
movq $0, -240(%rbp)
movq $0, -232(%rbp)
movq $0, -224(%rbp)
movq $0, -216(%rbp)
movq -192(%rbp), %rdi
movq (%rdi), %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -208(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_788(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $0, (%rdi)
movq $8, -352(%rbp)
leaq .VAR_789(%rip), %rdx
movq %rdx, -344(%rbp)
movq $0, -328(%rbp)
movq $0, -320(%rbp)
movq $0, -312(%rbp)
movq $0, -304(%rbp)
movq $0, -296(%rbp)
movq -192(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -320(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -288(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_790(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $8, (%rdi)
movq -192(%rbp), %rdi
movq (%rdi), %rdi
addq $144, %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -208(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_791(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $16, (%rdi)
movq -192(%rbp), %rdi
movq (%rdi), %rdi
addq $216, %rdi
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -320(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -288(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_792(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $24, (%rdi)
movq $40, -432(%rbp)
leaq .VAR_793(%rip), %rdx
movq %rdx, -424(%rbp)
movq $1, -408(%rbp)
movq $16, -512(%rbp)
leaq .VAR_794(%rip), %rdx
movq %rdx, -504(%rbp)
movq $0, -488(%rbp)
movq $0, -480(%rbp)
movq $1, -472(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -528(%rbp)
movq -528(%rbp), %rdi
addq $24, %rdi
movq $72, (%rdi)
movq -528(%rbp), %rdi
addq $8, %rdi
movq $2, (%rdi)
movq -528(%rbp), %rdi
addq $16, %rdi
movq $2, (%rdi)
movq $144, %rdi
call memoryAlloc
movq -528(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -528(%rbp), %rdx
movq %rdx, -464(%rbp)
movq -528(%rbp), %rdi
movq (%rdi), %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -208(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_795(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $0, (%rdi)
movq -528(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -320(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -288(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_790(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $8, (%rdi)
movq $0, -456(%rbp)
leaq -512(%rbp), %rdx
movq %rdx, -400(%rbp)
movq $0, -392(%rbp)
movq $0, -384(%rbp)
movq $0, -376(%rbp)
movq -192(%rbp), %rdi
movq (%rdi), %rdi
addq $288, %rdi
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -400(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -368(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_797(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $32, (%rdi)
movq $0, -120(%rbp)
leaq -176(%rbp), %rdx
movq %rdx, -64(%rbp)
movq $0, -56(%rbp)
movq $0, -48(%rbp)
movq $0, -40(%rbp)
leaq .VAR_737(%rip), %rdx
movq %rdx, -80(%rbp)
movq cache(%rip), %rdx
movq %rdx, -32(%rbp)
subq $80, %rsp
movq %rsp, %r10
vmovdqu -96(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -64(%rbp), %ymm2
vmovdqu %ymm2, (%r10)
addq $32, %r10
movq -32(%rbp), %xmm2
movq %xmm2, (%r10)
call toObject
addq $80, %rsp
leaq -16(%rbp), %rdi
movq %rax, %rsi
call fileStream.writeBytes
.loc_21_123:
leaq -16(%rbp), %rdi
call fileStream.close
leave
ret
.global .writeCache_end
.writeCache_end:
.global isValidCacheFile
isValidCacheFile:
pushq %rbp
movq %rsp, %rbp
subq $160, %rsp
movq %rdi, -16(%rbp)
.loc_21_128:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movq (%rax), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call getLastModified
cmpq -64(%rbp), %rax
je .IF_NOT_804
.loc_21_129:
movq $0, %rax
leave
ret
.IF_NOT_804:
.loc_21_131:
leaq .VAR_394(%rip), %rax
movq %rax, -48(%rbp)
leaq .VAR_806(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call pathToVarName
movq %rax, -96(%rbp)
leaq .VAR_810(%rip), %rax
movq %rax, -112(%rbp)
movl $5, %edi
movq -48(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq -112(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -128(%rbp)
call memoryAllocSTR_NZ
subq $5, -128(%rbp)
movq -128(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -144(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -48(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -128(%rbp)
movq %rdx, -160(%rbp)
call memcpy
movq -160(%rbp), %rdx
movq -128(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -128(%rbp)
movq %rdx, -160(%rbp)
call memcpy
movq -160(%rbp), %rdx
movq -128(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -128(%rbp)
movq %rdx, -160(%rbp)
call memcpy
movq -160(%rbp), %rdx
movq -128(%rbp), %rdi
addq %rdx, %rdi
movq -112(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -128(%rbp)
movq %rdx, -160(%rbp)
call memcpy
movq -144(%rbp), %rdi
call fileExists
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_817
.loc_21_132:
movq $0, %rax
leave
ret
.IF_NOT_817:
.loc_21_135:
movq -16(%rbp), %rax
addq $16, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movq (%rax), %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rdi
movq BAH_VERSION(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_821
.loc_21_136:
movq $0, %rax
leave
ret
.IF_NOT_821:
.loc_21_139:
movq $0, -32(%rbp)
.FOR_LOOP_START_822:
movq -16(%rbp), %rax
addq $32, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movq (%rax), %rdi
call __bah_arrayLength
cmpq -32(%rbp), %rax
jle .FOR_NOT_822
movb %al, %r11b
.loc_21_140:
movq -32(%rbp), %rbx
salq $4, %rbx
movq %rbx, -48(%rbp)
movq -16(%rbp), %rax
addq $32, %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rax
addq -48(%rbp), %rax
movq (%rax), %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rdi
call getLastModified
movq %rax, %r11
movq -32(%rbp), %rbx
salq $4, %rbx
movq %rbx, %r10
movq -16(%rbp), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %r10, %rax
addq $8, %rax
movq %r11, %rdx
cmpq (%rax), %rdx
je .IF_NOT_832
.loc_21_141:
movq $0, %rax
leave
ret
.IF_NOT_832:
addq $1, -32(%rbp)
jmp .FOR_LOOP_START_822
.FOR_NOT_822:
.loc_21_145:
movq $1, %rax
leave
ret
.global .isValidCacheFile_end
.isValidCacheFile_end:
.file 22 "/home/alois/Documents/bah-asm/src/./state.bah"
.global bahType.isFlagSet
bahType.isFlagSet:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rsi, -32(%rbp)
.loc_22_49:
movq %rdi, %rax
addq $56, %rax
movq (%rax), %rax
movq %rax, %rbx
andq -32(%rbp), %rbx
movq %rbx, %rdx
cmpq $0, %rdx
setne %al
leave
ret
.global .bahType.isFlagSet_end
.bahType.isFlagSet_end:
.global bahType.toggleFlag
bahType.toggleFlag:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_22_53:
movq -16(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
movq %rax, %rbx
xorq -32(%rbp), %rbx
movq -16(%rbp), %rdi
addq $56, %rdi
movq %rbx, (%rdi)
leave
ret
.global .bahType.toggleFlag_end
.bahType.toggleFlag_end:
.global bahType.toStr
bahType.toStr:
pushq %rbp
movq %rsp, %rbp
subq $176, %rsp
movq %rdi, -16(%rbp)
.loc_22_57:
movq -16(%rbp), %rax
addq $65, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_840
.loc_22_58:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdi
call bahType.toStr
movq %rax, -64(%rbp)
leaq .VAR_843(%rip), %rax
movq %rax, -80(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -80(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -96(%rbp)
call memoryAllocSTR_NZ
subq $5, -96(%rbp)
movq -96(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -112(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -96(%rbp)
movq %rdx, -128(%rbp)
call memcpy
movq -128(%rbp), %rdx
movq -96(%rbp), %rdi
addq %rdx, %rdi
movq -80(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -96(%rbp)
movq %rdx, -128(%rbp)
call memcpy
movq -112(%rbp), %rax
leave
ret
.IF_NOT_840:
.loc_22_60:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .IF_NOT_851
.loc_22_61:
movq -16(%rbp), %rax
movq (%rax), %rax
leave
ret
.IF_NOT_851:
.loc_22_63:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_856
.loc_22_64:
leaq .VAR_857(%rip), %rax
leave
ret
jmp .ELSE_NOT_1019
.IF_NOT_856:
.loc_22_65:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .ELSE_NOT_861
.loc_22_66:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $8, %rdx
jne .IF_NOT_865
.loc_22_67:
leaq .VAR_789(%rip), %rax
leave
ret
.IF_NOT_865:
.loc_22_69:
leaq .VAR_789(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rbx
salq $3, %rbx
movq %rbx, -112(%rbp)
movq -112(%rbp), %rdi
call uintToStr
movq %rax, -128(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -128(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -144(%rbp)
call memoryAllocSTR_NZ
subq $5, -144(%rbp)
movq -144(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -160(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -176(%rbp), %rdx
movq -144(%rbp), %rdi
addq %rdx, %rdi
movq -128(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -160(%rbp), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_861:
.loc_22_70:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
jne .ELSE_NOT_879
.loc_22_71:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $1, %rdx
jne .IF_NOT_883
.loc_22_72:
leaq .VAR_884(%rip), %rax
leave
ret
jmp .ELSE_NOT_888
.IF_NOT_883:
.loc_22_73:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $8, %rdx
jne .ELSE_NOT_888
.loc_22_74:
leaq .VAR_889(%rip), %rax
leave
ret
.ELSE_NOT_888:
.loc_22_76:
leaq .VAR_889(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rbx
salq $3, %rbx
movq %rbx, -112(%rbp)
movq -112(%rbp), %rdi
call uintToStr
movq %rax, -128(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -128(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -144(%rbp)
call memoryAllocSTR_NZ
subq $5, -144(%rbp)
movq -144(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -160(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -176(%rbp), %rdx
movq -144(%rbp), %rdi
addq %rdx, %rdi
movq -128(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -160(%rbp), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_879:
.loc_22_77:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_902
.loc_22_78:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $8, %rdx
jne .IF_NOT_906
.loc_22_79:
leaq .VAR_907(%rip), %rax
leave
ret
.IF_NOT_906:
.loc_22_81:
leaq .VAR_907(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rbx
salq $3, %rbx
movq %rbx, -112(%rbp)
movq -112(%rbp), %rdi
call uintToStr
movq %rax, -128(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -128(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -144(%rbp)
call memoryAllocSTR_NZ
subq $5, -144(%rbp)
movq -144(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -160(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -176(%rbp), %rdx
movq -144(%rbp), %rdi
addq %rdx, %rdi
movq -128(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -160(%rbp), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_902:
.loc_22_82:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .ELSE_NOT_920
.loc_22_83:
leaq .VAR_787(%rip), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_920:
.loc_22_84:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .ELSE_NOT_925
.loc_22_85:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_925:
.loc_22_86:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .ELSE_NOT_931
.loc_22_87:
leaq .VAR_932(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call bahType.toStr
movq %rax, -96(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -112(%rbp)
call memoryAllocSTR_NZ
subq $5, -112(%rbp)
movq -112(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -128(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -144(%rbp), %rdx
movq -112(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -128(%rbp), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_931:
.loc_22_88:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $7, %rdx
jne .ELSE_NOT_942
.loc_22_89:
leaq .VAR_943(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call bahType.toStr
movq %rax, -96(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -112(%rbp)
call memoryAllocSTR_NZ
subq $5, -112(%rbp)
movq -112(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -128(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -144(%rbp), %rdx
movq -112(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -128(%rbp), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_942:
.loc_22_90:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $8, %rdx
jne .ELSE_NOT_953
.loc_22_91:
leaq .VAR_954(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call bahType.toStr
movq %rax, -96(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -112(%rbp)
call memoryAllocSTR_NZ
subq $5, -112(%rbp)
movq -112(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -128(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -144(%rbp), %rdx
movq -112(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -128(%rbp), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_953:
.loc_22_92:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .ELSE_NOT_964
.loc_22_93:
leaq .VAR_965(%rip), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_964:
.loc_22_94:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .ELSE_NOT_969
.loc_22_95:
leaq .VAR_970(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call uintToStr
movq %rax, -96(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -112(%rbp)
call memoryAllocSTR_NZ
subq $5, -112(%rbp)
movq -112(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -128(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -144(%rbp), %rdx
movq -112(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -128(%rbp), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_969:
.loc_22_96:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .ELSE_NOT_980
.loc_22_97:
leaq .VAR_981(%rip), %rdx
movq %rdx, -32(%rbp)
.loc_22_98:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_22_99:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_983
movb %al, %r11b
.FOR_LOOP_START_983:
.loc_22_100:
movq -48(%rbp), %rdi
call bahType.toStr
movq %rax, -64(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -80(%rbp)
call memoryAllocSTR_NZ
subq $5, -80(%rbp)
movq -80(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -96(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
.loc_22_101:
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .IF_NOT_994
.loc_22_102:
leaq .VAR_995(%rip), %rax
movq %rax, -64(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -80(%rbp)
call memoryAllocSTR_NZ
subq $5, -80(%rbp)
movq -80(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -96(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
.IF_NOT_994:
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_983
.FOR_NOT_983:
.loc_22_105:
leaq .VAR_1000(%rip), %rax
movq %rax, -64(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -80(%rbp)
call memoryAllocSTR_NZ
subq $5, -80(%rbp)
movq -80(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -96(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
.loc_22_106:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .IF_NOT_1008
.loc_22_107:
leaq .VAR_1009(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $40, %rax
movq (%rax), %rdi
call bahType.toStr
movq %rax, -80(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -80(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -96(%rbp)
call memoryAllocSTR_NZ
subq $5, -96(%rbp)
movq -96(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -112(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -96(%rbp)
movq %rdx, -128(%rbp)
call memcpy
movq -128(%rbp), %rdx
movq -96(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -96(%rbp)
movq %rdx, -128(%rbp)
call memcpy
movq -128(%rbp), %rdx
movq -96(%rbp), %rdi
addq %rdx, %rdi
movq -80(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -96(%rbp)
movq %rdx, -128(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq %rdx, -32(%rbp)
.IF_NOT_1008:
.loc_22_109:
movq -32(%rbp), %rax
leave
ret
jmp .ELSE_NOT_1019
.ELSE_NOT_980:
.loc_22_110:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .ELSE_NOT_1019
.loc_22_111:
leaq .VAR_1020(%rip), %rdx
movq %rdx, -32(%rbp)
.loc_22_112:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_22_113:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1022
movb %al, %r11b
.FOR_LOOP_START_1022:
.loc_22_114:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq -48(%rbp), %rdx
movq %r11, %rax
movq (%rax), %r8
cmpq %r8, %rdx
je .IF_NOT_1028
.loc_22_115:
leaq .VAR_1029(%rip), %rax
movq %rax, -64(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -80(%rbp)
call memoryAllocSTR_NZ
subq $5, -80(%rbp)
movq -80(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -96(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
.IF_NOT_1028:
.loc_22_117:
movq -48(%rbp), %rdi
call bahType.toStr
movq %rax, -64(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -80(%rbp)
call memoryAllocSTR_NZ
subq $5, -80(%rbp)
movq -80(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -96(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1022
.FOR_NOT_1022:
.loc_22_119:
leaq .VAR_1038(%rip), %rax
movq %rax, -64(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -80(%rbp)
call memoryAllocSTR_NZ
subq $5, -80(%rbp)
movq -80(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -96(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
.loc_22_120:
movq -32(%rbp), %rax
leave
ret
.ELSE_NOT_1019:
.loc_22_123:
movq -16(%rbp), %rax
movq (%rax), %rax
leave
ret
.global .bahType.toStr_end
.bahType.toStr_end:
.global bahType.getPtr
bahType.getPtr:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
.loc_22_127:
movq $67, %rdi
call memoryAlloc
movq %rax, -32(%rbp)
movq -32(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -32(%rbp), %rdi
addq $65, %rdi
movb $1, (%rdi)
movq -32(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
movq -32(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
movq -32(%rbp), %rdi
addq $24, %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
.loc_22_134:
movq -32(%rbp), %rax
leave
ret
.global .bahType.getPtr_end
.bahType.getPtr_end:
.global bahLeftValue.isArrayRecursive
bahLeftValue.isArrayRecursive:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
.loc_22_215:
movq -16(%rbp), %rax
addq $89, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_1045
.loc_22_216:
movq $1, %rax
leave
ret
.IF_NOT_1045:
.loc_22_219:
movq -16(%rbp), %rax
addq $72, %rax
movq %rax, -32(%rbp)
movq -32(%rbp), %rax
movq (%rax), %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_1046
movq -16(%rbp), %rax
addq $72, %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rdi
call bahLeftValue.isArrayRecursive
cmpb $0, %al
je .BOOL_AND_1046
movb $1, %al
jmp .BOOL_AND_1046_END
.BOOL_AND_1046:
movb $0, %al
.BOOL_AND_1046_END:
cmpb $0, %al
je .IF_NOT_1051
.loc_22_220:
movq $1, %rax
leave
ret
.IF_NOT_1051:
.loc_22_223:
movq -16(%rbp), %rax
addq $80, %rax
movq %rax, -32(%rbp)
movq -32(%rbp), %rax
movq (%rax), %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_1052
movq -16(%rbp), %rax
addq $80, %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rdi
call bahLeftValue.isArrayRecursive
cmpb $0, %al
je .BOOL_AND_1052
movb $1, %al
jmp .BOOL_AND_1052_END
.BOOL_AND_1052:
movb $0, %al
.BOOL_AND_1052_END:
cmpb $0, %al
je .IF_NOT_1057
.loc_22_224:
movq $1, %rax
leave
ret
.IF_NOT_1057:
.loc_22_227:
movq $0, %rax
leave
ret
.global .bahLeftValue.isArrayRecursive_end
.bahLeftValue.isArrayRecursive_end:
.global parserContext.addVar
parserContext.addVar:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_22_274:
movq -16(%rbp), %rax
addq $24, %rax
movq -32(%rbp), %rdi
addq $16, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_22_275:
movq -16(%rbp), %rdi
movq (%rdi), %rax
movq %rax, -48(%rbp)
movq -16(%rbp), %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, -64(%rbp)
movq -48(%rbp), %rdi
movq -64(%rbp), %rsi
call __Bah_realocate_arr
movq -48(%rbp), %rdi
movq -64(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
leave
ret
.global .parserContext.addVar_end
.parserContext.addVar_end:
.global parserContext.addFunc
parserContext.addFunc:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_22_279:
movq -16(%rbp), %rdi
addq $8, %rdi
movq (%rdi), %rax
movq %rax, -48(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, -64(%rbp)
movq -48(%rbp), %rdi
movq -64(%rbp), %rsi
call __Bah_realocate_arr
movq -48(%rbp), %rdi
movq -64(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
leave
ret
.global .parserContext.addFunc_end
.parserContext.addFunc_end:
.global parserContext.addType
parserContext.addType:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_22_283:
movq -16(%rbp), %rdi
addq $16, %rdi
movq (%rdi), %rax
movq %rax, -48(%rbp)
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, -64(%rbp)
movq -48(%rbp), %rdi
movq -64(%rbp), %rsi
call __Bah_realocate_arr
movq -48(%rbp), %rdi
movq -64(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
leave
ret
.global .parserContext.addType_end
.parserContext.addType_end:
.global parserContext.startScope
parserContext.startScope:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_22_287:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, %rdx
addq $1, (%rdx)
.loc_22_288:
movq -16(%rbp), %rax
addq $120, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .IF_NOT_1072
.loc_22_289:
movq -16(%rbp), %rax
addq $120, %rax
movq -32(%rbp), %rdi
addq $32, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_22_290:
movq -16(%rbp), %rax
addq $120, %rax
movq (%rax), %rax
addq $40, %rax
movq -32(%rbp), %rdi
addq $48, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_22_291:
movq -16(%rbp), %rdi
addq $120, %rdi
movq (%rdi), %rdi
addq $40, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
.IF_NOT_1072:
.loc_22_293:
movq -16(%rbp), %rax
addq $24, %rax
movq -32(%rbp), %rdi
addq $24, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_22_294:
movq -16(%rbp), %rdi
addq $120, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
leave
ret
.global .parserContext.startScope_end
.parserContext.startScope_end:
.global parserContext.endScope
parserContext.endScope:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
.loc_22_298:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, %rdx
subq $1, (%rdx)
.loc_22_300:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_1081
.loc_22_301:
movq -16(%rbp), %rdi
addq $120, %rdi
movq $0, (%rdi)
jmp .ELSE_NOT_1082
.IF_NOT_1081:
.loc_22_302:
.loc_22_303:
movq -16(%rbp), %rax
addq $120, %rax
movq (%rax), %rax
addq $32, %rax
movq -16(%rbp), %rdi
addq $120, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_1082:
.loc_22_306:
movq $0, -32(%rbp)
.FOR_LOOP_START_1085:
movq -16(%rbp), %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movq (%rax), %rdi
call __bah_arrayLength
cmpq -32(%rbp), %rax
jle .FOR_NOT_1085
movb %al, %r11b
.loc_22_307:
movq -32(%rbp), %rbx
salq $3, %rbx
movq %rbx, %r11
movq -16(%rbp), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %r11, %rax
movq (%rax), %rax
addq $16, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movq (%rax), %rax
cmpq %r8, %rax
jnb .IF_NOT_1094
.loc_22_308:
movq -16(%rbp), %rax
movq (%rax), %rdi
movq -32(%rbp), %rsi
call delete
.loc_22_309:
subq $1, -32(%rbp)
.IF_NOT_1094:
addq $1, -32(%rbp)
jmp .FOR_LOOP_START_1085
.FOR_NOT_1085:
leave
ret
.global .parserContext.endScope_end
.parserContext.endScope_end:
.global parserContext.findVar
parserContext.findVar:
pushq %rbp
movq %rsp, %rbp
subq $96, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_22_315:
movq -16(%rbp), %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, %r11
movq %r11, %rbx
subq $1, %rbx
movq %rbx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_1098
movb %al, %r10b
.FOR_LOOP_START_1098:
.loc_22_316:
movq -48(%rbp), %rbx
salq $3, %rbx
movq %rbx, %r11
movq -16(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rax
addq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_22_317:
movq -64(%rbp), %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rdi
movq -32(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1105
.loc_22_318:
movq -64(%rbp), %rax
leave
ret
.IF_NOT_1105:
subq $1, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_1098
.FOR_NOT_1098:
.loc_22_321:
movq $0, %rax
leave
ret
.global .parserContext.findVar_end
.parserContext.findVar_end:
.global parserContext.findFunc
parserContext.findFunc:
pushq %rbp
movq %rsp, %rbp
subq $96, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_22_325:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, %r11
movq %r11, %rbx
subq $1, %rbx
movq %rbx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_1108
movb %al, %r10b
.FOR_LOOP_START_1108:
.loc_22_326:
movq -48(%rbp), %rbx
salq $3, %rbx
movq %rbx, %r11
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_22_327:
movq -64(%rbp), %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rdi
movq -32(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1115
.loc_22_328:
movq -64(%rbp), %rax
leave
ret
.IF_NOT_1115:
subq $1, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_1108
.FOR_NOT_1108:
.loc_22_331:
movq $0, %rax
leave
ret
.global .parserContext.findFunc_end
.parserContext.findFunc_end:
.global parserContext.findMethod
parserContext.findMethod:
pushq %rbp
movq %rsp, %rbp
subq $144, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_22_335:
movq -32(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1116
movb %al, %r11b
.FOR_LOOP_START_1116:
.loc_22_336:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, -80(%rbp)
leaq .VAR_1123(%rip), %rax
movq %rax, -96(%rbp)
movl $5, %edi
movq -80(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq -48(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -112(%rbp)
call memoryAllocSTR_NZ
subq $5, -112(%rbp)
movq -112(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -128(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -80(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -144(%rbp), %rdx
movq -112(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -144(%rbp), %rdx
movq -112(%rbp), %rdi
addq %rdx, %rdi
movq -48(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -112(%rbp)
movq %rdx, -144(%rbp)
call memcpy
movq -16(%rbp), %rdi
movq -128(%rbp), %rsi
call parserContext.findFunc
movq %rax, -64(%rbp)
.loc_22_337:
movq -64(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_1129
.loc_22_338:
movq -64(%rbp), %rax
leave
ret
.IF_NOT_1129:
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
movq -32(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1116
.FOR_NOT_1116:
.loc_22_341:
movq $0, %rax
leave
ret
.global .parserContext.findMethod_end
.parserContext.findMethod_end:
.global parserContext.findType
parserContext.findType:
pushq %rbp
movq %rsp, %rbp
subq $160, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_22_345:
movq -16(%rbp), %rax
addq $16, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, %r11
movq %r11, %rbx
subq $1, %rbx
movq %rbx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_1132
movb %al, %r10b
.FOR_LOOP_START_1132:
.loc_22_346:
movq -48(%rbp), %rbx
salq $3, %rbx
movq %rbx, %r11
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_22_347:
movq -64(%rbp), %rax
addq $64, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movb (%rax), %al
movb %al, -81(%rbp)
movb -81(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .BOOL_AND_1137
movq -64(%rbp), %rax
addq $24, %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rax
movq (%rax), %rax
movq %rax, -112(%rbp)
movq -112(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_1137
movq -64(%rbp), %rax
addq $24, %rax
movq %rax, -128(%rbp)
movq -128(%rbp), %rax
movq (%rax), %rax
movq %rax, -144(%rbp)
movq -144(%rbp), %rax
movq (%rax), %rax
movq %rax, -160(%rbp)
movq -160(%rbp), %rdi
movq -32(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_1137
movb $1, %al
jmp .BOOL_AND_1137_END
.BOOL_AND_1137:
movb $0, %al
.BOOL_AND_1137_END:
cmpb $0, %al
je .IF_NOT_1147
.loc_22_348:
movq -64(%rbp), %rax
leave
ret
.IF_NOT_1147:
.loc_22_351:
movq -64(%rbp), %rax
addq $64, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movb (%rax), %al
movb %al, -81(%rbp)
movb -81(%rbp), %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .BOOL_AND_1148
movq -64(%rbp), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rax
movq (%rax), %rax
movq %rax, -112(%rbp)
movq -112(%rbp), %rdi
movq -32(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_1148
movb $1, %al
jmp .BOOL_AND_1148_END
.BOOL_AND_1148:
movb $0, %al
.BOOL_AND_1148_END:
cmpb $0, %al
je .IF_NOT_1154
.loc_22_352:
movq -64(%rbp), %rax
leave
ret
.IF_NOT_1154:
subq $1, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_1132
.FOR_NOT_1132:
.loc_22_355:
movq $0, %rax
leave
ret
.global .parserContext.findType_end
.parserContext.findType_end:
.global hasScopeReturned
hasScopeReturned:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
.loc_22_362:
movq -16(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1158
.loc_22_363:
movq -16(%rbp), %rax
addq $1, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_1160
.loc_22_364:
movq $1, %rax
leave
ret
.IF_NOT_1160:
.loc_22_367:
movq -16(%rbp), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
.loc_22_368:
movq -32(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1162
movb %al, %r11b
.FOR_LOOP_START_1162:
.loc_22_369:
movq -32(%rbp), %rdi
call hasScopeReturned
cmpb $0, %al
je .IF_NOT_1166
.loc_22_370:
movq $1, %rax
leave
ret
.IF_NOT_1166:
movq -32(%rbp), %rax
addq $48, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
movq -32(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1162
.FOR_NOT_1162:
.loc_22_373:
movq $0, %rax
leave
ret
.IF_NOT_1158:
.loc_22_376:
movq -16(%rbp), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
.loc_22_377:
movq -32(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1168
movb %al, %r11b
.FOR_LOOP_START_1168:
.loc_22_378:
movq -32(%rbp), %rdi
call hasScopeReturned
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1174
.loc_22_379:
movq $0, %rax
leave
ret
.IF_NOT_1174:
.loc_22_382:
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .BOOL_AND_1175
movq -32(%rbp), %rax
addq $3, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_1175
movb $1, %al
jmp .BOOL_AND_1175_END
.BOOL_AND_1175:
movb $0, %al
.BOOL_AND_1175_END:
cmpb $0, %al
je .IF_NOT_1182
.loc_22_383:
movq $0, %rax
leave
ret
.IF_NOT_1182:
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
movq -32(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1168
.FOR_NOT_1168:
.loc_22_387:
movq -16(%rbp), %rax
addq $1, %rax
movb (%rax), %al
leave
ret
.global .hasScopeReturned_end
.hasScopeReturned_end:
.file 23 "/home/alois/Documents/bah-asm/src/./types.bah"
.global reversableCompatibleTypes
reversableCompatibleTypes:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movb %dl, -33(%rbp)
.loc_23_3:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .BOOL_AND_1184
movq -32(%rbp), %rax
addq $65, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
cmpb $1, %al
je .BOOL_OR_1188_END
movq -32(%rbp), %rax
addq $66, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
cmpb $1, %al
je .BOOL_OR_1188_END
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movb (%rax), %al
movb %al, -49(%rbp)
movb -49(%rbp), %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .BOOL_OR_1188_NOT
.BOOL_OR_1188:
movb $1, %al
jmp .BOOL_OR_1188_END
.BOOL_OR_1188_NOT:
movb $0, %al
.BOOL_OR_1188_END:
cmpb $0, %al
je .BOOL_AND_1184
movb $1, %al
jmp .BOOL_AND_1184_END
.BOOL_AND_1184:
movb $0, %al
.BOOL_AND_1184_END:
cmpb $0, %al
je .IF_NOT_1194
.loc_23_4:
movq $1, %rax
leave
ret
.IF_NOT_1194:
.loc_23_7:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
jne .BOOL_AND_1195
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_AND_1195
movb $1, %al
jmp .BOOL_AND_1195_END
.BOOL_AND_1195:
movb $0, %al
.BOOL_AND_1195_END:
cmpb $0, %al
je .IF_NOT_1202
.loc_23_8:
movq $1, %rax
leave
ret
.IF_NOT_1202:
.loc_23_11:
movb -33(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1204
.loc_23_12:
movq -32(%rbp), %rdi
movq -16(%rbp), %rsi
movq $1, %rdx
call reversableCompatibleTypes
leave
ret
.IF_NOT_1204:
.loc_23_15:
movq $0, %rax
leave
ret
.global .reversableCompatibleTypes_end
.reversableCompatibleTypes_end:
.global compatibleTypes
compatibleTypes:
pushq %rbp
movq %rsp, %rbp
subq $96, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_23_19:
movq -16(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_OR_1205
movq -32(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_OR_1205_NOT
.BOOL_OR_1205:
movb $1, %al
jmp .BOOL_OR_1205_END
.BOOL_OR_1205_NOT:
movb $0, %al
.BOOL_OR_1205_END:
cmpb $0, %al
je .IF_NOT_1208
.loc_23_20:
movq $0, %rax
leave
ret
.IF_NOT_1208:
.loc_23_23:
.FOR_LOOP_START_1209:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .FOR_NOT_1209
movb %al, %r9b
.loc_23_24:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -16(%rbp)
jmp .FOR_LOOP_START_1209
.FOR_NOT_1209:
.loc_23_27:
.FOR_LOOP_START_1214:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .FOR_NOT_1214
movb %al, %r9b
.loc_23_28:
movq -32(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_1214
.FOR_NOT_1214:
.loc_23_31:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r9
movb %r10b, %dl
movq %r9, %rax
movb (%rax), %r8b
cmpb %r8b, %dl
jne .IF_NOT_1223
.loc_23_33:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .IF_NOT_1227
.loc_23_35:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .BOOL_OR_1228
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $0, %rdx
je .BOOL_OR_1228_NOT
.BOOL_OR_1228:
movb $1, %al
jmp .BOOL_OR_1228_END
.BOOL_OR_1228_NOT:
movb $0, %al
.BOOL_OR_1228_END:
cmpb $0, %al
je .IF_NOT_1235
.loc_23_36:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, -80(%rbp)
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, -96(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
movq -96(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1240
.loc_23_37:
movq $0, %rax
leave
ret
.IF_NOT_1240:
.IF_NOT_1235:
.loc_23_42:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_23_43:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_23_44:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1243
movb %al, %r11b
.FOR_LOOP_START_1243:
.loc_23_45:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_1248
.loc_23_46:
movq $0, %rax
leave
ret
.IF_NOT_1248:
.loc_23_49:
movq -48(%rbp), %rdi
movq -64(%rbp), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1251
.loc_23_50:
movq $0, %rax
leave
ret
.IF_NOT_1251:
.loc_23_52:
movq -64(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1243
.FOR_NOT_1243:
.loc_23_55:
movq -64(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_1254
.loc_23_56:
movq $0, %rax
leave
ret
.IF_NOT_1254:
.IF_NOT_1227:
.loc_23_61:
movq $1, %rax
leave
ret
.IF_NOT_1223:
.loc_23_64:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq $0, %rdx
call reversableCompatibleTypes
leave
ret
.global .compatibleTypes_end
.compatibleTypes_end:
.global isSameType
isSameType:
pushq %rbp
movq %rsp, %rbp
subq $128, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_23_68:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r9
movb %r10b, %dl
movq %r9, %rax
movb (%rax), %r8b
cmpb %r8b, %dl
jne .BOOL_OR_1255
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rax
movq %rax, -96(%rbp)
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -112(%rbp)
movq -96(%rbp), %rdx
movq -112(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
je .BOOL_OR_1255_NOT
.BOOL_OR_1255:
movb $1, %al
jmp .BOOL_OR_1255_END
.BOOL_OR_1255_NOT:
movb $0, %al
.BOOL_OR_1255_END:
cmpb $0, %al
je .IF_NOT_1264
.loc_23_69:
movq $0, %rax
leave
ret
.IF_NOT_1264:
.loc_23_72:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_1268
.loc_23_73:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, -80(%rbp)
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
movq -80(%rbp), %rdi
movq (%rax), %rsi
call __bah_compareStr
leave
ret
.IF_NOT_1268:
.loc_23_76:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_1277
.loc_23_77:
movq -16(%rbp), %rax
addq $24, %rax
movq %rax, -80(%rbp)
movq -32(%rbp), %rax
addq $24, %rax
movq %rax, -96(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rdi
movq -96(%rbp), %rax
movq (%rax), %rsi
call isSameType
leave
ret
.IF_NOT_1277:
.loc_23_80:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .IF_NOT_1283
.loc_23_81:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .BOOL_AND_1285
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $0, %rdx
jne .BOOL_AND_1285
movb $1, %al
jmp .BOOL_AND_1285_END
.BOOL_AND_1285:
movb $0, %al
.BOOL_AND_1285_END:
cmpb $1, %al
je .BOOL_OR_1284_END
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_AND_1292
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, -112(%rbp)
movq -112(%rbp), %rax
movq (%rax), %rax
movq %rax, -128(%rbp)
movq -128(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_1292
movb $1, %al
jmp .BOOL_AND_1292_END
.BOOL_AND_1292:
movb $0, %al
.BOOL_AND_1292_END:
cmpb $1, %al
jne .BOOL_OR_1284_NOT
.BOOL_OR_1284:
movb $1, %al
jmp .BOOL_OR_1284_END
.BOOL_OR_1284_NOT:
movb $0, %al
.BOOL_OR_1284_END:
cmpb $0, %al
je .IF_NOT_1299
.loc_23_82:
movq $0, %rax
leave
ret
.IF_NOT_1299:
.loc_23_85:
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, -80(%rbp)
movq -80(%rbp), %rax
movq (%rax), %rax
movq %rax, -96(%rbp)
movq -96(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_1300
movq -16(%rbp), %rax
addq $40, %rax
movq %rax, -112(%rbp)
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, -128(%rbp)
movq -112(%rbp), %rax
movq (%rax), %rdi
movq -128(%rbp), %rax
movq (%rax), %rsi
call isSameType
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_1300
movb $1, %al
jmp .BOOL_AND_1300_END
.BOOL_AND_1300:
movb $0, %al
.BOOL_AND_1300_END:
cmpb $0, %al
je .IF_NOT_1308
.loc_23_86:
movq $0, %rax
leave
ret
.IF_NOT_1308:
.loc_23_89:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_23_90:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_23_91:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1311
movb %al, %r11b
.FOR_LOOP_START_1311:
.loc_23_92:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_1316
.loc_23_93:
movq $0, %rax
leave
ret
.IF_NOT_1316:
.loc_23_96:
movq -48(%rbp), %rdi
movq -64(%rbp), %rsi
call isSameType
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1319
.loc_23_97:
movq $0, %rax
leave
ret
.IF_NOT_1319:
.loc_23_100:
movq -64(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1311
.FOR_NOT_1311:
.loc_23_103:
movq -64(%rbp), %rdx
cmpq $0, %rdx
sete %al
leave
ret
.IF_NOT_1283:
.loc_23_106:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .IF_NOT_1325
.loc_23_107:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_23_108:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_23_109:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1328
movb %al, %r11b
.FOR_LOOP_START_1328:
.loc_23_110:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_1333
.loc_23_111:
movq $0, %rax
leave
ret
.IF_NOT_1333:
.loc_23_114:
movq -48(%rbp), %rdi
movq -64(%rbp), %rsi
call isSameType
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1336
.loc_23_115:
movq $0, %rax
leave
ret
.IF_NOT_1336:
.loc_23_118:
movq -64(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1328
.FOR_NOT_1328:
.loc_23_121:
movq -64(%rbp), %rdx
cmpq $0, %rdx
sete %al
leave
ret
.IF_NOT_1325:
.loc_23_124:
movq $1, %rax
leave
ret
.global .isSameType_end
.isSameType_end:
.global containsPtr
containsPtr:
pushq %rbp
movq %rsp, %rbp
subq $32, %rsp
movq %rdi, -16(%rbp)
.loc_23_128:
movq -16(%rbp), %rax
addq $65, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $1, %al
je .BOOL_OR_1339_END
movq -16(%rbp), %rax
addq $66, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $1, %al
je .BOOL_OR_1339_END
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .BOOL_OR_1339_NOT
.BOOL_OR_1339:
movb $1, %al
jmp .BOOL_OR_1339_END
.BOOL_OR_1339_NOT:
movb $0, %al
.BOOL_OR_1339_END:
cmpb $0, %al
je .IF_NOT_1345
.loc_23_129:
movq $1, %rax
leave
ret
.IF_NOT_1345:
.loc_23_132:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_1349
.loc_23_133:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
.loc_23_134:
movq -32(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1352
movb %al, %r11b
.FOR_LOOP_START_1352:
.loc_23_135:
movq -32(%rbp), %rdi
call containsPtr
cmpb $0, %al
je .IF_NOT_1356
.loc_23_136:
movq $1, %rax
leave
ret
.IF_NOT_1356:
movq -32(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
movq -32(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1352
.FOR_NOT_1352:
.IF_NOT_1349:
.loc_23_141:
movq $0, %rax
leave
ret
.global .containsPtr_end
.containsPtr_end:
.file 24 "/home/alois/Documents/bah-asm/src/./error.bah"
.global throwError
throwError:
pushq %rbp
movq %rsp, %rbp
subq $304, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_24_11:
leaq .VAR_388(%rip), %rdx
movq %rdx, -48(%rbp)
.loc_24_14:
pxor %xmm0, %xmm0
movq %xmm0, -64(%rbp)
.loc_24_15:
pxor %xmm0, %xmm0
movq %xmm0, -80(%rbp)
.loc_24_16:
pxor %xmm0, %xmm0
movq %xmm0, -96(%rbp)
.loc_24_17:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rax
movq %rax, %rdi
call absPath
movq %rax, -112(%rbp)
.loc_24_18:
movq -16(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_1367
movb %al, %r10b
.FOR_LOOP_START_1367:
.loc_24_19:
leaq parserCtx(%rip), %rax
addq $64, %rax
movq (%rax), %rax
addq $4, %rax
addq -80(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .IF_NOT_1372
.loc_24_20:
addq $1, -80(%rbp)
.loc_24_21:
jmp .FOR_NOT_1367
.IF_NOT_1372:
subq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_1367
.FOR_NOT_1367:
.loc_24_26:
movq -16(%rbp), %rax
addq $16, %rax
movq %rax, -144(%rbp)
movq -144(%rbp), %rax
movq (%rax), %rax
movq %rax, -160(%rbp)
movq -16(%rbp), %rax
movq %rax, -176(%rbp)
movq -176(%rbp), %rax
movq (%rax), %rdi
call __bah_strlenSTR
movq -160(%rbp), %rbx
addq %rax, %rbx
movq %rbx, -96(%rbp)
.FOR_LOOP_START_1376:
leaq parserCtx(%rip), %rax
addq $64, %rax
movq (%rax), %rax
movq %rax, -192(%rbp)
movq -192(%rbp), %rdi
call __bah_strlenSTR
cmpq %rax, -96(%rbp)
jnb .FOR_NOT_1376
movb %al, %r11b
.loc_24_27:
leaq parserCtx(%rip), %rax
addq $64, %rax
movq (%rax), %rax
addq $4, %rax
addq -96(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .IF_NOT_1381
.loc_24_28:
jmp .FOR_NOT_1376
.IF_NOT_1381:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_1376
.FOR_NOT_1376:
.loc_24_32:
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %rbx
subq -80(%rbp), %rbx
movq %rbx, -64(%rbp)
.loc_24_34:
leaq parserCtx(%rip), %rax
addq $64, %rax
movq (%rax), %rax
movq %rax, -144(%rbp)
movq -16(%rbp), %rax
addq $16, %rax
movq -144(%rbp), %rdi
movq -80(%rbp), %rsi
movq (%rax), %rdx
call strSubstitute
movq %rax, -160(%rbp)
leaq .VAR_1363(%rip), %rax
movq %rax, -176(%rbp)
movq -16(%rbp), %rax
movq (%rax), %rax
movq %rax, -192(%rbp)
leaq .VAR_1357(%rip), %rax
movq %rax, -208(%rbp)
leaq parserCtx(%rip), %rax
addq $64, %rax
movq (%rax), %rax
movq %rax, -224(%rbp)
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -16(%rbp), %rax
movq (%rax), %rdi
call __bah_strlenSTR
movq -240(%rbp), %rbx
addq %rax, %rbx
movq -224(%rbp), %rdi
movq %rbx, %rsi
movq -96(%rbp), %rdx
call strSubstitute
movq %rax, -256(%rbp)
movl $5, %edi
movq -160(%rbp), %rbx
addl (%rbx), %edi
movq -176(%rbp), %rbx
addl (%rbx), %edi
movq -192(%rbp), %rbx
addl (%rbx), %edi
movq -208(%rbp), %rbx
addl (%rbx), %edi
movq -256(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -272(%rbp)
call memoryAllocSTR_NZ
subq $5, -272(%rbp)
movq -272(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -288(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -160(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -304(%rbp), %rdx
movq -272(%rbp), %rdi
addq %rdx, %rdi
movq -176(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -304(%rbp), %rdx
movq -272(%rbp), %rdi
addq %rdx, %rdi
movq -192(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -304(%rbp), %rdx
movq -272(%rbp), %rdi
addq %rdx, %rdi
movq -208(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -304(%rbp), %rdx
movq -272(%rbp), %rdi
addq %rdx, %rdi
movq -256(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -288(%rbp), %rdx
movq %rdx, -48(%rbp)
.loc_24_36:
leaq .VAR_1400(%rip), %rax
movq %rax, -144(%rbp)
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdi
call uintToStr
movq %rax, -160(%rbp)
leaq .VAR_1400(%rip), %rax
movq %rax, -176(%rbp)
movq -64(%rbp), %rdi
call uintToStr
movq %rax, -192(%rbp)
movl $5, %edi
movq -112(%rbp), %rbx
addl (%rbx), %edi
movq -144(%rbp), %rbx
addl (%rbx), %edi
movq -160(%rbp), %rbx
addl (%rbx), %edi
movq -176(%rbp), %rbx
addl (%rbx), %edi
movq -192(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -208(%rbp)
call memoryAllocSTR_NZ
subq $5, -208(%rbp)
movq -208(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -224(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -112(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -208(%rbp)
movq %rdx, -240(%rbp)
call memcpy
movq -240(%rbp), %rdx
movq -208(%rbp), %rdi
addq %rdx, %rdi
movq -144(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -208(%rbp)
movq %rdx, -240(%rbp)
call memcpy
movq -240(%rbp), %rdx
movq -208(%rbp), %rdi
addq %rdx, %rdi
movq -160(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -208(%rbp)
movq %rdx, -240(%rbp)
call memcpy
movq -240(%rbp), %rdx
movq -208(%rbp), %rdi
addq %rdx, %rdi
movq -176(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -208(%rbp)
movq %rdx, -240(%rbp)
call memcpy
movq -240(%rbp), %rdx
movq -208(%rbp), %rdi
addq %rdx, %rdi
movq -192(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -208(%rbp)
movq %rdx, -240(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq %rdx, -128(%rbp)
.loc_24_38:
leaq .VAR_1363(%rip), %rax
movq %rax, -144(%rbp)
leaq .VAR_1411(%rip), %rax
movq %rax, -160(%rbp)
leaq .VAR_1357(%rip), %rax
movq %rax, -176(%rbp)
leaq .VAR_1009(%rip), %rax
movq %rax, -192(%rbp)
leaq .VAR_1357(%rip), %rax
movq %rax, -208(%rbp)
movl $5, %edi
movq -144(%rbp), %rbx
addl (%rbx), %edi
movq -160(%rbp), %rbx
addl (%rbx), %edi
movq -176(%rbp), %rbx
addl (%rbx), %edi
movq -192(%rbp), %rbx
addl (%rbx), %edi
movq -128(%rbp), %rbx
addl (%rbx), %edi
movq -208(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -224(%rbp)
call memoryAllocSTR_NZ
subq $5, -224(%rbp)
movq -224(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -240(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -144(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -160(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -176(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -192(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -128(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -208(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -240(%rbp), %rdi
call println
.loc_24_39:
leaq .VAR_1420(%rip), %rax
movq %rax, -144(%rbp)
movl $5, %edi
movq -48(%rbp), %rbx
addl (%rbx), %edi
movq -144(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -160(%rbp)
call memoryAllocSTR_NZ
subq $5, -160(%rbp)
movq -160(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -176(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -48(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -160(%rbp)
movq %rdx, -192(%rbp)
call memcpy
movq -192(%rbp), %rdx
movq -160(%rbp), %rdi
addq %rdx, %rdi
movq -144(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -160(%rbp)
movq %rdx, -192(%rbp)
call memcpy
movq -176(%rbp), %rdi
call println
.loc_24_40:
leaq .VAR_1357(%rip), %rax
movq %rax, -144(%rbp)
movl $5, %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -144(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -160(%rbp)
call memoryAllocSTR_NZ
subq $5, -160(%rbp)
movq -160(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -176(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -160(%rbp)
movq %rdx, -192(%rbp)
call memcpy
movq -192(%rbp), %rdx
movq -160(%rbp), %rdi
addq %rdx, %rdi
movq -144(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -160(%rbp)
movq %rdx, -192(%rbp)
call memcpy
movq -176(%rbp), %rdi
call println
.loc_24_48:
movq $1, %rdi
call exit
leave
ret
.global .throwError_end
.throwError_end:
.global throwTypeError
throwTypeError:
pushq %rbp
movq %rsp, %rbp
subq $176, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_24_52:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -48(%rbp)
leaq .VAR_1430(%rip), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $56, %rax
movq (%rax), %rdi
call bahType.toStr
movq %rax, -80(%rbp)
leaq .VAR_1434(%rip), %rax
movq %rax, -96(%rbp)
movq -32(%rbp), %rdi
call bahType.toStr
movq %rax, -112(%rbp)
leaq .VAR_1437(%rip), %rax
movq %rax, -128(%rbp)
movl $5, %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -80(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq -112(%rbp), %rbx
addl (%rbx), %edi
movq -128(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -144(%rbp)
call memoryAllocSTR_NZ
subq $5, -144(%rbp)
movq -144(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -160(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -176(%rbp), %rdx
movq -144(%rbp), %rdi
addq %rdx, %rdi
movq -80(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -176(%rbp), %rdx
movq -144(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -176(%rbp), %rdx
movq -144(%rbp), %rdi
addq %rdx, %rdi
movq -112(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -176(%rbp), %rdx
movq -144(%rbp), %rdi
addq %rdx, %rdi
movq -128(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -144(%rbp)
movq %rdx, -176(%rbp)
call memcpy
movq -48(%rbp), %rdi
movq -160(%rbp), %rsi
call throwError
leave
ret
.global .throwTypeError_end
.throwTypeError_end:
.file 25 "/home/alois/Documents/bah-asm/src/./optimizer.bah"
.global isValueSafe
isValueSafe:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
.loc_25_21:
.FOR_LOOP_START_1445:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .FOR_NOT_1445
movb %al, %r9b
.loc_25_22:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -16(%rbp)
jmp .FOR_LOOP_START_1445
.FOR_NOT_1445:
.loc_25_25:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $14, %rdx
jne .IF_NOT_1453
.loc_25_27:
movq $0, %rax
leave
ret
.IF_NOT_1453:
.loc_25_30:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
je .BOOL_OR_1454
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
je .BOOL_OR_1454
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movb (%rax), %al
movb %al, -49(%rbp)
movb -49(%rbp), %dl
movzbq %dl, %rdx
cmpq $8, %rdx
jne .BOOL_OR_1454_NOT
.BOOL_OR_1454:
movb $1, %al
jmp .BOOL_OR_1454_END
.BOOL_OR_1454_NOT:
movb $0, %al
.BOOL_OR_1454_END:
cmpb $0, %al
je .IF_NOT_1464
.loc_25_31:
movq $0, %rax
leave
ret
.IF_NOT_1464:
.loc_25_34:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .IF_NOT_1468
.loc_25_35:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_1472
.loc_25_36:
movq $0, %rax
leave
ret
.IF_NOT_1472:
.loc_25_38:
movq -16(%rbp), %rax
addq $64, %rax
movq (%rax), %rdi
call isValueSafe
leave
ret
.IF_NOT_1468:
.loc_25_41:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .IF_NOT_1477
.loc_25_42:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
cmpb $0, %al
je .BOOL_AND_1478
movq -16(%rbp), %rax
addq $72, %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
cmpb $0, %al
je .BOOL_AND_1478
movb $1, %al
jmp .BOOL_AND_1478_END
.BOOL_AND_1478:
movb $0, %al
.BOOL_AND_1478_END:
leave
ret
.IF_NOT_1477:
.loc_25_47:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .IF_NOT_1484
.loc_25_48:
movq -16(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
.loc_25_49:
movq -32(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1486
movb %al, %r11b
.FOR_LOOP_START_1486:
.loc_25_50:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1493
.loc_25_51:
movq $0, %rax
leave
ret
.IF_NOT_1493:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
movq -32(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1486
.FOR_NOT_1486:
.loc_25_55:
movq -16(%rbp), %rax
addq $64, %rax
movq (%rax), %rdi
call isValueSafe
leave
ret
.IF_NOT_1484:
.loc_25_58:
movq $1, %rax
leave
ret
.global .isValueSafe_end
.isValueSafe_end:
.global isValueInexpensive
isValueInexpensive:
pushq %rbp
movq %rsp, %rbp
subq $80, %rsp
movq %rdi, -16(%rbp)
.loc_25_62:
.FOR_LOOP_START_1495:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .FOR_NOT_1495
movb %al, %r9b
.loc_25_63:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -16(%rbp)
jmp .FOR_LOOP_START_1495
.FOR_NOT_1495:
.loc_25_66:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .IF_NOT_1503
.loc_25_67:
movq -16(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_1507
.loc_25_68:
movq $0, %rax
leave
ret
.IF_NOT_1507:
.loc_25_70:
movq -16(%rbp), %rax
addq $64, %rax
movq (%rax), %rdi
call isValueInexpensive
leave
ret
.IF_NOT_1503:
.loc_25_73:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
je .BOOL_AND_1509
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
je .BOOL_AND_1509
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, -32(%rbp)
movq -32(%rbp), %rax
movb (%rax), %al
movb %al, -33(%rbp)
movb -33(%rbp), %dl
movzbq %dl, %rdx
cmpq $10, %rdx
je .BOOL_AND_1509
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, -48(%rbp)
movq -48(%rbp), %rax
movb (%rax), %al
movb %al, -49(%rbp)
movb -49(%rbp), %dl
movzbq %dl, %rdx
cmpq $11, %rdx
je .BOOL_AND_1509
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rax
movb (%rax), %al
movb %al, -65(%rbp)
movb -65(%rbp), %dl
movzbq %dl, %rdx
cmpq $14, %rdx
je .BOOL_AND_1509
movb $1, %al
jmp .BOOL_AND_1509_END
.BOOL_AND_1509:
movb $0, %al
.BOOL_AND_1509_END:
leave
ret
.global .isValueInexpensive_end
.isValueInexpensive_end:
.global optimizeBranchlessOR
optimizeBranchlessOR:
pushq %rbp
movq %rsp, %rbp
subq $272, %rsp
movq %rdi, -16(%rbp)
.loc_25_78:
movq -16(%rbp), %rdx
movq %rdx, -32(%rbp)
.loc_25_79:
.FOR_LOOP_START_1525:
movq -32(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1525
movb %al, %r11b
.loc_25_81:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movb (%rax), %al
movb %al, -209(%rbp)
movb -209(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_OR_1528
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
leaq .VAR_1534(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_OR_1528_NOT
.BOOL_OR_1528:
movb $1, %al
jmp .BOOL_OR_1528_END
.BOOL_OR_1528_NOT:
movb $0, %al
.BOOL_OR_1528_END:
cmpb $0, %al
je .IF_NOT_1536
.loc_25_82:
jmp .FOR_NOT_1525
.IF_NOT_1536:
.loc_25_85:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
movb %al, -209(%rbp)
movb -209(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
je .BOOL_OR_1537
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_OR_1537_NOT
.BOOL_OR_1537:
movb $1, %al
jmp .BOOL_OR_1537_END
.BOOL_OR_1537_NOT:
movb $0, %al
.BOOL_OR_1537_END:
cmpb $0, %al
je .IF_NOT_1544
.loc_25_86:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_1525
.IF_NOT_1544:
.loc_25_89:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movb (%rax), %al
movb %al, -225(%rbp)
movb -225(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_OR_1545
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_1534(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_OR_1545_NOT
.BOOL_OR_1545:
movb $1, %al
jmp .BOOL_OR_1545_END
.BOOL_OR_1545_NOT:
movb $0, %al
.BOOL_OR_1545_END:
cmpb $0, %al
je .IF_NOT_1555
.loc_25_90:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
cmpb $0, %al
je .BOOL_AND_1556
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
cmpb $0, %al
je .BOOL_AND_1556
movb $1, %al
jmp .BOOL_AND_1556_END
.BOOL_AND_1556:
movb $0, %al
.BOOL_AND_1556_END:
cmpb $0, %al
je .IF_NOT_1559
.loc_25_91:
movq -32(%rbp), %rdi
addq $138, %rdi
movb $17, (%rdi)
.loc_25_92:
movq -32(%rbp), %rax
addq $64, %rax
leaq -96(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_25_93:
movq -32(%rbp), %rdi
addq $80, %rdi
movq %rdi, -208(%rbp)
movq -32(%rbp), %rax
addq $72, %rax
leaq -160(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -96(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -64(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -48(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -44(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -112(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -108(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $1, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
.loc_25_94:
movq -32(%rbp), %rdi
addq $80, %rdi
movq %rdi, %rdi
addq $40, %rdi
movq $-1, (%rdi)
.loc_25_95:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_1525
.IF_NOT_1559:
.IF_NOT_1555:
.loc_25_99:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_25_100:
movq -32(%rbp), %rdx
movq %rdx, -64(%rbp)
.loc_25_101:
.FOR_LOOP_START_1564:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1564
movb %al, %r11b
.loc_25_102:
movq -48(%rbp), %rax
addq $138, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movb (%rax), %al
movb %al, -209(%rbp)
movb -209(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_OR_1567
movq -48(%rbp), %rax
addq $8, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
leaq .VAR_1534(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_OR_1567_NOT
.BOOL_OR_1567:
movb $1, %al
jmp .BOOL_OR_1567_END
.BOOL_OR_1567_NOT:
movb $0, %al
.BOOL_OR_1567_END:
cmpb $0, %al
je .IF_NOT_1575
.loc_25_103:
jmp .FOR_NOT_1564
.IF_NOT_1575:
.loc_25_106:
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
cmpb $0, %al
je .BOOL_AND_1576
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
cmpb $0, %al
je .BOOL_AND_1576
movb $1, %al
jmp .BOOL_AND_1576_END
.BOOL_AND_1576:
movb $0, %al
.BOOL_AND_1576_END:
cmpb $0, %al
je .IF_NOT_1579
.loc_25_107:
movq -48(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $138, %rdi
movb $17, (%rdi)
.loc_25_108:
movq -32(%rbp), %rax
addq $64, %rax
leaq -128(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_25_109:
movq -48(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $80, %rdi
movq %rdi, -208(%rbp)
movq -48(%rbp), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -128(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -96(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -80(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -76(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $1, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
.loc_25_110:
movq -32(%rbp), %rdi
addq $80, %rdi
movq %rdi, %rdi
addq $40, %rdi
movq $-1, (%rdi)
.loc_25_111:
movq -48(%rbp), %rax
addq $72, %rax
movq -64(%rbp), %rdi
addq $72, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_25_112:
movq -48(%rbp), %rdx
movq %rdx, -64(%rbp)
.loc_25_113:
movq -48(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
jmp .FOR_LOOP_START_1564
.IF_NOT_1579:
.loc_25_116:
movq -48(%rbp), %rdx
movq %rdx, -64(%rbp)
movq -48(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
jmp .FOR_LOOP_START_1564
.FOR_NOT_1564:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_1525
.FOR_NOT_1525:
.loc_25_121:
movq -16(%rbp), %rax
leave
ret
.global .optimizeBranchlessOR_end
.optimizeBranchlessOR_end:
.global optimizeBranchlessAND
optimizeBranchlessAND:
pushq %rbp
movq %rsp, %rbp
subq $272, %rsp
movq %rdi, -16(%rbp)
.loc_25_126:
movq -16(%rbp), %rdx
movq %rdx, -32(%rbp)
.loc_25_127:
.FOR_LOOP_START_1584:
movq -32(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1584
movb %al, %r11b
.loc_25_129:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movb (%rax), %al
movb %al, -209(%rbp)
movb -209(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_OR_1587
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
leaq .VAR_1593(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_OR_1587_NOT
.BOOL_OR_1587:
movb $1, %al
jmp .BOOL_OR_1587_END
.BOOL_OR_1587_NOT:
movb $0, %al
.BOOL_OR_1587_END:
cmpb $0, %al
je .IF_NOT_1595
.loc_25_130:
jmp .FOR_NOT_1584
.IF_NOT_1595:
.loc_25_133:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
movb %al, -209(%rbp)
movb -209(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
je .BOOL_OR_1596
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_OR_1596_NOT
.BOOL_OR_1596:
movb $1, %al
jmp .BOOL_OR_1596_END
.BOOL_OR_1596_NOT:
movb $0, %al
.BOOL_OR_1596_END:
cmpb $0, %al
je .IF_NOT_1603
.loc_25_134:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_1584
.IF_NOT_1603:
.loc_25_137:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movb (%rax), %al
movb %al, -225(%rbp)
movb -225(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_OR_1604
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_1593(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_OR_1604_NOT
.BOOL_OR_1604:
movb $1, %al
jmp .BOOL_OR_1604_END
.BOOL_OR_1604_NOT:
movb $0, %al
.BOOL_OR_1604_END:
cmpb $0, %al
je .IF_NOT_1614
.loc_25_138:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
cmpb $0, %al
je .BOOL_AND_1615
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
cmpb $0, %al
je .BOOL_AND_1615
movb $1, %al
jmp .BOOL_AND_1615_END
.BOOL_AND_1615:
movb $0, %al
.BOOL_AND_1615_END:
cmpb $0, %al
je .IF_NOT_1618
.loc_25_139:
movq -32(%rbp), %rdi
addq $138, %rdi
movb $17, (%rdi)
.loc_25_140:
movq -32(%rbp), %rax
addq $64, %rax
leaq -96(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_25_141:
movq -32(%rbp), %rdi
addq $80, %rdi
movq %rdi, -208(%rbp)
movq -32(%rbp), %rax
addq $72, %rax
leaq -160(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -96(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -64(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -48(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -44(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -112(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -108(%rbp), %bx
movw %bx, (%r10)
movq $2, %rdx
movq $1, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
.loc_25_142:
movq -32(%rbp), %rdi
addq $80, %rdi
movq %rdi, %rdi
addq $40, %rdi
movq $-1, (%rdi)
.loc_25_143:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_1584
.IF_NOT_1618:
.IF_NOT_1614:
.loc_25_147:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_25_148:
movq -32(%rbp), %rdx
movq %rdx, -64(%rbp)
.loc_25_149:
.FOR_LOOP_START_1623:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1623
movb %al, %r11b
.loc_25_150:
movq -48(%rbp), %rax
addq $138, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movb (%rax), %al
movb %al, -209(%rbp)
movb -209(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_OR_1626
movq -48(%rbp), %rax
addq $8, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
leaq .VAR_1593(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_OR_1626_NOT
.BOOL_OR_1626:
movb $1, %al
jmp .BOOL_OR_1626_END
.BOOL_OR_1626_NOT:
movb $0, %al
.BOOL_OR_1626_END:
cmpb $0, %al
je .IF_NOT_1634
.loc_25_151:
jmp .FOR_NOT_1623
.IF_NOT_1634:
.loc_25_154:
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, -208(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rdi
call isValueSafe
cmpb $0, %al
je .BOOL_AND_1635
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
cmpb $0, %al
je .BOOL_AND_1635
movb $1, %al
jmp .BOOL_AND_1635_END
.BOOL_AND_1635:
movb $0, %al
.BOOL_AND_1635_END:
cmpb $0, %al
je .IF_NOT_1638
.loc_25_155:
movq -32(%rbp), %rax
addq $64, %rax
leaq -128(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_25_156:
movq -32(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $138, %rdi
movb $17, (%rdi)
.loc_25_157:
movq -32(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $80, %rdi
movq %rdi, -208(%rbp)
movq -48(%rbp), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -128(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -96(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -80(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -76(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq $2, %rdx
movq $1, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
.loc_25_158:
movq -32(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $80, %rdi
movq %rdi, %rdi
addq $40, %rdi
movq $-1, (%rdi)
.loc_25_159:
movq -48(%rbp), %rax
addq $72, %rax
movq -64(%rbp), %rdi
addq $72, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_25_160:
movq -48(%rbp), %rdx
movq %rdx, -64(%rbp)
.loc_25_161:
movq -48(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
jmp .FOR_LOOP_START_1623
.IF_NOT_1638:
.loc_25_164:
movq -48(%rbp), %rdx
movq %rdx, -64(%rbp)
movq -48(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
jmp .FOR_LOOP_START_1623
.FOR_NOT_1623:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_1584
.FOR_NOT_1584:
.loc_25_169:
movq -16(%rbp), %rax
leave
ret
.global .optimizeBranchlessAND_end
.optimizeBranchlessAND_end:
.file 26 "/home/alois/Documents/bah-asm/src/./gen.bah"
.global getStrLen
getStrLen:
pushq %rbp
movq %rsp, %rbp
subq $96, %rsp
movq %rdi, -16(%rbp)
.loc_26_7:
movq -16(%rbp), %rdi
call __bah_strlenSTR
movq %rax, -32(%rbp)
.loc_26_8:
movq $0, -48(%rbp)
.loc_26_9:
movq $1, -64(%rbp)
.FOR_LOOP_START_1643:
movq -64(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -32(%rbp), %rdx
jge .FOR_NOT_1643
movb %al, %r10b
.loc_26_10:
addq $1, -48(%rbp)
.loc_26_11:
movq -16(%rbp), %rax
addq $4, %rax
addq -64(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
movzbq %dl, %rdx
cmpq $92, %rdx
jne .IF_NOT_1648
.loc_26_12:
movq -16(%rbp), %rax
addq $4, %rax
movq %rax, %r11
movq -64(%rbp), %rbx
addq $1, %rbx
movq %r11, %rax
addq %rbx, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .IF_NOT_1652
.loc_26_13:
addq $1, -64(%rbp)
jmp .ELSE_NOT_1656
.IF_NOT_1652:
.loc_26_14:
movq -16(%rbp), %rax
addq $4, %rax
movq %rax, %r11
movq -64(%rbp), %rbx
addq $1, %rbx
movq %r11, %rax
addq %rbx, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $48, %dl
jne .ELSE_NOT_1656
.loc_26_15:
addq $1, -64(%rbp)
.loc_26_16:
movq -64(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_26_17:
.FOR_LOOP_START_1657:
movq -64(%rbp), %rbx
subq -80(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $2, %rdx
jge .FOR_NOT_1657
movb %al, %r10b
.loc_26_18:
movq -16(%rbp), %rax
addq $4, %rax
addq -64(%rbp), %rax
movb (%rax), %al
movb %al, -81(%rbp)
movb -81(%rbp), %dil
movsbl %dil, %edi
call isNumber
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1663
.loc_26_19:
jmp .FOR_NOT_1657
.IF_NOT_1663:
addq $1, -64(%rbp)
jmp .FOR_LOOP_START_1657
.FOR_NOT_1657:
.loc_26_22:
subq $1, -64(%rbp)
.ELSE_NOT_1656:
.loc_26_24:
addq $1, -64(%rbp)
.IF_NOT_1648:
addq $1, -64(%rbp)
jmp .FOR_LOOP_START_1643
.FOR_NOT_1643:
.loc_26_28:
movq -48(%rbp), %rax
leave
ret
.global .getStrLen_end
.getStrLen_end:
.global evalFunc
evalFunc:
pushq %rbp
movq %rsp, %rbp
subq $480, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_26_38:
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_1668
.loc_26_39:
leaq .VAR_1669(%rip), %rax
movq %rax, -384(%rbp)
movq evalFuncNb(%rip), %rdi
call intToStr
movq %rax, -400(%rbp)
leaq .VAR_810(%rip), %rax
movq %rax, -416(%rbp)
movl $5, %edi
movq -384(%rbp), %rbx
addl (%rbx), %edi
movq -400(%rbp), %rbx
addl (%rbx), %edi
movq -416(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -432(%rbp)
call memoryAllocSTR_NZ
subq $5, -432(%rbp)
movq -432(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -448(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -384(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -432(%rbp)
movq %rdx, -464(%rbp)
call memcpy
movq -464(%rbp), %rdx
movq -432(%rbp), %rdi
addq %rdx, %rdi
movq -400(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -432(%rbp)
movq %rdx, -464(%rbp)
call memcpy
movq -464(%rbp), %rdx
movq -432(%rbp), %rdi
addq %rdx, %rdi
movq -416(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -432(%rbp)
movq %rdx, -464(%rbp)
call memcpy
movq -448(%rbp), %rdx
movq %rdx, -64(%rbp)
.loc_26_40:
movq evalTmpOFiles(%rip), %rbx
movq %rbx, -384(%rbp)
movq evalTmpOFiles(%rip), %rdi
call __bah_arrayLength
movq %rax, -400(%rbp)
movq -384(%rbp), %rdi
movq -400(%rbp), %rsi
call __Bah_realocate_arr
movq -384(%rbp), %rdi
movq -400(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -64(%rbp), %rdx
movq %rdx, (%rdi)
.loc_26_41:
leaq .VAR_1679(%rip), %rax
movq %rax, -384(%rbp)
leaq .VAR_1681(%rip), %rax
movq %rax, -400(%rbp)
movl $5, %edi
movq -384(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq -400(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -416(%rbp)
call memoryAllocSTR_NZ
subq $5, -416(%rbp)
movq -416(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -432(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -384(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -416(%rbp)
movq %rdx, -448(%rbp)
call memcpy
movq -448(%rbp), %rdx
movq -416(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -416(%rbp)
movq %rdx, -448(%rbp)
call memcpy
movq -448(%rbp), %rdx
movq -416(%rbp), %rdi
addq %rdx, %rdi
movq -400(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -416(%rbp)
movq %rdx, -448(%rbp)
call memcpy
leaq -112(%rbp), %rdi
movq -432(%rbp), %rsi
call command
.loc_26_42:
leaq .VAR_388(%rip), %rdx
movq %rdx, -88(%rbp)
.loc_26_43:
movq $0, -128(%rbp)
.FOR_LOOP_START_1687:
movq -32(%rbp), %rax
addq $32, %rax
movq %rax, -384(%rbp)
movq -384(%rbp), %rax
movq (%rax), %rdi
call __bah_arrayLength
cmpq -128(%rbp), %rax
jle .FOR_NOT_1687
movb %al, %r11b
.loc_26_44:
movq -128(%rbp), %rbx
salq $3, %rbx
movq %rbx, -384(%rbp)
movq -32(%rbp), %rax
addq $32, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rax
addq -384(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rax
movq (%rax), %rdi
call rope.toStr
movq %rax, -432(%rbp)
movl $5, %edi
movq -88(%rbp), %rbx
addl (%rbx), %edi
movq -432(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -448(%rbp)
call memoryAllocSTR_NZ
subq $5, -448(%rbp)
movq -448(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -464(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -88(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -448(%rbp)
movq %rdx, -480(%rbp)
call memcpy
movq -480(%rbp), %rdx
movq -448(%rbp), %rdi
addq %rdx, %rdi
movq -432(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -448(%rbp)
movq %rdx, -480(%rbp)
call memcpy
movq -464(%rbp), %rdx
movq %rdx, -88(%rbp)
addq $1, -128(%rbp)
jmp .FOR_LOOP_START_1687
.FOR_NOT_1687:
.loc_26_48:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rdi
call rope.toStr
movq %rax, -384(%rbp)
movl $5, %edi
movq -88(%rbp), %rbx
addl (%rbx), %edi
movq -384(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -400(%rbp)
call memoryAllocSTR_NZ
subq $5, -400(%rbp)
movq -400(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -416(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -88(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -400(%rbp)
movq %rdx, -432(%rbp)
call memcpy
movq -432(%rbp), %rdx
movq -400(%rbp), %rdi
addq %rdx, %rdi
movq -384(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -400(%rbp)
movq %rdx, -432(%rbp)
call memcpy
movq -416(%rbp), %rdx
movq %rdx, -88(%rbp)
.loc_26_49:
leaq -112(%rbp), %rdi
call command.run
.loc_26_51:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -224(%rbp)
vmovdqu %ymm0, -192(%rbp)
vmovdqu %ymm0, -160(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -240(%rbp)
movq $8, 24(%rax)
movq -240(%rbp), %rdx
movq %rdx, -152(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -256(%rbp)
movq $8, 24(%rax)
movq -256(%rbp), %rdx
movq %rdx, -176(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -272(%rbp)
movq $1, 24(%rax)
movq -272(%rbp), %rdx
movq %rdx, -192(%rbp)
pxor %xmm0, %xmm0
vmovdqu %xmm0, -304(%rbp)
movq %xmm0, -288(%rbp)
xorb %al, %al
movb %al, -280(%rbp)
movb $0, -280(%rbp)
movq $-1, -304(%rbp)
vmovdqu -304(%rbp), %xmm0
vmovdqu %xmm0, -224(%rbp)
movq -288(%rbp), %xmm1
movq %xmm1, -208(%rbp)
movb -280(%rbp), %bl
movb %bl, -200(%rbp)
.loc_26_52:
leaq -224(%rbp), %rdi
movq -64(%rbp), %rsi
call objectFile.open
.loc_26_53:
leaq -224(%rbp), %rdi
call objectFile.weakLinker
.loc_26_55:
movq -32(%rbp), %rax
leaq -224(%rbp), %rdi
movq (%rax), %rsi
movq $2, %rdx
call objectFile.getSymbol
movq -32(%rbp), %rdi
addq $40, %rdi
movq %rax, (%rdi)
.loc_26_57:
movq -32(%rbp), %rax
addq $40, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_1706
.loc_26_58:
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.toggleFlag
.loc_26_59:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -368(%rbp)
vmovdqu %xmm0, -336(%rbp)
movss %xmm0, -320(%rbp)
xorb %al, %al
movb %al, -316(%rbp)
movb %al, -315(%rbp)
movq $-1, -328(%rbp)
movq -16(%rbp), %rdi
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -320(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -316(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1706:
.loc_26_62:
addq $1, evalFuncNb(%rip)
.IF_NOT_1668:
.loc_26_65:
movq $40, %rdi
call memoryAlloc
movq %rax, -64(%rbp)
movq $8, 24(%rax)
.loc_26_66:
movq -48(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_26_67:
movq -80(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_1708
movb %al, %r11b
.FOR_LOOP_START_1708:
.loc_26_68:
movq -80(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .IF_NOT_1716
.loc_26_69:
movq -80(%rbp), %rax
addq $64, %rax
movq %rax, -384(%rbp)
movq -384(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rax
movq (%rax), %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rdi
call tokToInt
movq %rax, -432(%rbp)
movq -64(%rbp), %rdi
call __bah_arrayLength
movq %rax, -448(%rbp)
movq -64(%rbp), %rdi
movq -448(%rbp), %rsi
call __Bah_realocate_arr
movq -64(%rbp), %rdi
movq -448(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -432(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_1726
.IF_NOT_1716:
.loc_26_70:
movq -80(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
jne .ELSE_NOT_1726
.loc_26_71:
movq -80(%rbp), %rax
addq $64, %rax
movq %rax, -384(%rbp)
movq -384(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rax
movq (%rax), %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rdi
call tokToUint
movq %rax, -432(%rbp)
movq -64(%rbp), %rdi
call __bah_arrayLength
movq %rax, -448(%rbp)
movq -64(%rbp), %rdi
movq -448(%rbp), %rsi
call __Bah_realocate_arr
movq -64(%rbp), %rdi
movq -448(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -432(%rbp), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_1726:
movq -80(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_1708
.FOR_NOT_1708:
.loc_26_75:
.loc_26_79:
movq $0, -96(%rbp)
.loc_26_80:
movq -64(%rbp), %rdi
call __bah_arrayLength
movq %rax, %r11
movq %r11, %rdx
cmpq $1, %rdx
jne .IF_NOT_1734
.loc_26_81:
movq -32(%rbp), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -112(%rbp)
.loc_26_82:
movq -64(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, -384(%rbp)
movq -384(%rbp), %rdi
call *-112(%rbp)
movq %rax, -96(%rbp)
jmp .ELSE_NOT_1758
.IF_NOT_1734:
.loc_26_83:
movq -64(%rbp), %rdi
call __bah_arrayLength
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
jne .ELSE_NOT_1739
.loc_26_84:
movq -32(%rbp), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -112(%rbp)
.loc_26_85:
movq -64(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, -384(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -400(%rbp)
movq -384(%rbp), %rdi
movq -400(%rbp), %rsi
call *-112(%rbp)
movq %rax, -96(%rbp)
jmp .ELSE_NOT_1758
.ELSE_NOT_1739:
.loc_26_86:
movq -64(%rbp), %rdi
call __bah_arrayLength
movq %rax, %r11
movq %r11, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_1745
.loc_26_87:
movq -32(%rbp), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -112(%rbp)
.loc_26_88:
movq -64(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, -384(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -400(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -416(%rbp)
movq -384(%rbp), %rdi
movq -400(%rbp), %rsi
movq -416(%rbp), %rdx
call *-112(%rbp)
movq %rax, -96(%rbp)
jmp .ELSE_NOT_1758
.ELSE_NOT_1745:
.loc_26_89:
movq -64(%rbp), %rdi
call __bah_arrayLength
movq %rax, %r11
movq %r11, %rdx
cmpq $4, %rdx
jne .ELSE_NOT_1752
.loc_26_90:
movq -32(%rbp), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -112(%rbp)
.loc_26_91:
movq -64(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, -384(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -400(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -416(%rbp)
movq -64(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq -384(%rbp), %rdi
movq -400(%rbp), %rsi
movq -416(%rbp), %rdx
movq -432(%rbp), %rcx
call *-112(%rbp)
movq %rax, -96(%rbp)
jmp .ELSE_NOT_1758
.ELSE_NOT_1752:
.loc_26_92:
.loc_26_93:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -160(%rbp)
vmovdqu %xmm0, -128(%rbp)
movss %xmm0, -112(%rbp)
xorb %al, %al
movb %al, -108(%rbp)
movb %al, -107(%rbp)
movq $-1, -120(%rbp)
movq -16(%rbp), %rdi
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -112(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -108(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_1758:
.loc_26_96:
movq -96(%rbp), %rdi
call uintToStr
leaq -160(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
movq -16(%rbp), %rdi
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -112(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -108(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.global .evalFunc_end
.evalFunc_end:
.global generateValueOperation
generateValueOperation:
pushq %rbp
movq %rsp, %rbp
subq $1616, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_26_100:
movq -32(%rbp), %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_26_102:
movq $0, -80(%rbp)
.loc_26_103:
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
jne .IF_NOT_1764
.loc_26_104:
movq $1, -80(%rbp)
jmp .ELSE_NOT_1849
.IF_NOT_1764:
.loc_26_105:
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_1768
.loc_26_106:
movq $2, -80(%rbp)
jmp .ELSE_NOT_1849
.ELSE_NOT_1768:
.loc_26_107:
movq -48(%rbp), %rax
addq $65, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_1769
movq -48(%rbp), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .BOOL_AND_1769
movb $1, %al
jmp .BOOL_AND_1769_END
.BOOL_AND_1769:
movb $0, %al
.BOOL_AND_1769_END:
cmpb $0, %al
je .ELSE_NOT_1775
.loc_26_108:
leaq .VAR_388(%rip), %rdx
movq %rdx, -96(%rbp)
.loc_26_109:
movq -64(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $43, %dl
jne .IF_NOT_1779
.loc_26_110:
leaq .VAR_1780(%rip), %rdx
movq %rdx, -96(%rbp)
jmp .ELSE_NOT_1791
.IF_NOT_1779:
.loc_26_111:
movq -64(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $45, %dl
jne .ELSE_NOT_1783
.loc_26_112:
leaq .VAR_1784(%rip), %rdx
movq %rdx, -96(%rbp)
jmp .ELSE_NOT_1791
.ELSE_NOT_1783:
.loc_26_113:
movq -64(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $42, %dl
jne .ELSE_NOT_1787
.loc_26_114:
leaq .VAR_1788(%rip), %rdx
movq %rdx, -96(%rbp)
jmp .ELSE_NOT_1791
.ELSE_NOT_1787:
.loc_26_115:
movq -64(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .ELSE_NOT_1791
.loc_26_116:
leaq .VAR_1792(%rip), %rdx
movq %rdx, -96(%rbp)
.ELSE_NOT_1791:
.loc_26_119:
movq -96(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .IF_NOT_1795
.loc_26_120:
movq -48(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1568(%rbp)
call memoryAllocSTR_NZ
subq $5, -1568(%rbp)
movq -1568(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1584(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
movq -1600(%rbp), %rdx
movq -1568(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
leaq parserCtx(%rip), %rdi
movq -1584(%rbp), %rsi
call parserContext.findFunc
movq %rax, -112(%rbp)
.loc_26_122:
movq -112(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_1804
.loc_26_123:
movq -112(%rbp), %rax
addq $8, %rax
movq %rax, -1552(%rbp)
movq -1552(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1568(%rbp)
movq -48(%rbp), %rdi
movq -1568(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1809
.loc_26_124:
leaq .VAR_1810(%rip), %rax
movq %rax, -1552(%rbp)
movq -112(%rbp), %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -32(%rbp), %rdi
movq -1600(%rbp), %rsi
call throwError
.IF_NOT_1809:
.loc_26_127:
movq -112(%rbp), %rax
addq $8, %rax
movq %rax, -1552(%rbp)
movq -1552(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1568(%rbp)
movq -1568(%rbp), %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, -1584(%rbp)
movq -48(%rbp), %rdi
movq -1584(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1822
.loc_26_128:
leaq .VAR_1810(%rip), %rax
movq %rax, -1552(%rbp)
movq -112(%rbp), %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -32(%rbp), %rdi
movq -1600(%rbp), %rsi
call throwError
.IF_NOT_1822:
.loc_26_131:
movq -112(%rbp), %rax
addq $8, %rax
movq %rax, -1552(%rbp)
movq -1552(%rbp), %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, -1568(%rbp)
movq -48(%rbp), %rdi
movq -1568(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_1834
.loc_26_132:
movq -112(%rbp), %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq .VAR_1837(%rip), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -32(%rbp), %rdi
movq -1600(%rbp), %rsi
call throwError
.IF_NOT_1834:
.loc_26_135:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_136:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_137:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_138:
movq -112(%rbp), %rax
movq %rax, -1552(%rbp)
leaq -176(%rbp), %rdi
movq -1552(%rbp), %rax
movq (%rax), %rsi
call asmSymbolValue
movq -112(%rbp), %rax
addq $8, %rax
movq %rax, -1568(%rbp)
movq -1568(%rbp), %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, -1584(%rbp)
movq -1584(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1600(%rbp)
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movq -1600(%rbp), %rax
movq (%rax), %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1804:
.IF_NOT_1795:
jmp .ELSE_NOT_1849
.ELSE_NOT_1775:
.loc_26_142:
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .ELSE_NOT_1849
.loc_26_143:
movq -64(%rbp), %rdi
leaq .VAR_1850(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1851
.loc_26_144:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_145:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_146:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_147:
leaq -144(%rbp), %rdi
movq strCompareFunction(%rip), %rsi
call asmSymbolValue
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
movq $1, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_1853
.IF_NOT_1851:
.loc_26_148:
movq -64(%rbp), %rdi
leaq .VAR_1852(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_1853
.loc_26_149:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_150:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_151:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_152:
leaq -144(%rbp), %rdi
movq strCompareFunction(%rip), %rsi
call asmSymbolValue
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
movq $1, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_153:
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
.loc_26_154:
movq $1, -264(%rbp)
.loc_26_155:
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $0, %rcx
call asmContext.generateCompare
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -288(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -284(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_1853:
.loc_26_158:
movq -64(%rbp), %rdi
leaq .VAR_1855(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_1857
.loc_26_159:
movq -32(%rbp), %rdi
leaq .VAR_1858(%rip), %rsi
call throwError
.IF_NOT_1857:
.ELSE_NOT_1849:
.loc_26_166:
movq -64(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_1859_END
movq -64(%rbp), %rdi
leaq .VAR_1861(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_1859_NOT
.BOOL_OR_1859:
movb $1, %al
jmp .BOOL_OR_1859_END
.BOOL_OR_1859_NOT:
movb $0, %al
.BOOL_OR_1859_END:
cmpb $0, %al
je .IF_NOT_1862
.loc_26_167:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq -80(%rbp), %rdx
call asmContext.generateOpMult
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1862:
.loc_26_170:
movq -64(%rbp), %rdi
leaq .VAR_1864(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_1863_END
movq -64(%rbp), %rdi
leaq .VAR_1865(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_1863_NOT
.BOOL_OR_1863:
movb $1, %al
jmp .BOOL_OR_1863_END
.BOOL_OR_1863_NOT:
movb $0, %al
.BOOL_OR_1863_END:
cmpb $0, %al
je .IF_NOT_1866
.loc_26_171:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq -80(%rbp), %rdx
call asmContext.generateOpDiv
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1866:
.loc_26_174:
movq -64(%rbp), %rdi
leaq .VAR_1868(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_1867_END
movq -64(%rbp), %rdi
leaq .VAR_1869(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_1867_NOT
.BOOL_OR_1867:
movb $1, %al
jmp .BOOL_OR_1867_END
.BOOL_OR_1867_NOT:
movb $0, %al
.BOOL_OR_1867_END:
cmpb $0, %al
je .IF_NOT_1870
.loc_26_175:
movq -80(%rbp), %rdx
cmpq $2, %rdx
jne .IF_NOT_1872
.loc_26_176:
movq -32(%rbp), %rdi
leaq .VAR_1873(%rip), %rsi
call throwError
.IF_NOT_1872:
.loc_26_178:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq -80(%rbp), %rdx
call asmContext.generateOpMod
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1870:
.loc_26_181:
movq -64(%rbp), %rdi
leaq .VAR_1875(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_1874_END
movq -64(%rbp), %rdi
leaq .VAR_1876(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_1874_NOT
.BOOL_OR_1874:
movb $1, %al
jmp .BOOL_OR_1874_END
.BOOL_OR_1874_NOT:
movb $0, %al
.BOOL_OR_1874_END:
cmpb $0, %al
je .IF_NOT_1877
.loc_26_182:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq -80(%rbp), %rdx
call asmContext.generateOpSub
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1877:
.loc_26_185:
movq -64(%rbp), %rdi
leaq .VAR_1879(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_1878_END
movq -64(%rbp), %rdi
leaq .VAR_1880(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_1878_NOT
.BOOL_OR_1878:
movb $1, %al
jmp .BOOL_OR_1878_END
.BOOL_OR_1878_NOT:
movb $0, %al
.BOOL_OR_1878_END:
cmpb $0, %al
je .IF_NOT_1881
.loc_26_186:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq -80(%rbp), %rdx
call asmContext.generateOpAdd
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1881:
.loc_26_189:
movq -64(%rbp), %rdi
leaq .VAR_1882(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1883
.loc_26_190:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $4, %rdx
movq $0, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1883:
.loc_26_193:
movq -64(%rbp), %rdi
leaq .VAR_1884(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1885
.loc_26_194:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $3, %rdx
movq $0, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1885:
.loc_26_197:
movq -64(%rbp), %rdi
leaq .VAR_1886(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1887
.loc_26_198:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $2, %rdx
movq $0, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1887:
.loc_26_201:
movq -64(%rbp), %rdi
leaq .VAR_1888(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1889
.loc_26_202:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $0, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1889:
.loc_26_205:
movq -64(%rbp), %rdi
leaq .VAR_1890(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1891
.loc_26_206:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $1, %rdx
movq $0, %rcx
call asmContext.generateOpBitwise
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1891:
.loc_26_209:
movq -64(%rbp), %rdi
leaq .VAR_1855(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1893
.loc_26_210:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, 16(%rbp)
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, 48(%rbp)
movd -96(%rbp), %xmm2
movd %xmm2, 64(%rbp)
movw -92(%rbp), %bx
movw %bx, 68(%rbp)
.loc_26_212:
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
movq $1, %rdx
movq $0, %rcx
call asmContext.generateTmpDecl
.loc_26_213:
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_214:
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
movq $8, %rdx
movq $0, %rcx
call asmContext.generateTmpDecl
.loc_26_215:
movq $67, %rdi
call memoryAlloc
movq %rax, -352(%rbp)
movq -352(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -352(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
movq -352(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
.loc_26_219:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_221:
movq -48(%rbp), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
.loc_26_223:
leaq gen(%rip), %rdi
call asmContext.generateFor
.loc_26_224:
leaq gen(%rip), %rax
addq $152, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_arrayLength
movq %rax, %rbx
addq $-1, %rbx
movq %rbx, -496(%rbp)
.loc_26_227:
movq $8, %rdi
call uintToStr
leaq -560(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -624(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -560(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -528(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -512(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -508(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_228:
leaq -688(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -592(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -576(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -572(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
.loc_26_230:
movq -32(%rbp), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -784(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -752(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -744(%rbp)
vmovdqu -784(%rbp), %ymm1
vmovdqu %ymm1, -736(%rbp)
movq -752(%rbp), %xmm1
movq %xmm1, -704(%rbp)
movb -744(%rbp), %bl
movb %bl, -696(%rbp)
.loc_26_231:
leaq .VAR_1901(%rip), %rdx
movq %rdx, -736(%rbp)
.loc_26_232:
leaq -848(%rbp), %rdi
leaq -736(%rbp), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -688(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -656(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -640(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -636(%rbp), %bx
movw %bx, (%r10)
movq -352(%rbp), %rdx
call generateValueOperation
addq $128, %rsp
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -848(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -816(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -800(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -796(%rbp), %bx
movw %bx, (%r10)
movq -496(%rbp), %rsi
call asmContext.generateForCond
addq $64, %rsp
.loc_26_234:
leaq -912(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
movb $0, %dl
movsbl %dl, %edx
call asmContext.generateSelfOp
addq $64, %rsp
.loc_26_236:
movq $8, %rdi
call uintToStr
leaq -976(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1040(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -976(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -944(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -928(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -924(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_237:
leaq -1104(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1040(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1008(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -992(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -988(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
.loc_26_238:
leaq -1168(%rbp), %rdi
leaq -736(%rbp), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1104(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1072(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1056(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1052(%rbp), %bx
movw %bx, (%r10)
movq -352(%rbp), %rdx
call generateValueOperation
addq $128, %rsp
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1168(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1136(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1120(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1116(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateForOptimizedCond
addq $64, %rsp
.loc_26_240:
leaq gen(%rip), %rdi
call asmContext.generateForIncr
.loc_26_243:
movq -32(%rbp), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -1216(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -1184(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -1176(%rbp)
vmovdqu -1216(%rbp), %ymm1
vmovdqu %ymm1, -736(%rbp)
movq -1184(%rbp), %xmm1
movq %xmm1, -704(%rbp)
movb -1176(%rbp), %bl
movb %bl, -696(%rbp)
.loc_26_244:
leaq .VAR_1850(%rip), %rdx
movq %rdx, -736(%rbp)
.loc_26_246:
leaq -1280(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
.loc_26_247:
leaq -1344(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
movq $1, %rdx
call asmContext.generateOpMult
addq $128, %rsp
leaq -1408(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1280(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1248(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1232(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1228(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1344(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1312(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1296(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1292(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_248:
movq -48(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -1400(%rbp)
.loc_26_249:
movq $1, -1376(%rbp)
.loc_26_251:
leaq -1472(%rbp), %rdi
leaq -736(%rbp), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1408(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1376(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1360(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1356(%rbp), %bx
movw %bx, (%r10)
movq -48(%rbp), %rdx
call generateValueOperation
addq $128, %rsp
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1472(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1440(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1424(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1420(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateIf
addq $64, %rsp
.loc_26_252:
leaq -1536(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1905(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1536(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1504(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1488(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1484(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_253:
leaq gen(%rip), %rdi
call asmContext.generateForBreak
.loc_26_255:
leaq gen(%rip), %rdi
call asmContext.generateEndIf
.loc_26_256:
leaq gen(%rip), %rdi
movq $1, %rsi
call asmContext.generateForEnd
.loc_26_258:
movq $1, -200(%rbp)
.loc_26_260:
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1893:
.loc_26_263:
vmovdqu 80(%rbp), %ymm1
vmovdqu %ymm1, -144(%rbp)
vmovdqu 112(%rbp), %xmm1
vmovdqu %xmm1, -112(%rbp)
movd 128(%rbp), %xmm2
movd %xmm2, -96(%rbp)
movw 132(%rbp), %bx
movw %bx, -92(%rbp)
.loc_26_264:
movb -93(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_1906
movb -94(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_1906
movb $1, %al
jmp .BOOL_AND_1906_END
.BOOL_AND_1906:
movb $0, %al
.BOOL_AND_1906_END:
cmpb $0, %al
je .IF_NOT_1909
.loc_26_265:
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
movq -136(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, -144(%rbp)
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, -112(%rbp)
movd -160(%rbp), %xmm2
movd %xmm2, -96(%rbp)
movw -156(%rbp), %bx
movw %bx, -92(%rbp)
.IF_NOT_1909:
.loc_26_268:
movq -64(%rbp), %rdi
leaq .VAR_1901(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1911
.loc_26_269:
movq -80(%rbp), %rdx
cmpq $1, %rdx
sete %al
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $3, %rdx
movb %al, %cl
movsbl %cl, %ecx
call asmContext.generateCompare
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1911:
.loc_26_272:
movq -64(%rbp), %rdi
leaq .VAR_1913(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1914
.loc_26_273:
movq -80(%rbp), %rdx
cmpq $1, %rdx
sete %al
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $2, %rdx
movb %al, %cl
movsbl %cl, %ecx
call asmContext.generateCompare
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1914:
.loc_26_276:
movq -64(%rbp), %rdi
leaq .VAR_1916(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1917
.loc_26_277:
movq -80(%rbp), %rdx
cmpq $1, %rdx
sete %al
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $4, %rdx
movb %al, %cl
movsbl %cl, %ecx
call asmContext.generateCompare
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1917:
.loc_26_280:
movq -64(%rbp), %rdi
leaq .VAR_1919(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1920
.loc_26_281:
movq -80(%rbp), %rdx
cmpq $1, %rdx
sete %al
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $5, %rdx
movb %al, %cl
movsbl %cl, %ecx
call asmContext.generateCompare
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1920:
.loc_26_284:
movq -64(%rbp), %rdi
leaq .VAR_1850(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1923
.loc_26_285:
movq -80(%rbp), %rdx
cmpq $1, %rdx
sete %al
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movb %al, %cl
movsbl %cl, %ecx
call asmContext.generateCompare
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1923:
.loc_26_288:
movq -64(%rbp), %rdi
leaq .VAR_1852(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1926
.loc_26_289:
movq -80(%rbp), %rdx
cmpq $1, %rdx
sete %al
leaq -208(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu 16(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu 48(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd 64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw 68(%rbp), %bx
movw %bx, (%r10)
movq $1, %rdx
movb %al, %cl
movsbl %cl, %ecx
call asmContext.generateCompare
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1926:
.loc_26_292:
movq -32(%rbp), %rdi
leaq .VAR_1928(%rip), %rsi
call throwError
.loc_26_294:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -208(%rbp)
vmovdqu %xmm0, -176(%rbp)
movss %xmm0, -160(%rbp)
xorb %al, %al
movb %al, -156(%rbp)
movb %al, -155(%rbp)
movq $-1, -168(%rbp)
.loc_26_295:
movq -16(%rbp), %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.global .generateValueOperation_end
.generateValueOperation_end:
.global generateBahValueSymbol
generateBahValueSymbol:
pushq %rbp
movq %rsp, %rbp
subq $1872, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_26_299:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -112(%rbp)
vmovdqu %xmm0, -80(%rbp)
movss %xmm0, -64(%rbp)
xorb %al, %al
movb %al, -60(%rbp)
movb %al, -59(%rbp)
movq $-1, -72(%rbp)
.loc_26_301:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $17, %rdx
jne .IF_NOT_1932
.loc_26_302:
movq -32(%rbp), %rax
addq $80, %rax
movq -16(%rbp), %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1932:
.loc_26_305:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .IF_NOT_1937
.loc_26_306:
.FOR_LOOP_START_1938:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .FOR_NOT_1938
movb %al, %r8b
.loc_26_307:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq -32(%rbp), %rdi
addq $56, %rdi
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
jmp .FOR_LOOP_START_1938
.FOR_NOT_1938:
.IF_NOT_1937:
.loc_26_311:
movq -32(%rbp), %rax
addq $134, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_1946
.loc_26_312:
movq -32(%rbp), %rdx
movq %rdx, -128(%rbp)
.loc_26_313:
.FOR_LOOP_START_1947:
movq -128(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .FOR_NOT_1947
movb %al, %r9b
.loc_26_314:
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -128(%rbp)
jmp .FOR_LOOP_START_1947
.FOR_NOT_1947:
.loc_26_316:
movq -128(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_AND_1952
movq -128(%rbp), %rax
addq $138, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
je .BOOL_AND_1952
movq -128(%rbp), %rax
addq $138, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
movb %al, -1393(%rbp)
movb -1393(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
je .BOOL_AND_1952
movq -128(%rbp), %rax
addq $138, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movb (%rax), %al
movb %al, -1409(%rbp)
movb -1409(%rbp), %dl
movzbq %dl, %rdx
cmpq $13, %rdx
je .BOOL_AND_1952
movb $1, %al
jmp .BOOL_AND_1952_END
.BOOL_AND_1952:
movb $0, %al
.BOOL_AND_1952_END:
cmpb $0, %al
je .IF_NOT_1965
.loc_26_317:
movq -32(%rbp), %rdi
addq $134, %rdi
movb $0, (%rdi)
.loc_26_318:
leaq -192(%rbp), %rdi
movq -32(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_319:
movq $8, -184(%rbp)
.loc_26_320:
movq -160(%rbp), %rdx
cmpq $1, %rdx
jne .IF_NOT_1967
.loc_26_321:
movq $0, -160(%rbp)
.loc_26_322:
movq -16(%rbp), %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -144(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -140(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1967:
.loc_26_325:
movq $-1, -160(%rbp)
.loc_26_326:
movq -16(%rbp), %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -144(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -140(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1965:
.IF_NOT_1946:
.loc_26_330:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .IF_NOT_1971
.loc_26_331:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .IF_NOT_1976
.loc_26_332:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movl (%rax), %eax
movl %eax, -1432(%rbp)
movl -1424(%rbp), %edi
movq $1, %rsi
movl -1432(%rbp), %edx
call strSubstitute
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rdi
leaq .VAR_1982(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_1983
.loc_26_333:
leaq -176(%rbp), %rdi
leaq .VAR_1984(%rip), %rsi
call asmSymbolStaticName
.loc_26_334:
movq $-1, -144(%rbp)
.loc_26_335:
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_2015
.IF_NOT_1983:
.loc_26_336:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movl (%rax), %eax
movl %eax, -1432(%rbp)
movl -1424(%rbp), %edi
movq $1, %rsi
movl -1432(%rbp), %edx
call strSubstitute
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rdi
leaq .VAR_1990(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_1991
.loc_26_337:
leaq -176(%rbp), %rdi
leaq .VAR_1992(%rip), %rsi
call asmSymbolStaticName
.loc_26_338:
movq $-1, -144(%rbp)
.loc_26_339:
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_2015
.ELSE_NOT_1991:
.loc_26_340:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movl (%rax), %eax
movl %eax, -1432(%rbp)
movl -1424(%rbp), %edi
movq $1, %rsi
movl -1432(%rbp), %edx
call strSubstitute
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rdi
leaq .VAR_1998(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_1999
.loc_26_341:
leaq -176(%rbp), %rdi
leaq .VAR_2000(%rip), %rsi
call asmSymbolStaticName
.loc_26_342:
movq $-1, -144(%rbp)
.loc_26_343:
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_2015
.ELSE_NOT_1999:
.loc_26_344:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movl (%rax), %eax
movl %eax, -1432(%rbp)
movl -1424(%rbp), %edi
movq $1, %rsi
movl -1432(%rbp), %edx
call strSubstitute
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rdi
leaq .VAR_2006(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_2007
.loc_26_345:
leaq -176(%rbp), %rdi
leaq .VAR_2008(%rip), %rsi
call asmSymbolStaticName
.loc_26_346:
movq $-1, -144(%rbp)
.loc_26_347:
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_2015
.ELSE_NOT_2007:
.loc_26_348:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movl (%rax), %eax
movl %eax, -1432(%rbp)
movl -1424(%rbp), %edi
movq $1, %rsi
movl -1432(%rbp), %edx
call strSubstitute
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rdi
leaq .VAR_2014(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_2015
.loc_26_349:
leaq -176(%rbp), %rdi
leaq .VAR_2016(%rip), %rsi
call asmSymbolStaticName
.loc_26_350:
movq $-1, -144(%rbp)
.loc_26_351:
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2015:
.loc_26_353:
movb $1, -60(%rbp)
.loc_26_354:
leaq .VAR_1868(%rip), %rax
movq %rax, -1392(%rbp)
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movl (%rax), %eax
movl -1408(%rbp), %edi
movq $1, %rsi
movl %eax, %edx
call strSubstitute
movq %rax, -1424(%rbp)
movl $5, %edi
movq -1392(%rbp), %rbx
addl (%rbx), %edi
movq -1424(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1440(%rbp)
call memoryAllocSTR_NZ
subq $5, -1440(%rbp)
movq -1440(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1456(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1392(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1440(%rbp)
movq %rdx, -1472(%rbp)
call memcpy
movq -1472(%rbp), %rdx
movq -1440(%rbp), %rdi
addq %rdx, %rdi
movq -1424(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1440(%rbp)
movq %rdx, -1472(%rbp)
call memcpy
movq -1456(%rbp), %rdx
movq %rdx, -112(%rbp)
.loc_26_355:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -104(%rbp)
.loc_26_356:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1976:
.loc_26_358:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
leaq -176(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
movq -1408(%rbp), %rax
movq (%rax), %rdx
call generateTypeConversion
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_1971:
.loc_26_361:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .IF_NOT_2034
.loc_26_362:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_2036(%rip), %rsi
call throwError
.IF_NOT_2034:
.loc_26_365:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $14, %rdx
jne .IF_NOT_2040
.loc_26_367:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .IF_NOT_2045
.loc_26_368:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2046(%rip), %rdx
movq (%rax), %rcx
movq $0, %r8
call asmContext.generateVarDecl
.loc_26_369:
movq $-1, -144(%rbp)
.loc_26_370:
movq $8, -168(%rbp)
.loc_26_371:
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2045:
.loc_26_374:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_OR_2049
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_2054
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movb (%rax), %al
movb %al, -1441(%rbp)
movb -1441(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .BOOL_AND_2054
movb $1, %al
jmp .BOOL_AND_2054_END
.BOOL_AND_2054:
movb $0, %al
.BOOL_AND_2054_END:
cmpb $1, %al
jne .BOOL_OR_2049_NOT
.BOOL_OR_2049:
movb $1, %al
jmp .BOOL_OR_2049_END
.BOOL_OR_2049_NOT:
movb $0, %al
.BOOL_OR_2049_END:
cmpb $0, %al
je .IF_NOT_2062
.loc_26_375:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -176(%rbp)
vmovdqu %xmm0, -144(%rbp)
movss %xmm0, -128(%rbp)
xorb %al, %al
movb %al, -124(%rbp)
movb %al, -123(%rbp)
.loc_26_377:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rdx
movq %rdx, -192(%rbp)
.loc_26_378:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_2066
.loc_26_379:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -192(%rbp)
.IF_NOT_2066:
.loc_26_381:
leaq parserCtx(%rip), %rdi
movq -192(%rbp), %rsi
leaq .VAR_2069(%rip), %rdx
call parserContext.findMethod
movq %rax, -208(%rbp)
.loc_26_383:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2074
.loc_26_384:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2075(%rip), %rdx
movq (%rax), %rcx
movq $1, %r8
call asmContext.generateVarDecl
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, -176(%rbp)
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, -144(%rbp)
movd -224(%rbp), %xmm2
movd %xmm2, -128(%rbp)
movw -220(%rbp), %bx
movw %bx, -124(%rbp)
.loc_26_385:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -288(%rbp)
.loc_26_386:
movq -288(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2079
movb %al, %r11b
.FOR_LOOP_START_2079:
.loc_26_387:
movq -288(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdx
movq -160(%rbp), %rbx
subq %rdx, %rbx
movq -288(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
leaq -352(%rbp), %rdi
movq %rbx, %rsi
movq (%rax), %rdx
call asmSymbolStack
.loc_26_388:
movq -288(%rbp), %rax
addq $72, %rax
leaq -416(%rbp), %rdi
movq (%rax), %rsi
leaq -352(%rbp), %rdx
call generateBahValueSymbol
.loc_26_389:
leaq -416(%rbp), %rdi
call isEmptySymbol
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2091
.loc_26_390:
movq -288(%rbp), %rax
addq $56, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movb (%rax), %al
movb %al, -1409(%rbp)
movb -1409(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
movb %al, -1410(%rbp)
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -304(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -300(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movb -1410(%rbp), %sil
movsbl %sil, %esi
call asmContext.generateVarSet
addq $128, %rsp
.IF_NOT_2091:
movq -288(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -288(%rbp)
movq -288(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2079
.FOR_NOT_2079:
.loc_26_394:
movq -208(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_2097
.loc_26_395:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_396:
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, -352(%rbp)
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, -320(%rbp)
movd -128(%rbp), %xmm2
movd %xmm2, -304(%rbp)
movw -124(%rbp), %bx
movw %bx, -300(%rbp)
.loc_26_397:
movq $-1, -320(%rbp)
.loc_26_398:
movq $8, -344(%rbp)
.loc_26_399:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -304(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -300(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_400:
movq -208(%rbp), %rax
leaq -416(%rbp), %rdi
movq (%rax), %rsi
call asmSymbolValue
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.IF_NOT_2097:
.loc_26_403:
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2074:
.loc_26_406:
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2075(%rip), %rdx
movq $8, %rcx
movq $0, %r8
call asmContext.generateVarDecl
.loc_26_407:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_408:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_409:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rdi
call containsPtr
cmpb $0, %al
je .IF_NOT_2106
.loc_26_410:
leaq -400(%rbp), %rdi
movq memoryAllocFunction(%rip), %rsi
call asmSymbolValue
leaq -464(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -400(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -368(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -352(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -348(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -432(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -416(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -412(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
jmp .ELSE_NOT_2107
.IF_NOT_2106:
.loc_26_411:
.loc_26_412:
leaq -400(%rbp), %rdi
movq memoryAllocFunctionSTR(%rip), %rsi
call asmSymbolValue
leaq -464(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -400(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -368(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -352(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -348(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -432(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -416(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -412(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.ELSE_NOT_2107:
.loc_26_414:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
.loc_26_415:
movq -352(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2109
movb %al, %r11b
.FOR_LOOP_START_2109:
.loc_26_416:
movq -352(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_2117
.loc_26_417:
movq -352(%rbp), %rax
addq $72, %rax
leaq -416(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_418:
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
.loc_26_419:
movq -352(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdi
call intToStr
leaq -544(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -608(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -496(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -492(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_420:
movq -352(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -600(%rbp)
.loc_26_421:
leaq -672(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -608(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -576(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -560(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -556(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_422:
movq -352(%rbp), %rax
addq $56, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movb (%rax), %al
movb %al, -1409(%rbp)
movb -1409(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
movb %al, -1410(%rbp)
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -672(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -640(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -624(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -620(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
movb -1410(%rbp), %sil
movsbl %sil, %esi
call asmContext.generateVarSet
addq $128, %rsp
jmp .ELSE_NOT_2146
.IF_NOT_2117:
.loc_26_423:
movq -352(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq $16, %rax
cmpq %r9, %rax
jnb .ELSE_NOT_2132
.loc_26_424:
movq -352(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdi
call intToStr
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_425:
leaq -544(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
.loc_26_426:
movq $1, -512(%rbp)
.loc_26_427:
movq -352(%rbp), %rax
addq $72, %rax
leaq -608(%rbp), %rdi
movq (%rax), %rsi
leaq -544(%rbp), %rdx
call generateBahValueSymbol
.loc_26_428:
leaq -608(%rbp), %rdi
call isEmptySymbol
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2139
.loc_26_429:
movq $0, -512(%rbp)
.loc_26_430:
movq -352(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -536(%rbp)
.loc_26_431:
leaq -672(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -496(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -492(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
vmovdqu -672(%rbp), %ymm1
vmovdqu %ymm1, -544(%rbp)
vmovdqu -640(%rbp), %xmm1
vmovdqu %xmm1, -512(%rbp)
movd -624(%rbp), %xmm2
movd %xmm2, -496(%rbp)
movw -620(%rbp), %bx
movw %bx, -492(%rbp)
.loc_26_432:
movq -352(%rbp), %rax
addq $56, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movb (%rax), %al
movb %al, -1409(%rbp)
movb -1409(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
movb %al, -1410(%rbp)
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -496(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -492(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -608(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -576(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -560(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -556(%rbp), %bx
movw %bx, (%r10)
movb -1410(%rbp), %sil
movsbl %sil, %esi
call asmContext.generateVarSet
addq $128, %rsp
.IF_NOT_2139:
jmp .ELSE_NOT_2146
.ELSE_NOT_2132:
.loc_26_435:
.loc_26_436:
movq -352(%rbp), %rax
addq $72, %rax
leaq -416(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_437:
movq -352(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdi
call intToStr
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -544(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_438:
movq -352(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -536(%rbp)
.loc_26_439:
leaq -608(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -496(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -492(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_440:
movq -352(%rbp), %rax
addq $56, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movb (%rax), %al
movb %al, -1409(%rbp)
movb -1409(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
movb %al, -1410(%rbp)
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -608(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -576(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -560(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -556(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movb -1410(%rbp), %sil
movsbl %sil, %esi
call asmContext.generateVarSet
addq $128, %rsp
.ELSE_NOT_2146:
movq -352(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
movq -352(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2109
.FOR_NOT_2109:
.loc_26_444:
movq $8, -264(%rbp)
.loc_26_447:
movq -208(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_2158
.loc_26_448:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_449:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_450:
movq -208(%rbp), %rax
leaq -416(%rbp), %rdi
movq (%rax), %rsi
call asmSymbolValue
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.IF_NOT_2158:
.loc_26_453:
movq -16(%rbp), %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -224(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -220(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2062:
.loc_26_456:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_2164
.loc_26_457:
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2165(%rip), %rdx
movq $8, %rcx
movq $0, %r8
call asmContext.generateVarDecl
.loc_26_458:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_459:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -192(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -188(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_461:
leaq -304(%rbp), %rdi
movq memoryAllocFunction(%rip), %rsi
call asmSymbolValue
leaq -368(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_462:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -320(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -316(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_464:
movq $1, -336(%rbp)
.loc_26_465:
movq $24, -344(%rbp)
.loc_26_466:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
leaq -432(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -320(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -316(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -384(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -380(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_469:
movq $0, -448(%rbp)
.loc_26_470:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -464(%rbp)
.loc_26_471:
movq -464(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2174
movb %al, %r11b
.FOR_LOOP_START_2174:
.loc_26_472:
addq $1, -448(%rbp)
movq -464(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -464(%rbp)
movq -464(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2174
.FOR_NOT_2174:
.loc_26_475:
movq -448(%rbp), %rdx
cmpq $0, %rdx
jle .IF_NOT_2179
.loc_26_476:
movq $8, -344(%rbp)
.loc_26_477:
movq -448(%rbp), %rdi
call uintToStr
leaq -528(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -320(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -316(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -528(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -496(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -480(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -476(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_479:
movq $16, -344(%rbp)
.loc_26_480:
movq -448(%rbp), %rdi
call uintToStr
leaq -592(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -320(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -316(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -592(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -560(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -544(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -540(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_481:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_482:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %rbx
imulq -448(%rbp), %rbx
movq %rbx, %rdi
call uintToStr
leaq -656(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -656(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -624(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -608(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -604(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_483:
leaq -720(%rbp), %rdi
movq memoryAllocFunction(%rip), %rsi
call asmSymbolValue
.loc_26_484:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rdi
call containsPtr
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2192
.loc_26_485:
movq memoryAllocFunctionSTR(%rip), %rdx
movq %rdx, -720(%rbp)
.IF_NOT_2192:
.loc_26_487:
leaq -784(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -720(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -688(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -672(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -668(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_488:
leaq -848(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_489:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -784(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -752(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -736(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -732(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -848(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -816(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -800(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -796(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_490:
movq $0, -816(%rbp)
.loc_26_491:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -784(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -752(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -736(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -732(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -848(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -816(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -800(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -796(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_494:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -464(%rbp)
.loc_26_495:
movq $0, -864(%rbp)
.loc_26_496:
movq -464(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2194
movb %al, %r11b
.FOR_LOOP_START_2194:
.loc_26_498:
movq -464(%rbp), %rax
addq $64, %rax
leaq -928(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_500:
leaq -992(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
vmovdqu -992(%rbp), %ymm1
vmovdqu %ymm1, -848(%rbp)
vmovdqu -960(%rbp), %xmm1
vmovdqu %xmm1, -816(%rbp)
movd -944(%rbp), %xmm2
movd %xmm2, -800(%rbp)
movw -940(%rbp), %bx
movw %bx, -796(%rbp)
.loc_26_501:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %rbx
imulq -864(%rbp), %rbx
movq %rbx, %rdi
call uintToStr
leaq -1056(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1120(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -848(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -816(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -800(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -796(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1056(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1024(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1008(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1004(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
vmovdqu -1120(%rbp), %ymm1
vmovdqu %ymm1, -848(%rbp)
vmovdqu -1088(%rbp), %xmm1
vmovdqu %xmm1, -816(%rbp)
movd -1072(%rbp), %xmm2
movd %xmm2, -800(%rbp)
movw -1068(%rbp), %bx
movw %bx, -796(%rbp)
.loc_26_503:
movq $1, -816(%rbp)
.loc_26_504:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -840(%rbp)
.loc_26_505:
movq -464(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $64, %rax
movb (%rax), %al
movb %al, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -848(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -816(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -800(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -796(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -928(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -896(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -880(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -876(%rbp), %bx
movw %bx, (%r10)
movb %al, %sil
movsbl %sil, %esi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_507:
addq $1, -864(%rbp)
movq -464(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -464(%rbp)
movq -464(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2194
.FOR_NOT_2194:
.IF_NOT_2179:
.loc_26_512:
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2164:
.loc_26_515:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .IF_NOT_2217
.loc_26_516:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -128(%rbp)
.loc_26_518:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
leaq -192(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2219(%rip), %rdx
movq (%rax), %rcx
movq $0, %r8
call asmContext.generateVarDecl
.loc_26_520:
movq $0, -208(%rbp)
.loc_26_522:
movq -128(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2222
movb %al, %r11b
.FOR_LOOP_START_2222:
.loc_26_523:
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, -272(%rbp)
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, -240(%rbp)
movd -144(%rbp), %xmm2
movd %xmm2, -224(%rbp)
movw -140(%rbp), %bx
movw %bx, -220(%rbp)
.loc_26_524:
movq -256(%rbp), %rbx
subq -208(%rbp), %rbx
movq %rbx, -256(%rbp)
.loc_26_526:
movq -128(%rbp), %rax
addq $72, %rax
leaq -336(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_527:
movq -328(%rbp), %rdx
movq %rdx, -264(%rbp)
.loc_26_529:
movq -128(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $64, %rax
movb (%rax), %al
movb %al, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
movb %al, %sil
movsbl %sil, %esi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_531:
movq -128(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r9
movq -208(%rbp), %rbx
movq %r9, %rax
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -208(%rbp)
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rdx
movq %rdx, -128(%rbp)
movq -128(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2222
.FOR_NOT_2222:
.loc_26_534:
movq -16(%rbp), %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -144(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -140(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2217:
.IF_NOT_2040:
.loc_26_541:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .IF_NOT_2238
.loc_26_542:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -176(%rbp)
vmovdqu %xmm0, -144(%rbp)
movss %xmm0, -128(%rbp)
xorb %al, %al
movb %al, -124(%rbp)
movb %al, -123(%rbp)
.loc_26_543:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .IF_NOT_2244
.loc_26_544:
leaq -240(%rbp), %rdi
movq strSplitFunction(%rip), %rsi
call asmSymbolValue
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, -176(%rbp)
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, -144(%rbp)
movd -192(%rbp), %xmm2
movd %xmm2, -128(%rbp)
movw -188(%rbp), %bx
movw %bx, -124(%rbp)
jmp .ELSE_NOT_2250
.IF_NOT_2244:
.loc_26_545:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .ELSE_NOT_2250
.loc_26_546:
leaq -240(%rbp), %rdi
movq arraySplitFunction(%rip), %rsi
call asmSymbolValue
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, -176(%rbp)
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, -144(%rbp)
movd -192(%rbp), %xmm2
movd %xmm2, -128(%rbp)
movw -188(%rbp), %bx
movw %bx, -124(%rbp)
.ELSE_NOT_2250:
.loc_26_548:
movq -32(%rbp), %rax
addq $64, %rax
leaq -240(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_549:
leaq -304(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -192(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -188(%rbp), %bx
movw %bx, (%r10)
movq -232(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
.loc_26_550:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -368(%rbp)
vmovdqu %xmm0, -336(%rbp)
movss %xmm0, -320(%rbp)
xorb %al, %al
movb %al, -316(%rbp)
movb %al, -315(%rbp)
.loc_26_552:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $72, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $0, %rdx
jne .IF_NOT_2256
.loc_26_553:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .IF_NOT_2262
.loc_26_554:
movq $4, -296(%rbp)
.loc_26_555:
leaq -432(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, -368(%rbp)
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, -336(%rbp)
movd -384(%rbp), %xmm2
movd %xmm2, -320(%rbp)
movw -380(%rbp), %bx
movw %bx, -316(%rbp)
jmp .ELSE_NOT_2268
.IF_NOT_2262:
.loc_26_556:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .ELSE_NOT_2268
.loc_26_557:
movq $8, %rdi
call uintToStr
leaq -432(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -496(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -384(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -380(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
vmovdqu -496(%rbp), %ymm1
vmovdqu %ymm1, -368(%rbp)
vmovdqu -464(%rbp), %xmm1
vmovdqu %xmm1, -336(%rbp)
movd -448(%rbp), %xmm2
movd %xmm2, -320(%rbp)
movw -444(%rbp), %bx
movw %bx, -316(%rbp)
.loc_26_558:
leaq -560(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -320(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -316(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
vmovdqu -560(%rbp), %ymm1
vmovdqu %ymm1, -368(%rbp)
vmovdqu -528(%rbp), %xmm1
vmovdqu %xmm1, -336(%rbp)
movd -512(%rbp), %xmm2
movd %xmm2, -320(%rbp)
movw -508(%rbp), %bx
movw %bx, -316(%rbp)
.ELSE_NOT_2268:
.IF_NOT_2256:
.loc_26_562:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_564:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_566:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $0, %rdx
jne .IF_NOT_2274
.loc_26_567:
leaq -432(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, -304(%rbp)
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, -272(%rbp)
movd -384(%rbp), %xmm2
movd %xmm2, -256(%rbp)
movw -380(%rbp), %bx
movw %bx, -252(%rbp)
jmp .ELSE_NOT_2276
.IF_NOT_2274:
.loc_26_568:
.loc_26_569:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $64, %rax
leaq -432(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, -304(%rbp)
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, -272(%rbp)
movd -384(%rbp), %xmm2
movd %xmm2, -256(%rbp)
movw -380(%rbp), %bx
movw %bx, -252(%rbp)
.ELSE_NOT_2276:
.loc_26_571:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_573:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $72, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $0, %rdx
je .IF_NOT_2283
.loc_26_574:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $72, %rax
leaq -432(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, -368(%rbp)
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, -336(%rbp)
movd -384(%rbp), %xmm2
movd %xmm2, -320(%rbp)
movw -380(%rbp), %bx
movw %bx, -316(%rbp)
.IF_NOT_2283:
.loc_26_576:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -320(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -316(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_578:
leaq -432(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_579:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -424(%rbp)
.loc_26_581:
movq -16(%rbp), %rdi
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -384(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -380(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2238:
.loc_26_584:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .IF_NOT_2291
.loc_26_585:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .IF_NOT_2297
.loc_26_586:
movq -32(%rbp), %rax
addq $64, %rax
leaq -176(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_587:
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2299(%rip), %rdx
call asmContext.staticInt
leaq -304(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -192(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -188(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_588:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2303
.loc_26_589:
leaq -368(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
movq -296(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, -304(%rbp)
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, -272(%rbp)
movd -320(%rbp), %xmm2
movd %xmm2, -256(%rbp)
movw -316(%rbp), %bx
movw %bx, -252(%rbp)
.IF_NOT_2303:
.loc_26_591:
movq -32(%rbp), %rax
addq $72, %rax
leaq -368(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq -432(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -320(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -316(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_593:
movq $1, -424(%rbp)
.loc_26_594:
leaq -496(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -384(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -380(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -496(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -464(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -448(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -444(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2297:
.loc_26_597:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .IF_NOT_2310
.loc_26_598:
movq -32(%rbp), %rax
addq $64, %rax
leaq -176(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_599:
movq -32(%rbp), %rax
addq $72, %rax
leaq -240(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_600:
movq $8, -168(%rbp)
.loc_26_601:
leaq -304(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -192(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -188(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_602:
movq $1, -296(%rbp)
.loc_26_603:
movq $1, -272(%rbp)
.loc_26_604:
movq -16(%rbp), %rdi
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -256(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -252(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2310:
.loc_26_607:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_2318
.loc_26_608:
movq -32(%rbp), %rax
addq $72, %rax
leaq -176(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_609:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -304(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -192(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -188(%rbp), %bx
movw %bx, (%r10)
movq $1, %rdx
call asmContext.generateOpMult
addq $128, %rsp
.loc_26_611:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2328
.loc_26_612:
leaq -368(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, -304(%rbp)
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, -272(%rbp)
movd -320(%rbp), %xmm2
movd %xmm2, -256(%rbp)
movw -316(%rbp), %bx
movw %bx, -252(%rbp)
.IF_NOT_2328:
.loc_26_615:
movq -32(%rbp), %rax
addq $64, %rax
leaq -368(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_616:
leaq -432(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -320(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -316(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
.loc_26_618:
leaq -496(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -432(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -400(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -384(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -380(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_619:
movq $1, -464(%rbp)
.loc_26_620:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -488(%rbp)
.loc_26_621:
movq -16(%rbp), %rdi
vmovdqu -496(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -464(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -448(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -444(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2318:
.loc_26_624:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .IF_NOT_2339
.loc_26_625:
movq -32(%rbp), %rax
addq $64, %rax
leaq -176(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_626:
movq $-1, -144(%rbp)
.loc_26_627:
movq $8, -168(%rbp)
.loc_26_628:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdi
call uintToStr
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -304(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -192(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -188(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_629:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -296(%rbp)
.loc_26_630:
movq $0, -272(%rbp)
.loc_26_631:
movq -16(%rbp), %rdi
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -256(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -252(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2339:
.IF_NOT_2291:
.loc_26_635:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $8, %rdx
jne .IF_NOT_2349
.loc_26_636:
movq -32(%rbp), %rax
addq $64, %rax
leaq -176(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_637:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -168(%rbp)
.loc_26_638:
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateUnary
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2349:
.loc_26_641:
movq -32(%rbp), %rax
addq $135, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_2356
.loc_26_642:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
je .BOOL_OR_2357
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
movb %al, -1393(%rbp)
movb -1393(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
jne .BOOL_OR_2357_NOT
.BOOL_OR_2357:
movb $1, %al
jmp .BOOL_OR_2357_END
.BOOL_OR_2357_NOT:
movb $0, %al
.BOOL_OR_2357_END:
cmpb $0, %al
je .IF_NOT_2366
.loc_26_643:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $7, %rdx
jne .IF_NOT_2370
.loc_26_645:
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
addq $4, %rax
addq $1, %rax
movzbq (%rax), %rax
movq %rax, -128(%rbp)
.loc_26_646:
movq -128(%rbp), %rdi
call uintToStr
leaq -192(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
.loc_26_647:
movq $1, -184(%rbp)
.loc_26_648:
movq -16(%rbp), %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -144(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -140(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_2376
.IF_NOT_2370:
.loc_26_649:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .ELSE_NOT_2376
.loc_26_650:
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
.loc_26_651:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -168(%rbp)
.loc_26_652:
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2376:
jmp .ELSE_NOT_2404
.IF_NOT_2366:
.loc_26_654:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_2385
.loc_26_655:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $4, %rdx
jne .IF_NOT_2390
.loc_26_656:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
movq %rax, -1408(%rbp)
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
movq -1408(%rbp), %rdx
call asmContext.staticFloat32
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_2397
.IF_NOT_2390:
.loc_26_657:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $8, %rdx
jne .ELSE_NOT_2397
.loc_26_658:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
movq %rax, -1408(%rbp)
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
movq -1408(%rbp), %rdx
call asmContext.staticFloat64
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2397:
jmp .ELSE_NOT_2404
.ELSE_NOT_2385:
.loc_26_660:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .ELSE_NOT_2404
.loc_26_661:
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -1392(%rbp)
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %rdi
call getStrLen
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
movq -1392(%rbp), %rdx
movq %rax, %rcx
call asmContext.generateStaticStr
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2404:
.loc_26_664:
movq -32(%rbp), %rax
addq $80, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rdi
call isEmptySymbol
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2413
.loc_26_665:
movq -32(%rbp), %rax
addq $80, %rax
movq -16(%rbp), %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2413:
.IF_NOT_2356:
.loc_26_669:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_OR_2415
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .BOOL_OR_2415_NOT
.BOOL_OR_2415:
movb $1, %al
jmp .BOOL_OR_2415_END
.BOOL_OR_2415_NOT:
movb $0, %al
.BOOL_OR_2415_END:
cmpb $0, %al
je .IF_NOT_2422
.loc_26_670:
movq $0, -128(%rbp)
.FOR_LOOP_START_2423:
leaq parserCtx(%rip), %rax
movq (%rax), %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rdi
call __bah_arrayLength
cmpq -128(%rbp), %rax
jle .FOR_NOT_2423
movb %al, %r11b
.loc_26_671:
movq -128(%rbp), %rbx
salq $3, %rbx
leaq parserCtx(%rip), %rax
movq (%rax), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
movq %rax, -1408(%rbp)
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
movq %rax, -1440(%rbp)
movq -1408(%rbp), %rdi
movq -1440(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_2430
.loc_26_672:
movq -128(%rbp), %rbx
salq $3, %rbx
leaq parserCtx(%rip), %rax
movq (%rax), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
addq $24, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -192(%rbp)
addq $32, %rax
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, -160(%rbp)
addq $16, %rax
movd (%rax), %xmm2
movd %xmm2, -144(%rbp)
addq $4, %rax
movw (%rax), %bx
movw %bx, -140(%rbp)
.loc_26_673:
movq -32(%rbp), %rax
addq $134, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_2433
.loc_26_674:
movq $-1, -160(%rbp)
.loc_26_675:
movq $8, -184(%rbp)
.IF_NOT_2433:
.loc_26_677:
movq -16(%rbp), %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -144(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -140(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2430:
addq $1, -128(%rbp)
jmp .FOR_LOOP_START_2423
.FOR_NOT_2423:
.IF_NOT_2422:
.loc_26_682:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_2437
.loc_26_683:
movq -32(%rbp), %rax
addq $80, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rdi
call isEmptySymbol
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2441
.loc_26_684:
movq -32(%rbp), %rax
addq $80, %rax
movq -16(%rbp), %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2441:
.loc_26_686:
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
leaq -176(%rbp), %rdi
movq %rax, %rsi
call asmSymbolValue
.loc_26_687:
movq $8, -168(%rbp)
.loc_26_688:
movq $-1, -144(%rbp)
.loc_26_689:
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2437:
.loc_26_692:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .IF_NOT_2448
.loc_26_693:
movq $0, -128(%rbp)
.loc_26_695:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_2453
.loc_26_696:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $80, %rax
movq -16(%rbp), %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2453:
.loc_26_699:
movb $0, -129(%rbp)
.loc_26_700:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdx
movq -128(%rbp), %rbx
subq %rdx, %rbx
movq %rbx, -128(%rbp)
.loc_26_702:
movq -32(%rbp), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_703:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2465
.loc_26_704:
movb $0, -129(%rbp)
.loc_26_705:
cmpb $0, -142(%rbp)
je .BOOL_AND_2466
movb -141(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_2466
movb $1, %al
jmp .BOOL_AND_2466_END
.BOOL_AND_2466:
movb $0, %al
.BOOL_AND_2466_END:
cmpb $0, %al
je .IF_NOT_2468
.loc_26_706:
movq -128(%rbp), %rbx
addq -176(%rbp), %rbx
movq %rbx, -128(%rbp)
.loc_26_707:
movb $1, -62(%rbp)
jmp .ELSE_NOT_2469
.IF_NOT_2468:
.loc_26_708:
.loc_26_709:
movq -184(%rbp), %rdx
movq %rdx, -208(%rbp)
.loc_26_710:
movq $16, %rax
cmpq -184(%rbp), %rax
jb .BOOL_AND_2470
movq -160(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_AND_2470
movb $1, %al
jmp .BOOL_AND_2470_END
.BOOL_AND_2470:
movb $0, %al
.BOOL_AND_2470_END:
movb %al, -209(%rbp)
.loc_26_711:
movq $8, -184(%rbp)
.loc_26_712:
movb -142(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2474
.loc_26_713:
movq $-1, -160(%rbp)
jmp .ELSE_NOT_2475
.IF_NOT_2474:
.loc_26_714:
.loc_26_715:
movq $0, -160(%rbp)
.ELSE_NOT_2475:
.loc_26_717:
movq $0, %rbx
subq -128(%rbp), %rbx
movq %rbx, %rdi
call intToStr
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_718:
movq -32(%rbp), %rax
addq $134, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2481
.loc_26_719:
cmpb $0, -209(%rbp)
je .IF_NOT_2482
.loc_26_720:
leaq .VAR_2483(%rip), %rdi
leaq .VAR_2484(%rip), %rsi
call __Bah_panic
.IF_NOT_2482:
.loc_26_722:
leaq -400(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
vmovdqu -400(%rbp), %ymm1
vmovdqu %ymm1, -112(%rbp)
vmovdqu -368(%rbp), %xmm1
vmovdqu %xmm1, -80(%rbp)
movd -352(%rbp), %xmm2
movd %xmm2, -64(%rbp)
movw -348(%rbp), %bx
movw %bx, -60(%rbp)
.loc_26_723:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, -104(%rbp)
jmp .ELSE_NOT_2487
.IF_NOT_2481:
.loc_26_724:
.loc_26_725:
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, -112(%rbp)
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, -80(%rbp)
movd -288(%rbp), %xmm2
movd %xmm2, -64(%rbp)
movw -284(%rbp), %bx
movw %bx, -60(%rbp)
.loc_26_726:
movq $8, -104(%rbp)
.ELSE_NOT_2487:
.loc_26_728:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_2492
.loc_26_729:
movb $1, -64(%rbp)
jmp .ELSE_NOT_2499
.IF_NOT_2492:
.loc_26_730:
movq -80(%rbp), %rdx
cmpq $-1, %rdx
je .BOOL_AND_2493
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .BOOL_AND_2493
movb $1, %al
jmp .BOOL_AND_2493_END
.BOOL_AND_2493:
movb $0, %al
.BOOL_AND_2493_END:
cmpb $0, %al
je .ELSE_NOT_2499
.loc_26_731:
subq $1, -80(%rbp)
.ELSE_NOT_2499:
.loc_26_733:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2469:
jmp .ELSE_NOT_2500
.IF_NOT_2465:
.loc_26_735:
.loc_26_736:
movb $1, -129(%rbp)
.loc_26_737:
movq $0, %rbx
subq -128(%rbp), %rbx
movq %rbx, %rdi
call intToStr
leaq -256(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -320(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_738:
leaq -384(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -272(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -268(%rbp), %bx
movw %bx, (%r10)
movq -312(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -384(%rbp), %ymm1
vmovdqu %ymm1, -112(%rbp)
vmovdqu -352(%rbp), %xmm1
vmovdqu %xmm1, -80(%rbp)
movd -336(%rbp), %xmm2
movd %xmm2, -64(%rbp)
movw -332(%rbp), %bx
movw %bx, -60(%rbp)
.loc_26_739:
movq -96(%rbp), %rdx
movq %rdx, -128(%rbp)
.loc_26_740:
movq $1, -80(%rbp)
.ELSE_NOT_2500:
.loc_26_744:
movq -128(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_26_745:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -104(%rbp)
.loc_26_746:
movb $1, -59(%rbp)
.loc_26_747:
movq -32(%rbp), %rax
addq $134, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $1, %al
je .BOOL_OR_2505_END
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .BOOL_OR_2505_NOT
.BOOL_OR_2505:
movb $1, %al
jmp .BOOL_OR_2505_END
.BOOL_OR_2505_NOT:
movb $0, %al
.BOOL_OR_2505_END:
cmpb $0, %al
je .IF_NOT_2511
.loc_26_748:
cmpb $0, -129(%rbp)
je .IF_NOT_2512
.loc_26_749:
movq $0, -80(%rbp)
jmp .ELSE_NOT_2513
.IF_NOT_2512:
.loc_26_750:
.loc_26_751:
movq $-1, -80(%rbp)
.ELSE_NOT_2513:
.loc_26_753:
movq $8, -104(%rbp)
.IF_NOT_2511:
.loc_26_755:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_2518
.loc_26_756:
movb $1, -64(%rbp)
.IF_NOT_2518:
.loc_26_759:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2448:
.loc_26_762:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .IF_NOT_2522
.loc_26_764:
movq -32(%rbp), %rax
addq $136, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_2524
.loc_26_765:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rdi
leaq .VAR_1879(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_2528
.loc_26_766:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
leaq -176(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movb $0, %dl
movsbl %dl, %edx
call asmContext.generateSelfOp
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_2530
.IF_NOT_2528:
.loc_26_767:
.loc_26_768:
movq -32(%rbp), %rax
addq $64, %rax
leaq -176(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq -240(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
movb $1, %dl
movsbl %dl, %edx
call asmContext.generateSelfOp
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2530:
.IF_NOT_2524:
.loc_26_772:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_2532
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movq (%rax), %rax
movq %rax, -1456(%rbp)
movq -1456(%rbp), %rdi
leaq .VAR_1850(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_2532
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -1472(%rbp)
movq -1472(%rbp), %rax
movq (%rax), %rax
movq %rax, -1488(%rbp)
movq -1488(%rbp), %rdi
leaq .VAR_1852(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_2532
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -1489(%rbp)
movb -1489(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_AND_2532
movb $1, %al
jmp .BOOL_AND_2532_END
.BOOL_AND_2532:
movb $0, %al
.BOOL_AND_2532_END:
cmpb $0, %al
je .IF_NOT_2550
.loc_26_773:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_2552(%rip), %rsi
call throwError
.IF_NOT_2550:
.loc_26_776:
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -128(%rbp)
.loc_26_778:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .BOOL_AND_2554
movq -128(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, -1377(%rbp)
movb -1377(%rbp), %dl
cmpb $43, %dl
jne .BOOL_AND_2554
movb $1, %al
jmp .BOOL_AND_2554_END
.BOOL_AND_2554:
movb $0, %al
.BOOL_AND_2554_END:
cmpb $0, %al
je .IF_NOT_2562
.loc_26_779:
leaq gen(%rip), %rdi
call asmContext.generateStrConcatBegin
.loc_26_781:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rdi
leaq .VAR_1879(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_2567
.loc_26_782:
movq -32(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_26_783:
movq -144(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2568
movb %al, %r11b
.FOR_LOOP_START_2568:
.loc_26_784:
movq -144(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_OR_2572
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
cmpb $43, %dl
je .BOOL_OR_2572_NOT
.BOOL_OR_2572:
movb $1, %al
jmp .BOOL_OR_2572_END
.BOOL_OR_2572_NOT:
movb $0, %al
.BOOL_OR_2572_END:
cmpb $0, %al
je .IF_NOT_2579
.loc_26_785:
leaq -208(%rbp), %rdi
movq -144(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateStrConcat
addq $64, %rsp
.loc_26_786:
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
call asmContext.generateStrConcatEnd
movq -16(%rbp), %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -224(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -220(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2579:
.loc_26_788:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
leaq -208(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateStrConcat
addq $64, %rsp
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
movq -144(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2568
.FOR_NOT_2568:
.IF_NOT_2567:
.loc_26_792:
movq -32(%rbp), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateStrConcat
addq $64, %rsp
.loc_26_793:
movq -32(%rbp), %rax
addq $72, %rax
leaq -256(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateStrConcat
addq $64, %rsp
.loc_26_794:
leaq -320(%rbp), %rdi
leaq gen(%rip), %rsi
call asmContext.generateStrConcatEnd
movq -16(%rbp), %rdi
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -272(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -268(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2562:
.loc_26_797:
movq -128(%rbp), %rdi
leaq .VAR_1534(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_2584
.loc_26_798:
leaq gen(%rip), %rax
addq $136, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_2585
.loc_26_799:
movq -32(%rbp), %rdi
call optimizeBranchlessOR
movq %rax, -32(%rbp)
.loc_26_800:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $17, %rdx
jne .IF_NOT_2589
.loc_26_801:
movq -32(%rbp), %rax
addq $80, %rax
movq -16(%rbp), %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2589:
.IF_NOT_2585:
.loc_26_804:
leaq gen(%rip), %rdi
call asmContext.generateBoolOrStart
.loc_26_805:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movb (%rax), %al
movb %al, -1409(%rbp)
movb -1409(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_AND_2591
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movq (%rax), %rax
movq %rax, -1456(%rbp)
movq -1456(%rbp), %rdi
leaq .VAR_1534(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_2591
movb $1, %al
jmp .BOOL_AND_2591_END
.BOOL_AND_2591:
movb $0, %al
.BOOL_AND_2591_END:
cmpb $0, %al
je .IF_NOT_2600
.loc_26_806:
movq -32(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_26_807:
movq -144(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2601
movb %al, %r11b
.FOR_LOOP_START_2601:
.loc_26_808:
movq -144(%rbp), %rax
addq $138, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
movb %al, -1393(%rbp)
movb -1393(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_OR_2605
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rdi
leaq .VAR_1534(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_OR_2605_NOT
.BOOL_OR_2605:
movb $1, %al
jmp .BOOL_OR_2605_END
.BOOL_OR_2605_NOT:
movb $0, %al
.BOOL_OR_2605_END:
cmpb $0, %al
je .IF_NOT_2613
.loc_26_809:
leaq -208(%rbp), %rdi
movq -144(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateBoolOrEnd
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -224(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -220(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2613:
.loc_26_811:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
leaq -208(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateBoolOr
addq $64, %rsp
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
movq -144(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2601
.FOR_NOT_2601:
.IF_NOT_2600:
.loc_26_815:
movq -32(%rbp), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateBoolOr
addq $64, %rsp
.loc_26_816:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -1392(%rbp)
leaq -256(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq -320(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateBoolOrEnd
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -272(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -268(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_2618
.IF_NOT_2584:
.loc_26_818:
movq -128(%rbp), %rdi
leaq .VAR_1593(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_2618
.loc_26_819:
leaq gen(%rip), %rax
addq $136, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_2619
.loc_26_820:
movq -32(%rbp), %rdi
call optimizeBranchlessAND
movq %rax, -32(%rbp)
.loc_26_821:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $17, %rdx
jne .IF_NOT_2623
.loc_26_822:
movq -32(%rbp), %rax
addq $80, %rax
movq -16(%rbp), %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2623:
.IF_NOT_2619:
.loc_26_825:
leaq gen(%rip), %rdi
call asmContext.generateBoolAndStart
.loc_26_827:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rdi
leaq .VAR_1593(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_2629
.loc_26_828:
movq -32(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_26_829:
movq -144(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2630
movb %al, %r11b
.FOR_LOOP_START_2630:
.loc_26_830:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rdi
leaq .VAR_1593(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_2638
.loc_26_831:
leaq -208(%rbp), %rdi
movq -144(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateBoolAndEnd
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -224(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -220(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2638:
.loc_26_833:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
leaq -208(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateBoolAnd
addq $64, %rsp
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
movq -144(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2630
.FOR_NOT_2630:
.IF_NOT_2629:
.loc_26_837:
movq -32(%rbp), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateBoolAnd
addq $64, %rsp
.loc_26_838:
movq -32(%rbp), %rax
addq $72, %rax
leaq -256(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq -320(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateBoolAndEnd
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -272(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -268(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2618:
.loc_26_843:
movq -128(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $45, %dl
je .BOOL_OR_2643
movq -128(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $47, %dl
jne .BOOL_OR_2643_NOT
.BOOL_OR_2643:
movb $1, %al
jmp .BOOL_OR_2643_END
.BOOL_OR_2643_NOT:
movb $0, %al
.BOOL_OR_2643_END:
cmpb $0, %al
je .BOOL_AND_2642
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
movb %al, -1393(%rbp)
movb -1393(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_AND_2642
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
movq %rax, -1440(%rbp)
movq -32(%rbp), %rax
movq %rax, -1456(%rbp)
movq -1440(%rbp), %rdx
movq -1456(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .BOOL_AND_2642
movb $1, %al
jmp .BOOL_AND_2642_END
.BOOL_AND_2642:
movb $0, %al
.BOOL_AND_2642_END:
cmpb $0, %al
je .IF_NOT_2657
.loc_26_844:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
.loc_26_845:
movq -32(%rbp), %rdx
movq %rdx, -160(%rbp)
.loc_26_846:
movq -32(%rbp), %rax
addq $64, %rax
leaq -224(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_848:
.FOR_LOOP_START_2660:
movq -144(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq -32(%rbp), %rax
movq %rax, %r9
movq %r10, %rdx
movq %r9, %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .FOR_NOT_2660
movb %al, %r8b
.loc_26_849:
leaq -288(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
movq -216(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, -224(%rbp)
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, -192(%rbp)
movd -240(%rbp), %xmm2
movd %xmm2, -176(%rbp)
movw -236(%rbp), %bx
movw %bx, -172(%rbp)
.loc_26_850:
movq -160(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
movq -144(%rbp), %rax
addq $64, %rax
leaq -352(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
leaq -416(%rbp), %rdi
movq -1392(%rbp), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -304(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -300(%rbp), %bx
movw %bx, (%r10)
movq (%rax), %rdx
call generateValueOperation
addq $128, %rsp
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, -224(%rbp)
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, -192(%rbp)
movd -368(%rbp), %xmm2
movd %xmm2, -176(%rbp)
movw -364(%rbp), %bx
movw %bx, -172(%rbp)
.loc_26_852:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
je .IF_NOT_2674
.loc_26_853:
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
movq -216(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, -224(%rbp)
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, -192(%rbp)
movd -432(%rbp), %xmm2
movd %xmm2, -176(%rbp)
movw -428(%rbp), %bx
movw %bx, -172(%rbp)
.loc_26_854:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
movq -144(%rbp), %rax
addq $72, %rax
leaq -544(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -144(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $56, %rax
leaq -608(%rbp), %rdi
movq -1392(%rbp), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -496(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -492(%rbp), %bx
movw %bx, (%r10)
movq (%rax), %rdx
call generateValueOperation
addq $128, %rsp
vmovdqu -608(%rbp), %ymm1
vmovdqu %ymm1, -224(%rbp)
vmovdqu -576(%rbp), %xmm1
vmovdqu %xmm1, -192(%rbp)
movd -560(%rbp), %xmm2
movd %xmm2, -176(%rbp)
movw -556(%rbp), %bx
movw %bx, -172(%rbp)
.loc_26_855:
jmp .FOR_NOT_2660
.IF_NOT_2674:
.loc_26_857:
movq -144(%rbp), %rdx
movq %rdx, -160(%rbp)
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
jmp .FOR_LOOP_START_2660
.FOR_NOT_2660:
.loc_26_860:
movq -144(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_AND_2679
movq -144(%rbp), %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, -1392(%rbp)
movq -32(%rbp), %rax
movq %rax, -1408(%rbp)
movq -1392(%rbp), %rdx
movq -1408(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
je .BOOL_AND_2679
movb $1, %al
jmp .BOOL_AND_2679_END
.BOOL_AND_2679:
movb $0, %al
.BOOL_AND_2679_END:
cmpb $0, %al
je .IF_NOT_2687
.loc_26_861:
leaq -288(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
movq -216(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, -224(%rbp)
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, -192(%rbp)
movd -240(%rbp), %xmm2
movd %xmm2, -176(%rbp)
movw -236(%rbp), %bx
movw %bx, -172(%rbp)
.loc_26_862:
movq -160(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
leaq -352(%rbp), %rdi
movq -144(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -144(%rbp), %rax
addq $56, %rax
leaq -416(%rbp), %rdi
movq -1392(%rbp), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -304(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -300(%rbp), %bx
movw %bx, (%r10)
movq (%rax), %rdx
call generateValueOperation
addq $128, %rsp
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, -224(%rbp)
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, -192(%rbp)
movd -368(%rbp), %xmm2
movd %xmm2, -176(%rbp)
movw -364(%rbp), %bx
movw %bx, -172(%rbp)
.IF_NOT_2687:
.loc_26_865:
movq -16(%rbp), %rdi
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -176(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -172(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2657:
.loc_26_870:
movq -32(%rbp), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_872:
leaq -256(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq -184(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
.loc_26_874:
movq -32(%rbp), %rax
addq $72, %rax
leaq -320(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_878:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
leaq -384(%rbp), %rdi
movq -1392(%rbp), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -272(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -268(%rbp), %bx
movw %bx, (%r10)
movq (%rax), %rdx
call generateValueOperation
addq $128, %rsp
movq -16(%rbp), %rdi
vmovdqu -384(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -352(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -336(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -332(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2522:
.loc_26_882:
movq -32(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .IF_NOT_2698
.loc_26_884:
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -128(%rbp)
.loc_26_885:
movb $0, -129(%rbp)
.loc_26_887:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movb (%rax), %al
movb %al, -1409(%rbp)
movb -1409(%rbp), %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .BOOL_AND_2700
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1456(%rbp)
movq -1456(%rbp), %rax
movq (%rax), %rax
movq %rax, -1472(%rbp)
movq -1472(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_2700
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1488(%rbp)
movq -1488(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1504(%rbp)
movq -1504(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1520(%rbp)
movq -1520(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -1536(%rbp)
movq -1536(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_2700
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1552(%rbp)
movq -1552(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1568(%rbp)
movq -1568(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1584(%rbp)
movq -1584(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -1600(%rbp)
movq -1600(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_2715
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1616(%rbp)
movq -1616(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1632(%rbp)
movq -1632(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1648(%rbp)
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1664(%rbp)
movq -1664(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1680(%rbp)
movq -1680(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1696(%rbp)
movq -1648(%rbp), %rax
movq (%rax), %rdi
movq -1696(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
cmpb $0, %al
je .BOOL_AND_2715
movb $1, %al
jmp .BOOL_AND_2715_END
.BOOL_AND_2715:
movb $0, %al
.BOOL_AND_2715_END:
cmpb $1, %al
je .BOOL_OR_2714_END
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1712(%rbp)
movq -1712(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1728(%rbp)
movq -1728(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1744(%rbp)
movq -1744(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -1760(%rbp)
movq -1760(%rbp), %rax
movb (%rax), %al
movb %al, -1761(%rbp)
movb -1761(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_2726
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1776(%rbp)
movq -1776(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1792(%rbp)
movq -1792(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1808(%rbp)
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1824(%rbp)
movq -1824(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1840(%rbp)
movq -1840(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1856(%rbp)
movq -1856(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1872(%rbp)
movq -1808(%rbp), %rax
movq (%rax), %rdi
movq -1872(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
cmpb $0, %al
je .BOOL_AND_2726
movb $1, %al
jmp .BOOL_AND_2726_END
.BOOL_AND_2726:
movb $0, %al
.BOOL_AND_2726_END:
cmpb $1, %al
jne .BOOL_OR_2714_NOT
.BOOL_OR_2714:
movb $1, %al
jmp .BOOL_OR_2714_END
.BOOL_OR_2714_NOT:
movb $0, %al
.BOOL_OR_2714_END:
cmpb $0, %al
je .BOOL_AND_2700
movb $1, %al
jmp .BOOL_AND_2700_END
.BOOL_AND_2700:
movb $0, %al
.BOOL_AND_2700_END:
cmpb $0, %al
je .IF_NOT_2740
.loc_26_888:
movb $1, -129(%rbp)
.loc_26_890:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_891:
movq -32(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $138, %rdi
movb $17, (%rdi)
.loc_26_892:
movq -32(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $80, %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -144(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -140(%rbp), %bx
movw %bx, (%rdi)
.IF_NOT_2740:
.loc_26_895:
movq -32(%rbp), %rax
addq $64, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_897:
movb -140(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_2744
movq -160(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_2744
movb $1, %al
jmp .BOOL_AND_2744_END
.BOOL_AND_2744:
movb $0, %al
.BOOL_AND_2744_END:
cmpb $0, %al
je .IF_NOT_2747
.loc_26_898:
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, -256(%rbp)
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, -224(%rbp)
movd -144(%rbp), %xmm2
movd %xmm2, -208(%rbp)
movw -140(%rbp), %bx
movw %bx, -204(%rbp)
.loc_26_899:
movq $0, -224(%rbp)
.loc_26_900:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.IF_NOT_2747:
.loc_26_903:
movq -128(%rbp), %rdi
leaq .VAR_2748(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_2749
.loc_26_904:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
leaq -256(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
movq -16(%rbp), %rdi
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -208(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -204(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2749:
.loc_26_907:
movq -128(%rbp), %rdi
leaq .VAR_2755(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_2756
.loc_26_908:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -1377(%rbp)
movb -1377(%rbp), %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_2763
.loc_26_909:
leaq -256(%rbp), %rdi
leaq .VAR_2764(%rip), %rsi
call asmSymbolValue
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -208(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -204(%rbp), %bx
movw %bx, -140(%rbp)
jmp .ELSE_NOT_2779
.IF_NOT_2763:
.loc_26_910:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -1377(%rbp)
movb -1377(%rbp), %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .ELSE_NOT_2771
.loc_26_911:
leaq -256(%rbp), %rdi
leaq .VAR_2772(%rip), %rsi
call asmSymbolValue
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -208(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -204(%rbp), %bx
movw %bx, -140(%rbp)
jmp .ELSE_NOT_2779
.ELSE_NOT_2771:
.loc_26_912:
movq -32(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -1377(%rbp)
movb -1377(%rbp), %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .ELSE_NOT_2779
.loc_26_913:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -208(%rbp)
.loc_26_914:
movq $0, -224(%rbp)
.loc_26_915:
movq -208(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2784
movb %al, %r11b
.FOR_LOOP_START_2784:
.loc_26_916:
addq $1, -224(%rbp)
movq -208(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -208(%rbp)
movq -208(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2784
.FOR_NOT_2784:
.loc_26_918:
movq -224(%rbp), %rdi
call uintToStr
movq %rax, -1392(%rbp)
leaq -288(%rbp), %rdi
leaq gen(%rip), %rsi
movq -1392(%rbp), %rdx
call asmContext.staticInt
movq -16(%rbp), %rdi
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -240(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -236(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2779:
jmp .ELSE_NOT_2790
.IF_NOT_2756:
.loc_26_920:
movq -128(%rbp), %rdi
leaq .VAR_2789(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_2790
.loc_26_921:
leaq -256(%rbp), %rdi
leaq .VAR_2791(%rip), %rsi
call asmSymbolValue
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -208(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -204(%rbp), %bx
movw %bx, -140(%rbp)
.loc_26_922:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_924:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $64, %rax
leaq -320(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_925:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -272(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -268(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_927:
leaq .VAR_2794(%rip), %rax
movq %rax, -1392(%rbp)
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rax
movq %rax, %rdi
call absPath
movq %rax, -1408(%rbp)
leaq .VAR_1400(%rip), %rax
movq %rax, -1424(%rbp)
movq -32(%rbp), %rax
addq $8, %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %rdi
call uintToStr
movq %rax, -1440(%rbp)
leaq .VAR_2794(%rip), %rax
movq %rax, -1456(%rbp)
movl $5, %edi
movq -1392(%rbp), %rbx
addl (%rbx), %edi
movq -1408(%rbp), %rbx
addl (%rbx), %edi
movq -1424(%rbp), %rbx
addl (%rbx), %edi
movq -1440(%rbp), %rbx
addl (%rbx), %edi
movq -1456(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1472(%rbp)
call memoryAllocSTR_NZ
subq $5, -1472(%rbp)
movq -1472(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1488(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1392(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1472(%rbp)
movq %rdx, -1504(%rbp)
call memcpy
movq -1504(%rbp), %rdx
movq -1472(%rbp), %rdi
addq %rdx, %rdi
movq -1408(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1472(%rbp)
movq %rdx, -1504(%rbp)
call memcpy
movq -1504(%rbp), %rdx
movq -1472(%rbp), %rdi
addq %rdx, %rdi
movq -1424(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1472(%rbp)
movq %rdx, -1504(%rbp)
call memcpy
movq -1504(%rbp), %rdx
movq -1472(%rbp), %rdi
addq %rdx, %rdi
movq -1440(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1472(%rbp)
movq %rdx, -1504(%rbp)
call memcpy
movq -1504(%rbp), %rdx
movq -1472(%rbp), %rdi
addq %rdx, %rdi
movq -1456(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1472(%rbp)
movq %rdx, -1504(%rbp)
call memcpy
movq -1488(%rbp), %rdx
movq %rdx, -336(%rbp)
.loc_26_929:
movq -336(%rbp), %rdi
call getStrLen
leaq -400(%rbp), %rdi
leaq gen(%rip), %rsi
movq -336(%rbp), %rdx
movq %rax, %rcx
call asmContext.generateStaticStr
.loc_26_930:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -400(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -368(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -352(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -348(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_933:
leaq -464(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -416(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -412(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_2790:
.loc_26_936:
movq -32(%rbp), %rax
addq $137, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_2810
.loc_26_941:
movq $0, -208(%rbp)
.loc_26_943:
cmpb $0, -129(%rbp)
je .IF_NOT_2811
.loc_26_944:
movq $8, -208(%rbp)
.IF_NOT_2811:
.loc_26_947:
movb -140(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2813
.loc_26_948:
movq -208(%rbp), %rbx
addq $8, %rbx
movq %rbx, -208(%rbp)
.IF_NOT_2813:
.loc_26_951:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -224(%rbp)
.loc_26_952:
movq -224(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2815
movb %al, %r11b
.FOR_LOOP_START_2815:
.loc_26_953:
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq -208(%rbp), %rbx
movq %r10, %rax
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -208(%rbp)
movq -224(%rbp), %rax
addq $72, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rdx
movq %rdx, -224(%rbp)
movq -224(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2815
.FOR_NOT_2815:
.loc_26_956:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_957:
movq -208(%rbp), %rdi
call uintToStr
leaq -288(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -240(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -236(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_958:
leaq -352(%rbp), %rdi
movq memoryAllocFunction(%rip), %rsi
call asmSymbolValue
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -304(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -300(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_959:
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
.loc_26_960:
movq $0, -496(%rbp)
.loc_26_962:
cmpb $0, -129(%rbp)
je .IF_NOT_2822
.loc_26_963:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $64, %rax
movq (%rax), %rax
addq $80, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -560(%rbp)
addq $32, %rax
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, -528(%rbp)
addq $16, %rax
movd (%rax), %xmm2
movd %xmm2, -512(%rbp)
addq $4, %rax
movw (%rax), %bx
movw %bx, -508(%rbp)
.loc_26_964:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -1377(%rbp)
movb -1377(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2832
.loc_26_965:
movq -528(%rbp), %rbx
subq $1, %rbx
movq %rbx, -528(%rbp)
.IF_NOT_2832:
.loc_26_967:
movq $8, -552(%rbp)
.loc_26_968:
movq -496(%rbp), %rdi
call uintToStr
leaq -624(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -688(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -592(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -576(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -572(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_969:
leaq -752(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -688(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -656(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -640(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -636(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_970:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -752(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -720(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -704(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -700(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -560(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -528(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -512(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -508(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_971:
movq $8, -496(%rbp)
.IF_NOT_2822:
.loc_26_974:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -224(%rbp)
.loc_26_975:
movq -224(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2835
movb %al, %r11b
.FOR_LOOP_START_2835:
.loc_26_976:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -560(%rbp)
vmovdqu %xmm0, -528(%rbp)
movss %xmm0, -512(%rbp)
xorb %al, %al
movb %al, -508(%rbp)
movb %al, -507(%rbp)
movq $-1, -520(%rbp)
.loc_26_978:
movq -224(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $15, %rdx
jne .IF_NOT_2842
.loc_26_979:
movq -224(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
leaq -624(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
call generateReflection
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, -560(%rbp)
vmovdqu -592(%rbp), %xmm1
vmovdqu %xmm1, -528(%rbp)
movd -576(%rbp), %xmm2
movd %xmm2, -512(%rbp)
movw -572(%rbp), %bx
movw %bx, -508(%rbp)
jmp .ELSE_NOT_2867
.IF_NOT_2842:
.loc_26_980:
movq -224(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, -1392(%rbp)
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1424(%rbp)
movq -1392(%rbp), %rdx
movq -1424(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
je .BOOL_AND_2844
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1456(%rbp)
movq -1456(%rbp), %rax
movq (%rax), %rax
movq %rax, -1472(%rbp)
movq $8, %rax
cmpq -1472(%rbp), %rax
jb .BOOL_OR_2852
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, -1488(%rbp)
movq -1488(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1504(%rbp)
movq -1504(%rbp), %rax
movq (%rax), %rax
movq %rax, -1520(%rbp)
movq -224(%rbp), %rax
addq $64, %rax
movq %rax, -1536(%rbp)
movq -1536(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1552(%rbp)
movq -1552(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1568(%rbp)
movq -1520(%rbp), %rdx
movq -1568(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
jnb .BOOL_OR_2852_NOT
.BOOL_OR_2852:
movb $1, %al
jmp .BOOL_OR_2852_END
.BOOL_OR_2852_NOT:
movb $0, %al
.BOOL_OR_2852_END:
cmpb $0, %al
je .BOOL_AND_2844
movb $1, %al
jmp .BOOL_AND_2844_END
.BOOL_AND_2844:
movb $0, %al
.BOOL_AND_2844_END:
cmpb $0, %al
je .ELSE_NOT_2864
.loc_26_981:
movq -224(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
leaq -624(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
movq -1408(%rbp), %rax
movq (%rax), %rdx
call generateTypeConversion
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, -560(%rbp)
vmovdqu -592(%rbp), %xmm1
vmovdqu %xmm1, -528(%rbp)
movd -576(%rbp), %xmm2
movd %xmm2, -512(%rbp)
movw -572(%rbp), %bx
movw %bx, -508(%rbp)
jmp .ELSE_NOT_2867
.ELSE_NOT_2864:
.loc_26_982:
.loc_26_983:
movq -224(%rbp), %rax
addq $64, %rax
leaq -624(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, -560(%rbp)
vmovdqu -592(%rbp), %xmm1
vmovdqu %xmm1, -528(%rbp)
movd -576(%rbp), %xmm2
movd %xmm2, -512(%rbp)
movw -572(%rbp), %bx
movw %bx, -508(%rbp)
.ELSE_NOT_2867:
.loc_26_987:
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_2869
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
movb %al, -1393(%rbp)
movb -1393(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
jne .BOOL_AND_2869
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movq (%rax), %rax
movq %rax, -1456(%rbp)
movq -1456(%rbp), %rdx
cmpq $1, %rdx
jne .BOOL_AND_2869
movq -224(%rbp), %rax
addq $64, %rax
movq %rax, -1472(%rbp)
movq -1472(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1488(%rbp)
movq -1488(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1504(%rbp)
movq -1504(%rbp), %rax
movb (%rax), %al
movb %al, -1505(%rbp)
movb -1505(%rbp), %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .BOOL_AND_2869
movb $1, %al
jmp .BOOL_AND_2869_END
.BOOL_AND_2869:
movb $0, %al
.BOOL_AND_2869_END:
cmpb $0, %al
je .IF_NOT_2887
.loc_26_988:
leaq -624(%rbp), %rdi
leaq .VAR_2888(%rip), %rsi
call asmSymbolValue
leaq -688(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -560(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -528(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -512(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -508(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -592(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -576(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -572(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
vmovdqu -688(%rbp), %ymm1
vmovdqu %ymm1, -560(%rbp)
vmovdqu -656(%rbp), %xmm1
vmovdqu %xmm1, -528(%rbp)
movd -640(%rbp), %xmm2
movd %xmm2, -512(%rbp)
movw -636(%rbp), %bx
movw %bx, -508(%rbp)
.IF_NOT_2887:
.loc_26_991:
movq -496(%rbp), %rdi
call uintToStr
leaq -624(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -688(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -592(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -576(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -572(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_992:
leaq -752(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -688(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -656(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -640(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -636(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_993:
movq -224(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $64, %rax
movb (%rax), %al
movb %al, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -752(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -720(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -704(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -700(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -560(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -528(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -512(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -508(%rbp), %bx
movw %bx, (%r10)
movb %al, %sil
movsbl %sil, %esi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_994:
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq -496(%rbp), %rbx
movq %r10, %rax
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -496(%rbp)
movq -224(%rbp), %rax
addq $72, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rdx
movq %rdx, -224(%rbp)
movq -224(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2835
.FOR_NOT_2835:
.loc_26_997:
movb -140(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2897
.loc_26_998:
movq -496(%rbp), %rdi
call uintToStr
leaq -560(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -624(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -560(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -528(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -512(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -508(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_999:
leaq -688(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -592(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -576(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -572(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1000:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -688(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -656(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -640(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -636(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.IF_NOT_2897:
.loc_26_1003:
leaq .VAR_2899(%rip), %rax
movq %rax, -1392(%rbp)
leaq gen(%rip), %rax
addq $176, %rax
movq (%rax), %rax
movq %rax, %rdi
call uintToStr
movq %rax, -1408(%rbp)
leaq .VAR_2903(%rip), %rax
movq %rax, -1424(%rbp)
leaq gen(%rip), %rax
addq $192, %rax
movq (%rax), %rax
movq %rax, %rdi
call uintToStr
movq %rax, -1440(%rbp)
movl $5, %edi
movq -1392(%rbp), %rbx
addl (%rbx), %edi
movq -1408(%rbp), %rbx
addl (%rbx), %edi
movq -1424(%rbp), %rbx
addl (%rbx), %edi
movq -1440(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1456(%rbp)
call memoryAllocSTR_NZ
subq $5, -1456(%rbp)
movq -1456(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1472(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1392(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1456(%rbp)
movq %rdx, -1488(%rbp)
call memcpy
movq -1488(%rbp), %rdx
movq -1456(%rbp), %rdi
addq %rdx, %rdi
movq -1408(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1456(%rbp)
movq %rdx, -1488(%rbp)
call memcpy
movq -1488(%rbp), %rdx
movq -1456(%rbp), %rdi
addq %rdx, %rdi
movq -1424(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1456(%rbp)
movq %rdx, -1488(%rbp)
call memcpy
movq -1488(%rbp), %rdx
movq -1456(%rbp), %rdi
addq %rdx, %rdi
movq -1440(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1456(%rbp)
movq %rdx, -1488(%rbp)
call memcpy
movq -1472(%rbp), %rdx
movq %rdx, -512(%rbp)
.loc_26_1006:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_1007:
leaq -576(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -576(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -544(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -528(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -524(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1008:
leaq -640(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -640(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -608(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -592(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -588(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1009:
leaq -704(%rbp), %rdi
movq -512(%rbp), %rsi
call asmSymbolValue
.loc_26_1010:
movq $8, -696(%rbp)
.loc_26_1011:
movq $-1, -672(%rbp)
.loc_26_1012:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -704(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -672(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -656(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -652(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1013:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1016:
leaq -768(%rbp), %rdi
movq threadCreateFunction(%rip), %rsi
call asmSymbolValue
leaq -832(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -768(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -736(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -720(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -716(%rbp), %bx
movw %bx, (%r10)
movq $4, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_1019:
leaq gen(%rip), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -1040(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -1008(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm3
vmovdqu %ymm3, -976(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm4
vmovdqu %ymm4, -944(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm5
vmovdqu %ymm5, -912(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm6
vmovdqu %ymm6, -880(%rbp)
addq $32, %rax
vmovdqu (%rax), %xmm6
vmovdqu %xmm6, -848(%rbp)
.loc_26_1020:
leaq globalFuncsGen(%rip), %rax
leaq gen(%rip), %rdx
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %xmm6
vmovdqu %xmm6, (%rdx)
.loc_26_1021:
leaq gen(%rip), %rdi
addq $176, %rdi
movq -864(%rbp), %rdx
movq %rdx, (%rdi)
.loc_26_1022:
leaq gen(%rip), %rdi
addq $184, %rdi
movq -856(%rbp), %rdx
movq %rdx, (%rdi)
.loc_26_1024:
movq $40, %rdi
call memoryAlloc
movq %rax, -1056(%rbp)
movq $54, 24(%rax)
movq $1, 8(%rax)
movq $1, 16(%rax)
movq $54, %rdi
call memoryAlloc
movq -1056(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
leaq -1120(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2912(%rip), %rdx
movq $8, %rcx
movq $0, %r8
call asmContext.generateVarDecl
movq -1056(%rbp), %rdi
movq (%rdi), %rdi
vmovdqu -1120(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -1088(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -1072(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -1068(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1027:
leaq gen(%rip), %rdi
movq -512(%rbp), %rsi
movq -1056(%rbp), %rdx
movq $0, %rcx
call asmContext.generateFnStart
.loc_26_1029:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_1030:
leaq -1184(%rbp), %rdi
movq $16, %rsi
movq $8, %rdx
call asmSymbolStack
.loc_26_1031:
movq $0, -496(%rbp)
.loc_26_1032:
cmpb $0, -129(%rbp)
je .IF_NOT_2913
.loc_26_1033:
movq -496(%rbp), %rdi
call uintToStr
leaq -1248(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1312(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1184(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1152(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1136(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1248(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1216(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1200(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1196(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_1034:
leaq -1376(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1312(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1280(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1264(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1260(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
.loc_26_1035:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1376(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1344(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1328(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1324(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1036:
movq $8, -496(%rbp)
.IF_NOT_2913:
.loc_26_1038:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -224(%rbp)
.loc_26_1039:
movq -224(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2916
movb %al, %r11b
.FOR_LOOP_START_2916:
.loc_26_1040:
movq -496(%rbp), %rdi
call uintToStr
leaq -1248(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1312(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1184(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1152(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1136(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1248(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1216(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1200(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1196(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_1041:
leaq -1376(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1312(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1280(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1264(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1260(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
.loc_26_1042:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1376(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1344(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1328(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1324(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1043:
movq -224(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq -496(%rbp), %rbx
movq %r10, %rax
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -496(%rbp)
movq -224(%rbp), %rax
addq $72, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rdx
movq %rdx, -224(%rbp)
movq -224(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2916
.FOR_NOT_2916:
.loc_26_1046:
movb -140(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2924
.loc_26_1047:
movq -496(%rbp), %rdi
call uintToStr
leaq -1248(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1312(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1184(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1152(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1136(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1132(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1248(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1216(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1200(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1196(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
vmovdqu -1312(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -1280(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -1264(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -1260(%rbp), %bx
movw %bx, -140(%rbp)
.loc_26_1048:
leaq -1376(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
vmovdqu -1376(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -1344(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -1328(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -1324(%rbp), %bx
movw %bx, -140(%rbp)
.IF_NOT_2924:
.loc_26_1051:
leaq -1248(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_1053:
leaq gen(%rip), %rdi
call asmContext.generateFnEnd
.loc_26_1054:
leaq gen(%rip), %rax
addq $24, %rax
leaq globalFuncsGen(%rip), %rdi
addq $24, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_26_1056:
leaq gen(%rip), %rdx
vmovdqu -1040(%rbp), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rdx
vmovdqu -1008(%rbp), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rdx
vmovdqu -976(%rbp), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rdx
vmovdqu -944(%rbp), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rdx
vmovdqu -912(%rbp), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rdx
vmovdqu -880(%rbp), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rdx
vmovdqu -848(%rbp), %xmm6
vmovdqu %xmm6, (%rdx)
.loc_26_1058:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2810:
.loc_26_1061:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.isFlagSet
cmpb $0, %al
je .IF_NOT_2928
.loc_26_1062:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -208(%rbp)
.loc_26_1063:
movq -208(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2930
movb %al, %r11b
.FOR_LOOP_START_2930:
.loc_26_1064:
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $135, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2938
.loc_26_1065:
jmp .FOR_NOT_2930
.IF_NOT_2938:
movq -208(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -208(%rbp)
movq -208(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2930
.FOR_NOT_2930:
.loc_26_1068:
movq -208(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_2940
.loc_26_1069:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
leaq parserCtx(%rip), %rdi
movq %rax, %rsi
call parserContext.findFunc
movq %rax, -1392(%rbp)
movq -32(%rbp), %rax
addq $72, %rax
leaq -272(%rbp), %rdi
movq -1392(%rbp), %rsi
movq (%rax), %rdx
call evalFunc
.loc_26_1070:
leaq -272(%rbp), %rdi
call isEmptySymbol
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2948
.loc_26_1071:
movq -16(%rbp), %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -224(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -220(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2948:
.IF_NOT_2940:
.IF_NOT_2928:
.loc_26_1076:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_1078:
cmpb $0, -129(%rbp)
je .IF_NOT_2949
.loc_26_1079:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $64, %rax
movq (%rax), %rax
addq $80, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -256(%rbp)
addq $32, %rax
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, -224(%rbp)
addq $16, %rax
movd (%rax), %xmm2
movd %xmm2, -208(%rbp)
addq $4, %rax
movw (%rax), %bx
movw %bx, -204(%rbp)
.loc_26_1080:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -1377(%rbp)
movb -1377(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_2959
.loc_26_1081:
movq -224(%rbp), %rbx
subq $1, %rbx
movq %rbx, -224(%rbp)
.IF_NOT_2959:
.loc_26_1083:
movq $8, -248(%rbp)
.loc_26_1084:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.IF_NOT_2949:
.loc_26_1087:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -208(%rbp)
.loc_26_1088:
movq -208(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_2961
movb %al, %r11b
.FOR_LOOP_START_2961:
.loc_26_1089:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -272(%rbp)
vmovdqu %xmm0, -240(%rbp)
movss %xmm0, -224(%rbp)
xorb %al, %al
movb %al, -220(%rbp)
movb %al, -219(%rbp)
movq $-1, -232(%rbp)
.loc_26_1091:
movq -208(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $15, %rdx
jne .IF_NOT_2968
.loc_26_1092:
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
leaq -336(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
call generateReflection
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, -272(%rbp)
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, -240(%rbp)
movd -288(%rbp), %xmm2
movd %xmm2, -224(%rbp)
movw -284(%rbp), %bx
movw %bx, -220(%rbp)
jmp .ELSE_NOT_2997
.IF_NOT_2968:
.loc_26_1093:
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, -1392(%rbp)
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1424(%rbp)
movq -1392(%rbp), %rdx
movq -1424(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
je .BOOL_AND_2970
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1456(%rbp)
movq -1456(%rbp), %rax
movq (%rax), %rax
movq %rax, -1472(%rbp)
movq $8, %rax
cmpq -1472(%rbp), %rax
jb .BOOL_OR_2978
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, -1488(%rbp)
movq -1488(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1504(%rbp)
movq -1504(%rbp), %rax
movb (%rax), %al
movb %al, -1505(%rbp)
movb -1505(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
je .BOOL_OR_2978
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, -1520(%rbp)
movq -1520(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1536(%rbp)
movq -1536(%rbp), %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, -1568(%rbp)
movq -1568(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1584(%rbp)
movq -1584(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1600(%rbp)
movq -1552(%rbp), %rdx
movq -1600(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
jnb .BOOL_OR_2978_NOT
.BOOL_OR_2978:
movb $1, %al
jmp .BOOL_OR_2978_END
.BOOL_OR_2978_NOT:
movb $0, %al
.BOOL_OR_2978_END:
cmpb $0, %al
je .BOOL_AND_2970
movb $1, %al
jmp .BOOL_AND_2970_END
.BOOL_AND_2970:
movb $0, %al
.BOOL_AND_2970_END:
cmpb $0, %al
je .ELSE_NOT_2994
.loc_26_1094:
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
leaq -336(%rbp), %rdi
movq -1392(%rbp), %rax
movq (%rax), %rsi
movq -1408(%rbp), %rax
movq (%rax), %rdx
call generateTypeConversion
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, -272(%rbp)
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, -240(%rbp)
movd -288(%rbp), %xmm2
movd %xmm2, -224(%rbp)
movw -284(%rbp), %bx
movw %bx, -220(%rbp)
jmp .ELSE_NOT_2997
.ELSE_NOT_2994:
.loc_26_1095:
.loc_26_1096:
movq -208(%rbp), %rax
addq $64, %rax
leaq -336(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, -272(%rbp)
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, -240(%rbp)
movd -288(%rbp), %xmm2
movd %xmm2, -224(%rbp)
movw -284(%rbp), %bx
movw %bx, -220(%rbp)
.ELSE_NOT_2997:
.loc_26_1099:
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_3003
.loc_26_1100:
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $0, %rdx
je .BOOL_AND_3004
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movb (%rax), %al
movb %al, -1441(%rbp)
movb -1441(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .BOOL_AND_3004
movb $1, %al
jmp .BOOL_AND_3004_END
.BOOL_AND_3004:
movb $0, %al
.BOOL_AND_3004_END:
cmpb $0, %al
je .IF_NOT_3016
.loc_26_1101:
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_3023
.loc_26_1102:
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
movb %al, -1393(%rbp)
movb -1393(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_3031
.loc_26_1103:
movb $1, -224(%rbp)
.IF_NOT_3031:
jmp .ELSE_NOT_3032
.IF_NOT_3023:
.loc_26_1105:
.loc_26_1106:
movb $1, -224(%rbp)
.ELSE_NOT_3032:
.IF_NOT_3016:
jmp .ELSE_NOT_3037
.IF_NOT_3003:
.loc_26_1109:
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_3037
.loc_26_1110:
movb $1, -224(%rbp)
.ELSE_NOT_3037:
.loc_26_1114:
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_3038
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
movb %al, -1393(%rbp)
movb -1393(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
jne .BOOL_AND_3038
movq -208(%rbp), %rax
addq $56, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movq (%rax), %rax
movq %rax, -1456(%rbp)
movq -1456(%rbp), %rdx
cmpq $1, %rdx
jne .BOOL_AND_3038
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, -1472(%rbp)
movq -1472(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1488(%rbp)
movq -1488(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1504(%rbp)
movq -1504(%rbp), %rax
movb (%rax), %al
movb %al, -1505(%rbp)
movb -1505(%rbp), %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .BOOL_AND_3038
movb $1, %al
jmp .BOOL_AND_3038_END
.BOOL_AND_3038:
movb $0, %al
.BOOL_AND_3038_END:
cmpb $0, %al
je .IF_NOT_3056
.loc_26_1115:
leaq -336(%rbp), %rdi
leaq .VAR_2888(%rip), %rsi
call asmSymbolValue
leaq -400(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
vmovdqu -400(%rbp), %ymm1
vmovdqu %ymm1, -272(%rbp)
vmovdqu -368(%rbp), %xmm1
vmovdqu %xmm1, -240(%rbp)
movd -352(%rbp), %xmm2
movd %xmm2, -224(%rbp)
movw -348(%rbp), %bx
movw %bx, -220(%rbp)
.loc_26_1116:
leaq -464(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
movq -264(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, -272(%rbp)
vmovdqu -432(%rbp), %xmm1
vmovdqu %xmm1, -240(%rbp)
movd -416(%rbp), %xmm2
movd %xmm2, -224(%rbp)
movw -412(%rbp), %bx
movw %bx, -220(%rbp)
.IF_NOT_3056:
.loc_26_1119:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
movq -208(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -208(%rbp)
movq -208(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_2961
.FOR_NOT_2961:
.loc_26_1121:
movq $0, -224(%rbp)
.loc_26_1122:
movb $0, -225(%rbp)
.loc_26_1123:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .IF_NOT_3061
.loc_26_1124:
movq -32(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -224(%rbp)
.loc_26_1126:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_3068
.loc_26_1127:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $0, %rdx
je .BOOL_AND_3069
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1408(%rbp)
movq -1408(%rbp), %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, -1424(%rbp)
movq -1424(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1440(%rbp)
movq -1440(%rbp), %rax
movb (%rax), %al
movb %al, -1441(%rbp)
movb -1441(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .BOOL_AND_3069
movb $1, %al
jmp .BOOL_AND_3069_END
.BOOL_AND_3069:
movb $0, %al
.BOOL_AND_3069_END:
cmpb $0, %al
je .IF_NOT_3081
.loc_26_1128:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_3088
.loc_26_1129:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1392(%rbp)
movq -1392(%rbp), %rax
movb (%rax), %al
movb %al, -1393(%rbp)
movb -1393(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_3096
.loc_26_1130:
movb $1, -225(%rbp)
.IF_NOT_3096:
jmp .ELSE_NOT_3097
.IF_NOT_3088:
.loc_26_1132:
.loc_26_1133:
movb $1, -225(%rbp)
.ELSE_NOT_3097:
.IF_NOT_3081:
jmp .ELSE_NOT_3102
.IF_NOT_3068:
.loc_26_1136:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_3102
.loc_26_1137:
movb $1, -225(%rbp)
.ELSE_NOT_3102:
.IF_NOT_3061:
.loc_26_1140:
movb -225(%rbp), %dl
movb %dl, -64(%rbp)
.loc_26_1142:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_3103
movq -224(%rbp), %rdx
cmpq $16, %rdx
jle .BOOL_AND_3103
movb $1, %al
jmp .BOOL_AND_3103_END
.BOOL_AND_3103:
movb $0, %al
.BOOL_AND_3103_END:
cmpb $0, %al
je .IF_NOT_3106
.loc_26_1143:
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_3110
.loc_26_1144:
movq -48(%rbp), %rdi
addq $32, %rdi
movq $-1, (%rdi)
.loc_26_1145:
movq -48(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
jmp .ELSE_NOT_3114
.IF_NOT_3110:
.loc_26_1146:
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $1, %rdx
jne .ELSE_NOT_3114
.loc_26_1147:
movq -48(%rbp), %rdi
addq $32, %rdi
movq $0, (%rdi)
.loc_26_1148:
movq -48(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
.ELSE_NOT_3114:
.loc_26_1150:
leaq -288(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq -224(%rbp), %rdx
movq -48(%rbp), %rcx
movb -225(%rbp), %r8b
movsbl %r8b, %r8d
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_1151:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3106:
.loc_26_1154:
leaq -288(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq -224(%rbp), %rdx
movq $0, %rcx
movb -225(%rbp), %r8b
movsbl %r8b, %r8d
call asmContext.generateFnCall
addq $64, %rsp
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, -112(%rbp)
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, -80(%rbp)
movd -240(%rbp), %xmm2
movd %xmm2, -64(%rbp)
movw -236(%rbp), %bx
movw %bx, -60(%rbp)
.loc_26_1155:
cmpb $0, -225(%rbp)
je .BOOL_AND_3115
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .BOOL_AND_3115
movb $1, %al
jmp .BOOL_AND_3115_END
.BOOL_AND_3115:
movb $0, %al
.BOOL_AND_3115_END:
cmpb $0, %al
je .IF_NOT_3120
.loc_26_1156:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -60(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateStackAlloc
addq $64, %rsp
leaq -352(%rbp), %rdi
movq %rax, %rsi
movq -104(%rbp), %rdx
call asmSymbolStack
movq -16(%rbp), %rdi
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -304(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -300(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3120:
.loc_26_1159:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_2698:
.loc_26_1162:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, -1392(%rbp)
leaq .VAR_3123(%rip), %rax
movq %rax, -1408(%rbp)
movq $139, -192(%rbp)
leaq .VAR_3125(%rip), %rdx
movq %rdx, -184(%rbp)
movq $0, -168(%rbp)
movq $0, -160(%rbp)
movq $1, -152(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -208(%rbp)
movq -208(%rbp), %rdi
addq $24, %rdi
movq $72, (%rdi)
movq -208(%rbp), %rdi
addq $8, %rdi
movq $11, (%rdi)
movq -208(%rbp), %rdi
addq $16, %rdi
movq $11, (%rdi)
movq $792, %rdi
call memoryAlloc
movq -208(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -208(%rbp), %rdx
movq %rdx, -144(%rbp)
movq $8, -288(%rbp)
leaq .VAR_889(%rip), %rdx
movq %rdx, -280(%rbp)
movq $0, -264(%rbp)
movq $0, -256(%rbp)
movq $0, -248(%rbp)
movq $0, -240(%rbp)
movq $0, -232(%rbp)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -224(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3127(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $0, (%rdi)
movq $41, -368(%rbp)
leaq .VAR_3128(%rip), %rdx
movq %rdx, -360(%rbp)
movq $0, -344(%rbp)
movq $0, -336(%rbp)
movq $1, -328(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -384(%rbp)
movq -384(%rbp), %rdi
addq $24, %rdi
movq $72, (%rdi)
movq -384(%rbp), %rdi
addq $8, %rdi
movq $6, (%rdi)
movq -384(%rbp), %rdi
addq $16, %rdi
movq $6, (%rdi)
movq $432, %rdi
call memoryAlloc
movq -384(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -384(%rbp), %rdx
movq %rdx, -320(%rbp)
movq $8, -464(%rbp)
leaq .VAR_787(%rip), %rdx
movq %rdx, -456(%rbp)
movq $0, -440(%rbp)
movq $0, -432(%rbp)
movq $0, -424(%rbp)
movq $0, -416(%rbp)
movq $0, -408(%rbp)
movq -384(%rbp), %rdi
movq (%rdi), %rdi
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -400(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3130(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $0, (%rdi)
movq $8, -544(%rbp)
leaq .VAR_3131(%rip), %rdx
movq %rdx, -536(%rbp)
movq $0, -520(%rbp)
movq $0, -512(%rbp)
movq $0, -504(%rbp)
movq $0, -496(%rbp)
movq $0, -488(%rbp)
movq -384(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -512(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -480(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3131(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $8, (%rdi)
movq -384(%rbp), %rdi
movq (%rdi), %rdi
addq $144, %rdi
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -224(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3133(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $16, (%rdi)
movq -384(%rbp), %rdi
movq (%rdi), %rdi
addq $216, %rdi
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -224(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3134(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $24, (%rdi)
movq -384(%rbp), %rdi
movq (%rdi), %rdi
addq $288, %rdi
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -224(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3135(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $32, (%rdi)
movq $1, -624(%rbp)
leaq .VAR_857(%rip), %rdx
movq %rdx, -616(%rbp)
movq $0, -600(%rbp)
movq $0, -592(%rbp)
movq $0, -584(%rbp)
movq $0, -576(%rbp)
movq $0, -568(%rbp)
movq -384(%rbp), %rdi
movq (%rdi), %rdi
addq $360, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3137(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $40, (%rdi)
movq $0, -312(%rbp)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -336(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -304(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3138(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $8, (%rdi)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $144, %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -128(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3131(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $56, (%rdi)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $216, %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -128(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3140(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $64, (%rdi)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $288, %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -128(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3141(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $72, (%rdi)
movq $54, -704(%rbp)
leaq .VAR_3142(%rip), %rdx
movq %rdx, -696(%rbp)
movq $0, -680(%rbp)
movq $0, -672(%rbp)
movq $1, -664(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -720(%rbp)
movq -720(%rbp), %rdi
addq $24, %rdi
movq $72, (%rdi)
movq -720(%rbp), %rdi
addq $8, %rdi
movq $12, (%rdi)
movq -720(%rbp), %rdi
addq $16, %rdi
movq $12, (%rdi)
movq $864, %rdi
call memoryAlloc
movq -720(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -720(%rbp), %rdx
movq %rdx, -656(%rbp)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -400(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3143(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $0, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -224(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3144(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $8, (%rdi)
movq $8, -800(%rbp)
leaq .VAR_789(%rip), %rdx
movq %rdx, -792(%rbp)
movq $0, -776(%rbp)
movq $0, -768(%rbp)
movq $0, -760(%rbp)
movq $0, -752(%rbp)
movq $0, -744(%rbp)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $144, %rdi
vmovdqu -800(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -768(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -736(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3146(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $16, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $216, %rdi
vmovdqu -800(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -768(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -736(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3147(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $24, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $288, %rdi
vmovdqu -800(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -768(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -736(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3148(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $32, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $360, %rdi
vmovdqu -800(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -768(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -736(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3149(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $40, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $432, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3150(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $48, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $504, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3151(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $49, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $576, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3152(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $50, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $648, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3153(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $51, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $720, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3137(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $52, (%rdi)
movq -720(%rbp), %rdi
movq (%rdi), %rdi
addq $792, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3155(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $53, (%rdi)
movq $0, -648(%rbp)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $360, %rdi
vmovdqu -704(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -672(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -640(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3156(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $80, (%rdi)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $432, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3157(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $134, (%rdi)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $504, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3158(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $135, (%rdi)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $576, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3159(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $136, (%rdi)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $648, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -592(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3160(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $137, (%rdi)
movq $1, -880(%rbp)
leaq .VAR_884(%rip), %rdx
movq %rdx, -872(%rbp)
movq $0, -856(%rbp)
movq $0, -848(%rbp)
movq $0, -840(%rbp)
movq $0, -832(%rbp)
movq $0, -824(%rbp)
movq -208(%rbp), %rdi
movq (%rdi), %rdi
addq $720, %rdi
vmovdqu -880(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -848(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movq -816(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $-48, %rdi
leaq .VAR_3162(%rip), %rdx
movq %rdx, (%rdi)
addq $40, %rdi
movq $138, (%rdi)
movq $0, -136(%rbp)
leaq .VAR_3163(%rip), %rdx
movq %rdx, -176(%rbp)
movq -32(%rbp), %rdx
movq %rdx, -128(%rbp)
subq $80, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %ymm2
vmovdqu %ymm2, (%r10)
addq $32, %r10
movq -128(%rbp), %xmm2
movq %xmm2, (%r10)
call toJson
addq $80, %rsp
movq %rax, -1424(%rbp)
leaq .VAR_1123(%rip), %rax
movq %rax, -1440(%rbp)
movl $5, %edi
movq -1408(%rbp), %rbx
addl (%rbx), %edi
movq -1424(%rbp), %rbx
addl (%rbx), %edi
movq -1440(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1456(%rbp)
call memoryAllocSTR_NZ
subq $5, -1456(%rbp)
movq -1456(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1472(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1408(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1456(%rbp)
movq %rdx, -1488(%rbp)
call memcpy
movq -1488(%rbp), %rdx
movq -1456(%rbp), %rdi
addq %rdx, %rdi
movq -1424(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1456(%rbp)
movq %rdx, -1488(%rbp)
call memcpy
movq -1488(%rbp), %rdx
movq -1456(%rbp), %rdi
addq %rdx, %rdi
movq -1440(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1456(%rbp)
movq %rdx, -1488(%rbp)
call memcpy
movq -1392(%rbp), %rdi
movq -1472(%rbp), %rsi
call throwError
.loc_26_1164:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.global .generateBahValueSymbol_end
.generateBahValueSymbol_end:
.global generateBahLeftValueSymbol
generateBahLeftValueSymbol:
pushq %rbp
movq %rsp, %rbp
subq $736, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_26_1168:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -96(%rbp)
vmovdqu %xmm0, -64(%rbp)
movss %xmm0, -48(%rbp)
xorb %al, %al
movb %al, -44(%rbp)
movb %al, -43(%rbp)
movq $-1, -56(%rbp)
.loc_26_1170:
movq -32(%rbp), %rax
addq $93, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3171
.loc_26_1171:
movq -32(%rbp), %rax
addq $72, %rax
leaq -160(%rbp), %rdi
movq (%rax), %rsi
call generateBahLeftValueSymbol
leaq -224(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -112(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -108(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1172:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -216(%rbp)
.loc_26_1174:
movq -16(%rbp), %rdi
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -176(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -172(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3171:
.loc_26_1177:
movq -32(%rbp), %rax
addq $90, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3178
.loc_26_1178:
movq -32(%rbp), %rdx
movq %rdx, -112(%rbp)
.loc_26_1179:
movq $0, -128(%rbp)
.loc_26_1180:
.FOR_LOOP_START_3179:
movq -112(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .FOR_NOT_3179
movb %al, %r9b
.loc_26_1181:
movq -112(%rbp), %rax
addq $80, %rax
movq (%rax), %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdx
movq -128(%rbp), %rbx
subq %rdx, %rbx
movq %rbx, -128(%rbp)
.loc_26_1184:
movq -112(%rbp), %rax
addq $72, %rax
leaq -192(%rbp), %rdi
movq (%rax), %rsi
call generateBahLeftValueSymbol
.loc_26_1185:
movq -112(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_3193
.loc_26_1186:
cmpb $0, -142(%rbp)
je .BOOL_AND_3194
movb -141(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_3194
movb $1, %al
jmp .BOOL_AND_3194_END
.BOOL_AND_3194:
movb $0, %al
.BOOL_AND_3194_END:
cmpb $0, %al
je .IF_NOT_3196
.loc_26_1187:
movq -128(%rbp), %rbx
addq -176(%rbp), %rbx
movq %rbx, -128(%rbp)
.loc_26_1188:
movb $1, -46(%rbp)
jmp .ELSE_NOT_3197
.IF_NOT_3196:
.loc_26_1189:
.loc_26_1190:
movq -184(%rbp), %rdx
movq %rdx, -208(%rbp)
.loc_26_1191:
movq $8, -184(%rbp)
.loc_26_1192:
movb -142(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_3199
.loc_26_1193:
movq $-1, -160(%rbp)
jmp .ELSE_NOT_3200
.IF_NOT_3199:
.loc_26_1194:
.loc_26_1195:
movq $0, -160(%rbp)
.ELSE_NOT_3200:
.loc_26_1197:
movq $0, %rbx
subq -128(%rbp), %rbx
movq %rbx, %rdi
call intToStr
leaq -272(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -220(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1198:
leaq -400(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
vmovdqu -400(%rbp), %ymm1
vmovdqu %ymm1, -96(%rbp)
vmovdqu -368(%rbp), %xmm1
vmovdqu %xmm1, -64(%rbp)
movd -352(%rbp), %xmm2
movd %xmm2, -48(%rbp)
movw -348(%rbp), %bx
movw %bx, -44(%rbp)
.loc_26_1199:
movq -32(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -88(%rbp)
.loc_26_1200:
movq -16(%rbp), %rdi
vmovdqu -96(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -64(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -48(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -44(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_3197:
jmp .ELSE_NOT_3205
.IF_NOT_3193:
.loc_26_1202:
.loc_26_1203:
movq $0, %rbx
subq -128(%rbp), %rbx
movq %rbx, %rdi
call intToStr
leaq -256(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -320(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1204:
movq -32(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -312(%rbp)
.loc_26_1205:
leaq -384(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -272(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -268(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -384(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -352(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -336(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -332(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.ELSE_NOT_3205:
.loc_26_1207:
jmp .FOR_NOT_3179
movq -112(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -112(%rbp)
jmp .FOR_LOOP_START_3179
.FOR_NOT_3179:
.loc_26_1217:
movq -128(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_26_1218:
movb $1, -43(%rbp)
.loc_26_1219:
movq -32(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -88(%rbp)
.loc_26_1220:
movq -16(%rbp), %rdi
vmovdqu -96(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -64(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -48(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -44(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3178:
.loc_26_1223:
movq -32(%rbp), %rax
addq $91, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3213
.loc_26_1224:
movq -32(%rbp), %rax
addq $72, %rax
leaq -160(%rbp), %rdi
movq (%rax), %rsi
call generateBahLeftValueSymbol
.loc_26_1225:
movq -32(%rbp), %rax
addq $56, %rax
leaq -224(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_1226:
movq $8, -152(%rbp)
.loc_26_1227:
leaq -288(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -112(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -108(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1228:
movq $1, -280(%rbp)
.loc_26_1229:
movq $1, -256(%rbp)
.loc_26_1230:
movq -16(%rbp), %rdi
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -240(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -236(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3213:
.loc_26_1233:
movq -32(%rbp), %rax
addq $89, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3217
.loc_26_1234:
movq -32(%rbp), %rax
addq $72, %rax
leaq -160(%rbp), %rdi
movq (%rax), %rsi
call generateBahLeftValueSymbol
.loc_26_1235:
leaq -224(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -112(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -108(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
.loc_26_1237:
movq -32(%rbp), %rax
addq $56, %rax
leaq -288(%rbp), %rdi
movq (%rax), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_1238:
leaq -352(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -240(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -236(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
call asmContext.generateTmpSym
addq $64, %rsp
.loc_26_1240:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_1242:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1243:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -304(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -300(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1245:
leaq -416(%rbp), %rdi
leaq .VAR_3220(%rip), %rsi
call asmSymbolValue
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $0, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_1247:
leaq -544(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1249:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
leaq -608(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -672(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -304(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -300(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -608(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -576(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -560(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -556(%rbp), %bx
movw %bx, (%r10)
movq $1, %rdx
call asmContext.generateOpMult
addq $128, %rsp
.loc_26_1250:
leaq -736(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -496(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -492(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -672(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -640(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -624(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -620(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1251:
movq $1, -704(%rbp)
.loc_26_1252:
movq -32(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -728(%rbp)
.loc_26_1253:
movq -16(%rbp), %rdi
vmovdqu -736(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -704(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -688(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -684(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3217:
.loc_26_1256:
movq -32(%rbp), %rax
addq $94, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3231
.loc_26_1257:
movq -32(%rbp), %rax
addq $72, %rax
leaq -160(%rbp), %rdi
movq (%rax), %rsi
call generateBahLeftValueSymbol
.loc_26_1258:
movq $8, -152(%rbp)
.loc_26_1259:
movq $-1, -128(%rbp)
.loc_26_1260:
movq -32(%rbp), %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdi
call uintToStr
leaq -224(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -288(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -112(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -108(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -176(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -172(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1261:
movq -32(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -280(%rbp)
.loc_26_1262:
movq $0, -256(%rbp)
.loc_26_1263:
movq -16(%rbp), %rdi
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -240(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -236(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3231:
.loc_26_1266:
movq -32(%rbp), %rax
addq $88, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3239
.loc_26_1267:
movq -32(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $24, %rax
movq -16(%rbp), %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3239:
.loc_26_1270:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_3243(%rip), %rsi
call throwError
.loc_26_1272:
movq -16(%rbp), %rdi
vmovdqu -96(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -64(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -48(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -44(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.global .generateBahLeftValueSymbol_end
.generateBahLeftValueSymbol_end:
.global generateReflectionFromType
generateReflectionFromType:
pushq %rbp
movq %rsp, %rbp
subq $2496, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_26_1282:
movq $0, -64(%rbp)
.FOR_LOOP_START_3244:
movq -48(%rbp), %rdi
call __bah_arrayLength
cmpq -64(%rbp), %rax
jle .FOR_NOT_3244
movb %al, %r11b
.loc_26_1283:
movq -64(%rbp), %rbx
imulq $62, %rbx
movq -48(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -2416(%rbp)
movq -2416(%rbp), %rdi
movq -32(%rbp), %rsi
call isSameType
cmpb $0, %al
je .IF_NOT_3247
.loc_26_1284:
movq -64(%rbp), %rbx
imulq $62, %rbx
movq -48(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq -16(%rbp), %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3247:
addq $1, -64(%rbp)
jmp .FOR_LOOP_START_3244
.FOR_NOT_3244:
.loc_26_1288:
movq -32(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_26_1290:
.FOR_LOOP_START_3248:
movq -32(%rbp), %rax
addq $65, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .FOR_NOT_3248
.loc_26_1291:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .IF_NOT_3253
.loc_26_1292:
jmp .FOR_NOT_3248
.IF_NOT_3253:
.loc_26_1294:
movq -32(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_3248
.FOR_NOT_3248:
.loc_26_1297:
.FOR_LOOP_START_3255:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .FOR_NOT_3255
movb %al, %r9b
.loc_26_1298:
movq -32(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_3255
.FOR_NOT_3255:
.loc_26_1301:
leaq -144(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_3260(%rip), %rdx
movq $72, %rcx
movq $0, %r8
call asmContext.generateVarDecl
.loc_26_1302:
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, -208(%rbp)
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, -176(%rbp)
movd -96(%rbp), %xmm2
movd %xmm2, -160(%rbp)
movw -92(%rbp), %bx
movw %bx, -156(%rbp)
.loc_26_1303:
movq $8, -200(%rbp)
.loc_26_1305:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -272(%rbp)
vmovdqu %xmm0, -240(%rbp)
movq %xmm0, -224(%rbp)
movss %xmm0, -216(%rbp)
xorb %al, %al
movb %al, -212(%rbp)
movb %al, -211(%rbp)
movq -80(%rbp), %rdx
movq %rdx, -272(%rbp)
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, -264(%rbp)
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, -232(%rbp)
movd -96(%rbp), %xmm2
movd %xmm2, -216(%rbp)
movw -92(%rbp), %bx
movw %bx, -212(%rbp)
movq -48(%rbp), %rdi
call __bah_arrayLength
movq %rax, -2416(%rbp)
movq -48(%rbp), %rdi
movq -2416(%rbp), %rsi
call __Bah_realocate_arr
movq -48(%rbp), %rdi
movq -2416(%rbp), %rbx
imulq $62, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movq -224(%rbp), %xmm2
movq %xmm2, (%rdi)
addq $8, %rdi
movd -216(%rbp), %xmm3
movd %xmm3, (%rdi)
addq $4, %rdi
movw -212(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1308:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_3265
.loc_26_1309:
movq $40, %rdi
call uintToStr
movq %rax, -2416(%rbp)
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
movq -2416(%rbp), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
jmp .ELSE_NOT_3281
.IF_NOT_3265:
.loc_26_1310:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $7, %rdx
jne .ELSE_NOT_3270
.loc_26_1311:
call printDebugContext
.loc_26_1312:
leaq .VAR_3271(%rip), %rdi
leaq .VAR_3272(%rip), %rsi
call __Bah_panic
.loc_26_1313:
movq $40, %rdi
call uintToStr
movq %rax, -2416(%rbp)
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
movq -2416(%rbp), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
jmp .ELSE_NOT_3281
.ELSE_NOT_3270:
.loc_26_1314:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $8, %rdx
jne .ELSE_NOT_3277
.loc_26_1315:
call printDebugContext
.loc_26_1316:
leaq .VAR_3271(%rip), %rdi
leaq .VAR_3279(%rip), %rsi
call __Bah_panic
.loc_26_1317:
movq $40, %rdi
call uintToStr
movq %rax, -2416(%rbp)
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
movq -2416(%rbp), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
jmp .ELSE_NOT_3281
.ELSE_NOT_3277:
.loc_26_1318:
.loc_26_1319:
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
leaq -336(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -284(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.ELSE_NOT_3281:
.loc_26_1323:
leaq .VAR_2794(%rip), %rax
movq %rax, -2416(%rbp)
movq -80(%rbp), %rdi
call bahType.toStr
movq %rax, -2432(%rbp)
leaq .VAR_2794(%rip), %rax
movq %rax, -2448(%rbp)
movl $5, %edi
movq -2416(%rbp), %rbx
addl (%rbx), %edi
movq -2432(%rbp), %rbx
addl (%rbx), %edi
movq -2448(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -2464(%rbp)
call memoryAllocSTR_NZ
subq $5, -2464(%rbp)
movq -2464(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -2480(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -2416(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2496(%rbp), %rdx
movq -2464(%rbp), %rdi
addq %rdx, %rdi
movq -2432(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2496(%rbp), %rdx
movq -2464(%rbp), %rdi
addq %rdx, %rdi
movq -2448(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2480(%rbp), %rdx
movq %rdx, -288(%rbp)
.loc_26_1324:
movq -192(%rbp), %rbx
subq $8, %rbx
movq %rbx, -192(%rbp)
.loc_26_1325:
movq -288(%rbp), %rdi
call getStrLen
leaq -352(%rbp), %rdi
leaq gen(%rip), %rsi
movq -288(%rbp), %rdx
movq %rax, %rcx
call asmContext.generateStaticStr
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -352(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -320(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -304(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -300(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1328:
movq -192(%rbp), %rbx
subq $16, %rbx
movq %rbx, -192(%rbp)
.loc_26_1329:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_3296
.loc_26_1330:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1905(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
jmp .ELSE_NOT_3298
.IF_NOT_3296:
.loc_26_1331:
.loc_26_1332:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.ELSE_NOT_3298:
.loc_26_1336:
movq -192(%rbp), %rbx
subq $8, %rbx
movq %rbx, -192(%rbp)
.loc_26_1337:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_3303
.loc_26_1338:
movq -32(%rbp), %rax
addq $24, %rax
leaq -416(%rbp), %rdi
movq (%rax), %rsi
movq -48(%rbp), %rdx
call generateReflectionFromType
.loc_26_1339:
movq $-1, -384(%rbp)
.loc_26_1340:
movq $8, -408(%rbp)
.loc_26_1341:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
jmp .ELSE_NOT_3305
.IF_NOT_3303:
.loc_26_1342:
.loc_26_1343:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.ELSE_NOT_3305:
.loc_26_1347:
movq -192(%rbp), %rbx
subq $8, %rbx
movq %rbx, -192(%rbp)
.loc_26_1348:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_3310
.loc_26_1349:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1905(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
jmp .ELSE_NOT_3312
.IF_NOT_3310:
.loc_26_1350:
.loc_26_1351:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.ELSE_NOT_3312:
.loc_26_1355:
movq -192(%rbp), %rbx
subq $8, %rbx
movq %rbx, -192(%rbp)
.loc_26_1356:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_3317
.loc_26_1357:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2165(%rip), %rdx
movq $8, %rcx
movq $0, %r8
call asmContext.generateVarDecl
.loc_26_1358:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_1359:
movq $40, %rdi
call uintToStr
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1360:
leaq -544(%rbp), %rdi
movq memoryAllocFunction(%rip), %rsi
call asmSymbolValue
leaq -608(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -496(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -492(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -608(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -576(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -560(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -556(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_1362:
movq $24, %rdi
call intToStr
leaq -672(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -736(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -672(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -640(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -624(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -620(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1363:
leaq -800(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -736(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -704(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -688(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -684(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1364:
movq $72, %rdi
call uintToStr
leaq -864(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -800(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -768(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -752(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -748(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -864(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -832(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -816(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -812(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1366:
movq $0, -880(%rbp)
.loc_26_1367:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -896(%rbp)
.loc_26_1368:
movq -896(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_3324
movb %al, %r11b
.FOR_LOOP_START_3324:
.loc_26_1369:
addq $1, -880(%rbp)
movq -896(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -896(%rbp)
movq -896(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_3324
.FOR_NOT_3324:
.loc_26_1372:
movq $8, %rdi
call intToStr
leaq -960(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1024(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -960(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -928(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -912(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -908(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1373:
leaq -1088(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1024(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -992(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -976(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -972(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1374:
movq -880(%rbp), %rdi
call uintToStr
leaq -1152(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1088(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1056(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1040(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1036(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1152(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1120(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1104(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1100(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1376:
movq $16, %rdi
call intToStr
leaq -1216(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1280(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1216(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1184(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1168(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1164(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1377:
leaq -1344(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1280(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1248(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1232(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1228(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1378:
movq -880(%rbp), %rdi
call uintToStr
leaq -1408(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1344(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1312(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1296(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1292(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1408(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1376(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1360(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1356(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1381:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_1382:
movq $72, %rbx
imulq -880(%rbp), %rbx
movq %rbx, %rdi
call uintToStr
leaq -1472(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1472(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1440(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1424(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1420(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1383:
leaq -1536(%rbp), %rdi
movq memoryAllocFunction(%rip), %rsi
call asmSymbolValue
leaq -1600(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1536(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1504(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1488(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1484(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_1384:
leaq -1664(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1385:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1600(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1568(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1552(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1548(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1616(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1612(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_1386:
movq $0, -1632(%rbp)
.loc_26_1387:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1600(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1568(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1552(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1548(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1616(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1612(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_1388:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1391:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -896(%rbp)
.loc_26_1392:
movq $0, -1680(%rbp)
.loc_26_1393:
movq -896(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_3336
movb %al, %r11b
.FOR_LOOP_START_3336:
.loc_26_1395:
leaq -1744(%rbp), %rdi
movq -896(%rbp), %rsi
movq -48(%rbp), %rdx
call generateReflectionFromType
.loc_26_1397:
leaq -1808(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
vmovdqu -1808(%rbp), %ymm1
vmovdqu %ymm1, -1664(%rbp)
vmovdqu -1776(%rbp), %xmm1
vmovdqu %xmm1, -1632(%rbp)
movd -1760(%rbp), %xmm2
movd %xmm2, -1616(%rbp)
movw -1756(%rbp), %bx
movw %bx, -1612(%rbp)
.loc_26_1398:
movq $72, %rbx
imulq -1680(%rbp), %rbx
movq %rbx, %rdi
call uintToStr
leaq -1872(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1936(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1616(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1612(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1872(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1840(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1824(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1820(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
vmovdqu -1936(%rbp), %ymm1
vmovdqu %ymm1, -1664(%rbp)
vmovdqu -1904(%rbp), %xmm1
vmovdqu %xmm1, -1632(%rbp)
movd -1888(%rbp), %xmm2
movd %xmm2, -1616(%rbp)
movw -1884(%rbp), %bx
movw %bx, -1612(%rbp)
.loc_26_1399:
movq $1, -1632(%rbp)
.loc_26_1400:
movq $72, -1656(%rbp)
.loc_26_1401:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1616(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1612(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1744(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1712(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1696(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1692(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1403:
leaq .VAR_2794(%rip), %rax
movq %rax, -2416(%rbp)
movq -896(%rbp), %rax
movq (%rax), %rax
movq %rax, -2432(%rbp)
leaq .VAR_2794(%rip), %rax
movq %rax, -2448(%rbp)
movl $5, %edi
movq -2416(%rbp), %rbx
addl (%rbx), %edi
movq -2432(%rbp), %rbx
addl (%rbx), %edi
movq -2448(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -2464(%rbp)
call memoryAllocSTR_NZ
subq $5, -2464(%rbp)
movq -2464(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -2480(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -2416(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2496(%rbp), %rdx
movq -2464(%rbp), %rdi
addq %rdx, %rdi
movq -2432(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2496(%rbp), %rdx
movq -2464(%rbp), %rdi
addq %rdx, %rdi
movq -2448(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2480(%rbp), %rdx
movq %rdx, -288(%rbp)
.loc_26_1404:
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, -2000(%rbp)
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, -1968(%rbp)
movd -1616(%rbp), %xmm2
movd %xmm2, -1952(%rbp)
movw -1612(%rbp), %bx
movw %bx, -1948(%rbp)
.loc_26_1405:
movq $0, -1968(%rbp)
.loc_26_1406:
movq $8, -1992(%rbp)
.loc_26_1408:
movq $-48, %rdi
call intToStr
leaq -2064(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -2128(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2000(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1968(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1952(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1948(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2064(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2032(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2016(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2012(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_1409:
movq $1, -2096(%rbp)
.loc_26_1410:
movq -288(%rbp), %rdi
call getStrLen
leaq -2192(%rbp), %rdi
leaq gen(%rip), %rsi
movq -288(%rbp), %rdx
movq %rax, %rcx
call asmContext.generateStaticStr
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2128(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2096(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2080(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2076(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2140(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1412:
movq $0, -2096(%rbp)
.loc_26_1413:
movq $40, %rdi
call uintToStr
leaq -2256(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -2320(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2128(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2096(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2080(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2076(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2204(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_1414:
movq $1, -2288(%rbp)
.loc_26_1415:
movq -896(%rbp), %rax
addq $16, %rax
movq (%rax), %rdi
call uintToStr
leaq -2384(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2320(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2288(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2272(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2268(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2384(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2352(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2336(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2332(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1417:
addq $1, -1680(%rbp)
movq -896(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -896(%rbp)
movq -896(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_3336
.FOR_NOT_3336:
jmp .ELSE_NOT_3395
.IF_NOT_3317:
.loc_26_1419:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .ELSE_NOT_3359
.loc_26_1420:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_2165(%rip), %rdx
movq $8, %rcx
movq $0, %r8
call asmContext.generateVarDecl
.loc_26_1421:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_1422:
movq $40, %rdi
call uintToStr
leaq -480(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1423:
leaq -544(%rbp), %rdi
movq memoryAllocFunction(%rip), %rsi
call asmSymbolValue
leaq -608(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -496(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -492(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -608(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -576(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -560(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -556(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_1425:
movq $24, %rdi
call intToStr
leaq -672(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -736(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -672(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -640(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -624(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -620(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1426:
leaq -800(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -736(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -704(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -688(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -684(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1427:
movq $72, %rdi
call uintToStr
leaq -864(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -800(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -768(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -752(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -748(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -864(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -832(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -816(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -812(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1429:
movq $0, -880(%rbp)
.loc_26_1430:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -896(%rbp)
.loc_26_1431:
movq -896(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_3365
movb %al, %r11b
.FOR_LOOP_START_3365:
.loc_26_1432:
addq $1, -880(%rbp)
movq -896(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -896(%rbp)
movq -896(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_3365
.FOR_NOT_3365:
.loc_26_1435:
movq $8, %rdi
call intToStr
leaq -960(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1024(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -960(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -928(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -912(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -908(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1436:
leaq -1088(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1024(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -992(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -976(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -972(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1437:
movq -880(%rbp), %rdi
call uintToStr
leaq -1152(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1088(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1056(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1040(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1036(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1152(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1120(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1104(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1100(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1439:
movq $16, %rdi
call intToStr
leaq -1216(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1280(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1216(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1184(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1168(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1164(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
.loc_26_1440:
leaq -1344(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1280(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1248(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1232(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1228(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1441:
movq -880(%rbp), %rdi
call uintToStr
leaq -1408(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1344(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1312(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1296(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1292(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1408(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1376(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1360(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1356(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1444:
leaq gen(%rip), %rdi
call asmContext.generateFnCallStart
.loc_26_1445:
movq $72, %rbx
imulq -880(%rbp), %rbx
movq %rbx, %rdi
call uintToStr
leaq -1472(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1472(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1440(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1424(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1420(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateFnCallArgument
addq $64, %rsp
.loc_26_1446:
leaq -1536(%rbp), %rdi
movq memoryAllocFunction(%rip), %rsi
call asmSymbolValue
leaq -1600(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1536(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1504(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1488(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1484(%rbp), %bx
movw %bx, (%r10)
movq $8, %rdx
movq $0, %rcx
movq $0, %r8
call asmContext.generateFnCall
addq $64, %rsp
.loc_26_1447:
leaq -1664(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
.loc_26_1448:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1600(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1568(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1552(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1548(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1616(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1612(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_1449:
movq $0, -1632(%rbp)
.loc_26_1450:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1600(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1568(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1552(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1548(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1616(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1612(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_1451:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1454:
movq -32(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -896(%rbp)
.loc_26_1455:
movq $0, -1680(%rbp)
.loc_26_1456:
movq $0, -1696(%rbp)
.loc_26_1457:
movq -896(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_3376
movb %al, %r11b
.FOR_LOOP_START_3376:
.loc_26_1458:
leaq -1760(%rbp), %rdi
movq -896(%rbp), %rsi
movq -48(%rbp), %rdx
call generateReflectionFromType
.loc_26_1460:
leaq -1824(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestDereference
addq $64, %rsp
vmovdqu -1824(%rbp), %ymm1
vmovdqu %ymm1, -1664(%rbp)
vmovdqu -1792(%rbp), %xmm1
vmovdqu %xmm1, -1632(%rbp)
movd -1776(%rbp), %xmm2
movd %xmm2, -1616(%rbp)
movw -1772(%rbp), %bx
movw %bx, -1612(%rbp)
.loc_26_1461:
movq $72, %rbx
imulq -1680(%rbp), %rbx
movq %rbx, %rdi
call uintToStr
leaq -1888(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -1952(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1616(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1612(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1888(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1856(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1840(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1836(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDestSymOffset
addq $128, %rsp
vmovdqu -1952(%rbp), %ymm1
vmovdqu %ymm1, -1664(%rbp)
vmovdqu -1920(%rbp), %xmm1
vmovdqu %xmm1, -1632(%rbp)
movd -1904(%rbp), %xmm2
movd %xmm2, -1616(%rbp)
movw -1900(%rbp), %bx
movw %bx, -1612(%rbp)
.loc_26_1462:
movq $1, -1632(%rbp)
.loc_26_1463:
movq $72, -1656(%rbp)
.loc_26_1464:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1616(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1612(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1760(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1728(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1712(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1708(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1466:
leaq .VAR_2794(%rip), %rax
movq %rax, -2416(%rbp)
movq -896(%rbp), %rdi
call bahType.toStr
movq %rax, -2432(%rbp)
leaq .VAR_2794(%rip), %rax
movq %rax, -2448(%rbp)
movl $5, %edi
movq -2416(%rbp), %rbx
addl (%rbx), %edi
movq -2432(%rbp), %rbx
addl (%rbx), %edi
movq -2448(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -2464(%rbp)
call memoryAllocSTR_NZ
subq $5, -2464(%rbp)
movq -2464(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -2480(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -2416(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2496(%rbp), %rdx
movq -2464(%rbp), %rdi
addq %rdx, %rdi
movq -2432(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2496(%rbp), %rdx
movq -2464(%rbp), %rdi
addq %rdx, %rdi
movq -2448(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -2464(%rbp)
movq %rdx, -2496(%rbp)
call memcpy
movq -2480(%rbp), %rdx
movq %rdx, -288(%rbp)
.loc_26_1467:
vmovdqu -1664(%rbp), %ymm1
vmovdqu %ymm1, -2016(%rbp)
vmovdqu -1632(%rbp), %xmm1
vmovdqu %xmm1, -1984(%rbp)
movd -1616(%rbp), %xmm2
movd %xmm2, -1968(%rbp)
movw -1612(%rbp), %bx
movw %bx, -1964(%rbp)
.loc_26_1468:
movq $0, -1984(%rbp)
.loc_26_1469:
movq $8, -2008(%rbp)
.loc_26_1471:
movq $-48, %rdi
call intToStr
leaq -2080(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -2144(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2016(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -1984(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -1968(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -1964(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2080(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2048(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2032(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2028(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_1472:
movq $1, -2112(%rbp)
.loc_26_1473:
movq -288(%rbp), %rdi
call getStrLen
leaq -2208(%rbp), %rdi
leaq gen(%rip), %rsi
movq -288(%rbp), %rdx
movq %rax, %rcx
call asmContext.generateStaticStr
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2096(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2092(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2156(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1475:
movq $0, -2112(%rbp)
.loc_26_1476:
movq $40, %rdi
call uintToStr
leaq -2272(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq -2336(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2096(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2092(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2272(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2240(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2224(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2220(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateSymOffset
addq $128, %rsp
.loc_26_1477:
movq $1, -2304(%rbp)
.loc_26_1478:
movq -1696(%rbp), %rdi
call uintToStr
leaq -2400(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2336(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2304(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2288(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2284(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -2400(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -2368(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -2352(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -2348(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1480:
movq -896(%rbp), %rax
addq $8, %rax
movq -1696(%rbp), %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -1696(%rbp)
.loc_26_1481:
addq $1, -1680(%rbp)
movq -896(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -896(%rbp)
movq -896(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_3376
.FOR_NOT_3376:
jmp .ELSE_NOT_3395
.ELSE_NOT_3359:
.loc_26_1483:
.loc_26_1484:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.ELSE_NOT_3395:
.loc_26_1488:
movq -192(%rbp), %rbx
subq $8, %rbx
movq %rbx, -192(%rbp)
.loc_26_1489:
leaq -416(%rbp), %rdi
leaq gen(%rip), %rsi
leaq .VAR_1854(%rip), %rdx
call asmContext.staticInt
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -384(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -368(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -364(%rbp), %bx
movw %bx, (%r10)
movq $1, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1491:
movq -16(%rbp), %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.global .generateReflectionFromType_end
.generateReflectionFromType_end:
.global generateReflection
generateReflection:
pushq %rbp
movq %rsp, %rbp
subq $416, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_26_1495:
movq $40, %rdi
call memoryAlloc
movq %rax, -48(%rbp)
movq $62, 24(%rax)
.loc_26_1497:
movq -32(%rbp), %rax
addq $56, %rax
leaq -112(%rbp), %rdi
movq (%rax), %rsi
movq -48(%rbp), %rdx
call generateReflectionFromType
.loc_26_1498:
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, -176(%rbp)
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, -144(%rbp)
movd -64(%rbp), %xmm2
movd %xmm2, -128(%rbp)
movw -60(%rbp), %bx
movw %bx, -124(%rbp)
.loc_26_1499:
movq $8, -168(%rbp)
.loc_26_1503:
leaq .VAR_2794(%rip), %rax
movq %rax, -336(%rbp)
movq -32(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -352(%rbp)
leaq .VAR_2794(%rip), %rax
movq %rax, -368(%rbp)
movl $5, %edi
movq -336(%rbp), %rbx
addl (%rbx), %edi
movq -352(%rbp), %rbx
addl (%rbx), %edi
movq -368(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -384(%rbp)
call memoryAllocSTR_NZ
subq $5, -384(%rbp)
movq -384(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -400(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -336(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -384(%rbp)
movq %rdx, -416(%rbp)
call memcpy
movq -416(%rbp), %rdx
movq -384(%rbp), %rdi
addq %rdx, %rdi
movq -352(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -384(%rbp)
movq %rdx, -416(%rbp)
call memcpy
movq -416(%rbp), %rdx
movq -384(%rbp), %rdi
addq %rdx, %rdi
movq -368(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -384(%rbp)
movq %rdx, -416(%rbp)
call memcpy
movq -400(%rbp), %rdx
movq %rdx, -192(%rbp)
.loc_26_1504:
movq -96(%rbp), %rbx
subq $16, %rbx
movq %rbx, -160(%rbp)
.loc_26_1505:
movq -192(%rbp), %rdi
call getStrLen
leaq -256(%rbp), %rdi
leaq gen(%rip), %rsi
movq -192(%rbp), %rdx
movq %rax, %rcx
call asmContext.generateStaticStr
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1508:
movq -96(%rbp), %rbx
subq $64, %rbx
movq %rbx, -160(%rbp)
.loc_26_1509:
leaq -320(%rbp), %rdi
movq -32(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_1510:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
je .BOOL_OR_3409
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $66, %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rax
movb (%rax), %al
movb %al, -337(%rbp)
movb -337(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_OR_3409_NOT
.BOOL_OR_3409:
movb $1, %al
jmp .BOOL_OR_3409_END
.BOOL_OR_3409_NOT:
movb $0, %al
.BOOL_OR_3409_END:
cmpb $0, %al
je .IF_NOT_3418
.loc_26_1511:
movq $-1, -288(%rbp)
.loc_26_1512:
movq $8, -312(%rbp)
.IF_NOT_3418:
.loc_26_1514:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -272(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -268(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1516:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.global .generateReflection_end
.generateReflection_end:
.global generateTypeConversion
generateTypeConversion:
pushq %rbp
movq %rsp, %rbp
subq $416, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_26_1520:
.FOR_LOOP_START_3419:
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .FOR_NOT_3419
movb %al, %r9b
.loc_26_1521:
movq -48(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
jmp .FOR_LOOP_START_3419
.FOR_NOT_3419:
.loc_26_1524:
movq -48(%rbp), %rax
addq $65, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $1, %al
je .BOOL_OR_3425_END
movq -48(%rbp), %rax
addq $66, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $1, %al
jne .BOOL_OR_3425_NOT
.BOOL_OR_3425:
movb $1, %al
jmp .BOOL_OR_3425_END
.BOOL_OR_3425_NOT:
movb $0, %al
.BOOL_OR_3425_END:
cmpb $0, %al
je .BOOL_AND_3424
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $66, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -257(%rbp)
movb -257(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_3424
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -288(%rbp)
movq -288(%rbp), %rax
movb (%rax), %al
movb %al, -289(%rbp)
movb -289(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_3424
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
movq (%rax), %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rdx
cmpq $8, %rdx
je .BOOL_AND_3424
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -352(%rbp)
movq -352(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rax
movb (%rax), %al
movb %al, -369(%rbp)
movb -369(%rbp), %dl
movzbq %dl, %rdx
cmpq $12, %rdx
je .BOOL_AND_3424
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -384(%rbp)
movq -384(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rax
movb (%rax), %al
movb %al, -401(%rbp)
movb -401(%rbp), %dl
movzbq %dl, %rdx
cmpq $13, %rdx
je .BOOL_AND_3424
movb $1, %al
jmp .BOOL_AND_3424_END
.BOOL_AND_3424:
movb $0, %al
.BOOL_AND_3424_END:
cmpb $0, %al
je .IF_NOT_3448
.loc_26_1525:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_3450(%rip), %rsi
call throwError
.IF_NOT_3448:
.loc_26_1528:
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
je .BOOL_OR_3451
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
je .BOOL_OR_3451
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rax
movb (%rax), %al
movb %al, -273(%rbp)
movb -273(%rbp), %dl
movzbq %dl, %rdx
cmpq $0, %rdx
je .BOOL_OR_3451
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -288(%rbp)
movq -288(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rax
movb (%rax), %al
movb %al, -305(%rbp)
movb -305(%rbp), %dl
movzbq %dl, %rdx
cmpq $10, %rdx
je .BOOL_OR_3451
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
movb (%rax), %al
movb %al, -321(%rbp)
movb -321(%rbp), %dl
movzbq %dl, %rdx
cmpq $10, %rdx
jne .BOOL_OR_3451_NOT
.BOOL_OR_3451:
movb $1, %al
jmp .BOOL_OR_3451_END
.BOOL_OR_3451_NOT:
movb $0, %al
.BOOL_OR_3451_END:
cmpb $0, %al
je .IF_NOT_3468
.loc_26_1530:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_3473
.loc_26_1531:
leaq -112(%rbp), %rdi
movq -32(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -48(%rbp), %rax
addq $8, %rax
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -60(%rbp), %bx
movw %bx, (%r10)
movq (%rax), %rdx
call asmContext.generateConvFloatToInt
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3473:
.loc_26_1534:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq $8, %rax
cmpq %r9, %rax
jnb .BOOL_AND_3475
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $66, %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rax
movb (%rax), %al
movb %al, -273(%rbp)
movb -273(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_3475
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, -288(%rbp)
movq -288(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rax
movb (%rax), %al
movb %al, -305(%rbp)
movb -305(%rbp), %dl
movzbq %dl, %rdx
cmpq $12, %rdx
je .BOOL_AND_3475
movb $1, %al
jmp .BOOL_AND_3475_END
.BOOL_AND_3475:
movb $0, %al
.BOOL_AND_3475_END:
cmpb $0, %al
je .IF_NOT_3488
.loc_26_1535:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_3490(%rip), %rsi
call throwError
.IF_NOT_3488:
.loc_26_1538:
leaq -112(%rbp), %rdi
movq -32(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_1540:
movq -48(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -272(%rbp)
movq %r10, %rdx
movq -272(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
je .BOOL_AND_3491
movq -32(%rbp), %rax
addq $135, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -273(%rbp)
movb -273(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_3491
movb $1, %al
jmp .BOOL_AND_3491_END
.BOOL_AND_3491:
movb $0, %al
.BOOL_AND_3491_END:
cmpb $0, %al
je .IF_NOT_3500
.loc_26_1541:
movq $8, %rax
cmpq -104(%rbp), %rax
jnb .IF_NOT_3502
.loc_26_1542:
movq $8, -104(%rbp)
.IF_NOT_3502:
.loc_26_1544:
movq -48(%rbp), %rax
addq $8, %rax
movq %rax, -272(%rbp)
movq -48(%rbp), %rax
addq $64, %rax
movb (%rax), %al
movb %al, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
movb %al, -273(%rbp)
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -60(%rbp), %bx
movw %bx, (%r10)
movq -272(%rbp), %rax
movq (%rax), %rdx
movb -273(%rbp), %cl
movsbl %cl, %ecx
call asmContext.generateConvSizes
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3500:
.loc_26_1547:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
jmp .ELSE_NOT_3510
.IF_NOT_3468:
.loc_26_1549:
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_3510
.loc_26_1551:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .IF_NOT_3515
.loc_26_1552:
leaq -112(%rbp), %rdi
movq -32(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
movq -48(%rbp), %rax
addq $8, %rax
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -60(%rbp), %bx
movw %bx, (%r10)
movq (%rax), %rdx
call asmContext.generateConvIntToFloat
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3515:
.loc_26_1555:
leaq -112(%rbp), %rdi
movq -32(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_1556:
movq -48(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -272(%rbp)
movq %r10, %rdx
movq -272(%rbp), %rax
movq (%rax), %r8
cmpq %r8, %rdx
je .IF_NOT_3522
.loc_26_1557:
movb $1, -64(%rbp)
.loc_26_1558:
movq -48(%rbp), %rax
addq $8, %rax
leaq -176(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -64(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -60(%rbp), %bx
movw %bx, (%r10)
movq (%rax), %rdx
movq $0, %rcx
call asmContext.generateConvSizes
addq $64, %rsp
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -128(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -124(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3522:
.ELSE_NOT_3510:
.loc_26_1564:
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movq -48(%rbp), %rax
addq $64, %rax
movq %rax, -272(%rbp)
movb %r9b, %dl
movq -272(%rbp), %rax
movb (%rax), %r8b
cmpb %r8b, %dl
je .BOOL_OR_3524
movq -32(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $66, %rax
movq %rax, -288(%rbp)
movq -288(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_3530
movq -48(%rbp), %rax
addq $66, %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_3530
movb $1, %al
jmp .BOOL_AND_3530_END
.BOOL_AND_3530:
movb $0, %al
.BOOL_AND_3530_END:
cmpb $1, %al
jne .BOOL_OR_3524_NOT
.BOOL_OR_3524:
movb $1, %al
jmp .BOOL_OR_3524_END
.BOOL_OR_3524_NOT:
movb $0, %al
.BOOL_OR_3524_END:
cmpb $0, %al
je .IF_NOT_3534
.loc_26_1565:
movq -48(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_26_1566:
movq -48(%rbp), %rax
addq $66, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3537
.loc_26_1567:
movq $8, -64(%rbp)
.IF_NOT_3537:
.loc_26_1569:
leaq -128(%rbp), %rdi
movq -32(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_1570:
movq -120(%rbp), %rdx
cmpq -64(%rbp), %rdx
je .BOOL_AND_3538
movq -32(%rbp), %rax
addq $135, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_3538
movb $1, %al
jmp .BOOL_AND_3538_END
.BOOL_AND_3538:
movb $0, %al
.BOOL_AND_3538_END:
cmpb $0, %al
je .IF_NOT_3543
.loc_26_1571:
leaq -192(%rbp), %rdi
movq $512, %rsi
movq -120(%rbp), %rdx
movq $0, %rcx
call asmSymbolReg
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -128(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -96(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -80(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -76(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_1572:
leaq -256(%rbp), %rdi
movq $512, %rsi
movq -64(%rbp), %rdx
movq $0, %rcx
call asmSymbolReg
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, -128(%rbp)
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, -96(%rbp)
movd -208(%rbp), %xmm2
movd %xmm2, -80(%rbp)
movw -204(%rbp), %bx
movw %bx, -76(%rbp)
.IF_NOT_3543:
.loc_26_1574:
movq -16(%rbp), %rdi
vmovdqu -128(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -96(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -80(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -76(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.IF_NOT_3534:
.loc_26_1579:
movq -32(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_3545(%rip), %rsi
call throwError
.loc_26_1581:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -112(%rbp)
vmovdqu %xmm0, -80(%rbp)
movss %xmm0, -64(%rbp)
xorb %al, %al
movb %al, -60(%rbp)
movb %al, -59(%rbp)
movq $-1, -72(%rbp)
.loc_26_1582:
movq -16(%rbp), %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
leave
ret
.global .generateTypeConversion_end
.generateTypeConversion_end:
.global generateImmediateValues
generateImmediateValues:
pushq %rbp
movq %rsp, %rbp
subq $1088, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
.loc_26_1587:
movq -16(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3548
.loc_26_1588:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_3550(%rip), %rsi
call throwError
.IF_NOT_3548:
.loc_26_1591:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_3554
.loc_26_1592:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -96(%rbp)
vmovdqu %xmm0, -64(%rbp)
movss %xmm0, -48(%rbp)
xorb %al, %al
movb %al, -44(%rbp)
movb %al, -43(%rbp)
movq $-1, -56(%rbp)
movq -16(%rbp), %rax
addq $56, %rax
movq %rax, -1024(%rbp)
movq -1024(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -1040(%rbp)
movq -1040(%rbp), %rax
movq (%rax), %rdx
movq %rdx, -88(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -1056(%rbp)
movq -1056(%rbp), %rax
movq (%rax), %rdx
movq %rdx, -96(%rbp)
movq -32(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1072(%rbp)
movq -32(%rbp), %rdi
movq -1072(%rbp), %rsi
call __Bah_realocate_arr
movq -32(%rbp), %rdi
movq -1072(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -96(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -64(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -48(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -44(%rbp), %bx
movw %bx, (%rdi)
jmp .ELSE_NOT_3674
.IF_NOT_3554:
.loc_26_1596:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $1, %rdx
jne .ELSE_NOT_3562
.loc_26_1597:
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %rdi
call strToFloat
movq %xmm0, -48(%rbp)
.loc_26_1598:
movq -48(%rbp), %rdx
movq %rdx, -64(%rbp)
.loc_26_1600:
movq -64(%rbp), %rax
movl %eax, -72(%rbp)
.loc_26_1602:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -128(%rbp)
vmovdqu %xmm0, -96(%rbp)
movss %xmm0, -80(%rbp)
xorb %al, %al
movb %al, -76(%rbp)
movb %al, -75(%rbp)
movq $-1, -88(%rbp)
movq $4, -120(%rbp)
movl -72(%rbp), %edi
call intToStr
movq %rax, -128(%rbp)
movq -32(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -32(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -32(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -128(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -96(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -80(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -76(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1607:
movq -16(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $8, %rdx
jne .IF_NOT_3570
.loc_26_1608:
movq -64(%rbp), %rbx
sarq $32, %rbx
movl %ebx, -136(%rbp)
.loc_26_1609:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -192(%rbp)
vmovdqu %xmm0, -160(%rbp)
movss %xmm0, -144(%rbp)
xorb %al, %al
movb %al, -140(%rbp)
movb %al, -139(%rbp)
movq $-1, -152(%rbp)
movq $4, -184(%rbp)
movl -136(%rbp), %edi
call intToStr
movq %rax, -192(%rbp)
movq -32(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -32(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -32(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -144(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -140(%rbp), %bx
movw %bx, (%rdi)
.IF_NOT_3570:
jmp .ELSE_NOT_3674
.ELSE_NOT_3562:
.loc_26_1616:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $5, %rdx
jne .ELSE_NOT_3575
.loc_26_1617:
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -1024(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %rdi
call getStrLen
leaq -96(%rbp), %rdi
leaq gen(%rip), %rsi
movq -1024(%rbp), %rdx
movq %rax, %rcx
call asmContext.generateStaticStr
.loc_26_1618:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -160(%rbp)
vmovdqu %xmm0, -128(%rbp)
movss %xmm0, -112(%rbp)
xorb %al, %al
movb %al, -108(%rbp)
movb %al, -107(%rbp)
movq $-1, -120(%rbp)
movq $8, -152(%rbp)
movq -96(%rbp), %rdx
movq %rdx, -160(%rbp)
movq -32(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -32(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -32(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -112(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -108(%rbp), %bx
movw %bx, (%rdi)
jmp .ELSE_NOT_3674
.ELSE_NOT_3575:
.loc_26_1622:
movq -16(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $14, %rdx
jne .ELSE_NOT_3585
.loc_26_1623:
movq -16(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_3590
.loc_26_1625:
movq $0, -48(%rbp)
.loc_26_1626:
movq -16(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_26_1627:
movq -64(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_3592
movb %al, %r11b
.FOR_LOOP_START_3592:
.loc_26_1628:
addq $1, -48(%rbp)
movq -64(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_3592
.FOR_NOT_3592:
.loc_26_1631:
movq $40, %rdi
call memoryAlloc
movq %rax, -80(%rbp)
movq $54, 24(%rax)
.loc_26_1633:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -144(%rbp)
vmovdqu %xmm0, -112(%rbp)
movss %xmm0, -96(%rbp)
xorb %al, %al
movb %al, -92(%rbp)
movb %al, -91(%rbp)
movq $-1, -104(%rbp)
movq $8, -136(%rbp)
leaq .VAR_1854(%rip), %rdx
movq %rdx, -144(%rbp)
movq -80(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -80(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -80(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -96(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -92(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1638:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -208(%rbp)
vmovdqu %xmm0, -176(%rbp)
movss %xmm0, -160(%rbp)
xorb %al, %al
movb %al, -156(%rbp)
movb %al, -155(%rbp)
movq $-1, -168(%rbp)
movq $8, -200(%rbp)
movq -48(%rbp), %rdi
call uintToStr
movq %rax, -208(%rbp)
movq -80(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -80(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -80(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1643:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -272(%rbp)
vmovdqu %xmm0, -240(%rbp)
movss %xmm0, -224(%rbp)
xorb %al, %al
movb %al, -220(%rbp)
movb %al, -219(%rbp)
movq $-1, -232(%rbp)
movq $8, -264(%rbp)
movq -48(%rbp), %rdi
call uintToStr
movq %rax, -272(%rbp)
movq -80(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -80(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -80(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -224(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -220(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1648:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -336(%rbp)
vmovdqu %xmm0, -304(%rbp)
movss %xmm0, -288(%rbp)
xorb %al, %al
movb %al, -284(%rbp)
movb %al, -283(%rbp)
movq $-1, -296(%rbp)
movq $8, -328(%rbp)
movq -16(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
movq %rax, -336(%rbp)
movq -80(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -80(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -80(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -288(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -284(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1653:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -400(%rbp)
vmovdqu %xmm0, -368(%rbp)
movss %xmm0, -352(%rbp)
xorb %al, %al
movb %al, -348(%rbp)
movb %al, -347(%rbp)
movq $-1, -360(%rbp)
movq $8, -392(%rbp)
leaq .VAR_1854(%rip), %rdx
movq %rdx, -400(%rbp)
movq -80(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -80(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -80(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -400(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -368(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -352(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -348(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1659:
leaq .VAR_3606(%rip), %rax
movq %rax, -1024(%rbp)
movq asmRandId(%rip), %rdi
call uintToStr
movq %rax, -1040(%rbp)
movl $5, %edi
movq -1024(%rbp), %rbx
addl (%rbx), %edi
movq -1040(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1056(%rbp)
call memoryAllocSTR_NZ
subq $5, -1056(%rbp)
movq -1056(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1072(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1024(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1056(%rbp)
movq %rdx, -1088(%rbp)
call memcpy
movq -1088(%rbp), %rdx
movq -1056(%rbp), %rdi
addq %rdx, %rdi
movq -1040(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1056(%rbp)
movq %rdx, -1088(%rbp)
call memcpy
movq -1072(%rbp), %rdx
movq %rdx, -416(%rbp)
.loc_26_1660:
leaq -480(%rbp), %rdi
movq -416(%rbp), %rsi
call asmSymbolStaticName
.loc_26_1661:
movq $8, -472(%rbp)
.loc_26_1662:
movq $-1, -448(%rbp)
.loc_26_1663:
movq -16(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
leaq -544(%rbp), %rdi
leaq gen(%rip), %rsi
movq -416(%rbp), %rdx
movq (%rax), %rcx
movq -80(%rbp), %r8
call asmContext.generatePrivateVarWithValue
.loc_26_1664:
addq $1, asmRandId(%rip)
.loc_26_1666:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -608(%rbp)
vmovdqu %xmm0, -576(%rbp)
movss %xmm0, -560(%rbp)
xorb %al, %al
movb %al, -556(%rbp)
movb %al, -555(%rbp)
movq $-1, -568(%rbp)
movq $8, -600(%rbp)
movq -544(%rbp), %rdx
movq %rdx, -608(%rbp)
movq -32(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -32(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -32(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -608(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -576(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -560(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -556(%rbp), %bx
movw %bx, (%rdi)
.loc_26_1671:
leaq gen(%rip), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -816(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -784(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm3
vmovdqu %ymm3, -752(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm4
vmovdqu %ymm4, -720(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm5
vmovdqu %ymm5, -688(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm6
vmovdqu %ymm6, -656(%rbp)
addq $32, %rax
vmovdqu (%rax), %xmm6
vmovdqu %xmm6, -624(%rbp)
.loc_26_1672:
leaq initFnGen(%rip), %rax
leaq gen(%rip), %rdx
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %xmm6
vmovdqu %xmm6, (%rdx)
.loc_26_1673:
leaq gen(%rip), %rdi
addq $176, %rdi
movq -640(%rbp), %rdx
movq %rdx, (%rdi)
.loc_26_1674:
leaq gen(%rip), %rdi
addq $184, %rdi
movq -632(%rbp), %rdx
movq %rdx, (%rdi)
.loc_26_1676:
leaq -880(%rbp), %rdi
movq -16(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_26_1677:
leaq -944(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -880(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -848(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -832(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -828(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateDereference
addq $64, %rsp
.loc_26_1678:
movq $8, -936(%rbp)
.loc_26_1681:
leaq -1008(%rbp), %rdi
movq $1, %rsi
movq $8, %rdx
movq $0, %rcx
call asmSymbolReg
.loc_26_1682:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -432(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -428(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1008(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -976(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -960(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -956(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateMoveValue
addq $128, %rsp
.loc_26_1683:
movq $1, -976(%rbp)
.loc_26_1685:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -1008(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -976(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -960(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -956(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -944(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -912(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -896(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -892(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.loc_26_1687:
leaq gen(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq -808(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, -808(%rbp)
.loc_26_1688:
leaq gen(%rip), %rax
movq (%rax), %rax
movq -816(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, -816(%rbp)
.loc_26_1689:
leaq gen(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq -800(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, -800(%rbp)
.loc_26_1690:
leaq gen(%rip), %rdx
vmovdqu -816(%rbp), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rdx
vmovdqu -784(%rbp), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rdx
vmovdqu -752(%rbp), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rdx
vmovdqu -720(%rbp), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rdx
vmovdqu -688(%rbp), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rdx
vmovdqu -656(%rbp), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rdx
vmovdqu -624(%rbp), %xmm6
vmovdqu %xmm6, (%rdx)
jmp .ELSE_NOT_3662
.IF_NOT_3590:
.loc_26_1691:
movq -16(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_OR_3618
movq -16(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -1024(%rbp)
movq -1024(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_3623
movq -16(%rbp), %rax
addq $56, %rax
movq %rax, -1040(%rbp)
movq -1040(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1056(%rbp)
movq -1056(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1072(%rbp)
movq -1072(%rbp), %rax
movb (%rax), %al
movb %al, -1073(%rbp)
movb -1073(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .BOOL_AND_3623
movb $1, %al
jmp .BOOL_AND_3623_END
.BOOL_AND_3623:
movb $0, %al
.BOOL_AND_3623_END:
cmpb $1, %al
jne .BOOL_OR_3618_NOT
.BOOL_OR_3618:
movb $1, %al
jmp .BOOL_OR_3618_END
.BOOL_OR_3618_NOT:
movb $0, %al
.BOOL_OR_3618_END:
cmpb $0, %al
je .ELSE_NOT_3631
.loc_26_1692:
movq -16(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_26_1693:
movq -48(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_3634
movb %al, %r11b
.FOR_LOOP_START_3634:
.loc_26_1695:
movq -16(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_26_1696:
movq -64(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_3639
movb %al, %r11b
.FOR_LOOP_START_3639:
.loc_26_1697:
movq -64(%rbp), %rax
addq $56, %rax
movq %rax, -1024(%rbp)
movq -1024(%rbp), %rax
movq (%rax), %rax
movq %rax, -1040(%rbp)
movq -1040(%rbp), %rax
movq (%rax), %rax
movq %rax, -1056(%rbp)
movq -48(%rbp), %rax
movq %rax, -1072(%rbp)
movq -1056(%rbp), %rdi
movq -1072(%rbp), %rax
movq (%rax), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3647
.loc_26_1698:
jmp .FOR_NOT_3639
.IF_NOT_3647:
movq -64(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_3639
.FOR_NOT_3639:
.loc_26_1702:
movq -64(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_3649
.loc_26_1703:
movq -64(%rbp), %rax
addq $56, %rax
movq -64(%rbp), %rdi
addq $72, %rdi
movq (%rdi), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_26_1704:
movq -64(%rbp), %rax
addq $72, %rax
movq %rax, -1024(%rbp)
movq -1024(%rbp), %rax
movq (%rax), %rdi
movq -32(%rbp), %rsi
call generateImmediateValues
jmp .ELSE_NOT_3652
.IF_NOT_3649:
.loc_26_1705:
.loc_26_1707:
movq -48(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
.loc_26_1708:
movq $8, -96(%rbp)
.loc_26_1709:
movq $0, %rax
cmpq -80(%rbp), %rax
jnb .FOR_NOT_3654
movb %al, %r11b
.FOR_LOOP_START_3654:
.loc_26_1710:
movq -96(%rbp), %rdx
cmpq -80(%rbp), %rdx
jle .FOR_NOT_3657
movb %al, %r11b
.FOR_LOOP_START_3657:
.loc_26_1711:
movq -96(%rbp), %rbx
sarq $1, %rbx
movq %rbx, -96(%rbp)
movq -96(%rbp), %rdx
cmpq -80(%rbp), %rdx
jg .FOR_LOOP_START_3657
.FOR_NOT_3657:
.loc_26_1713:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -160(%rbp)
vmovdqu %xmm0, -128(%rbp)
movss %xmm0, -112(%rbp)
xorb %al, %al
movb %al, -108(%rbp)
movb %al, -107(%rbp)
movq $-1, -120(%rbp)
leaq .VAR_1854(%rip), %rdx
movq %rdx, -160(%rbp)
movq -96(%rbp), %rdx
movq %rdx, -152(%rbp)
movq -32(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1024(%rbp)
movq -32(%rbp), %rdi
movq -1024(%rbp), %rsi
call __Bah_realocate_arr
movq -32(%rbp), %rdi
movq -1024(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -128(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -112(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -108(%rbp), %bx
movw %bx, (%rdi)
movq -80(%rbp), %rbx
subq -96(%rbp), %rbx
movq %rbx, -80(%rbp)
movq $0, %rax
cmpq -80(%rbp), %rax
jb .FOR_LOOP_START_3654
.FOR_NOT_3654:
.ELSE_NOT_3652:
movq -48(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
movq -48(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_3634
.FOR_NOT_3634:
jmp .ELSE_NOT_3662
.ELSE_NOT_3631:
.loc_26_1720:
.loc_26_1721:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -1024(%rbp)
movq -1024(%rbp), %rdi
leaq .VAR_3664(%rip), %rsi
call throwError
.ELSE_NOT_3662:
jmp .ELSE_NOT_3674
.ELSE_NOT_3585:
.loc_26_1725:
movq -16(%rbp), %rax
addq $80, %rax
movq %rax, %r11
movq %r11, %rax
addq $52, %rax
movb (%rax), %al
cmpb $0, %al
je .ELSE_NOT_3666
.loc_26_1726:
movq -16(%rbp), %rax
addq $80, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_26_1727:
movq -48(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $36, %dl
jne .IF_NOT_3670
.loc_26_1728:
movq -48(%rbp), %rax
movl (%rax), %eax
movl -48(%rbp), %edi
movq $1, %rsi
movl %eax, %edx
call strSubstitute
movq %rax, -48(%rbp)
.IF_NOT_3670:
.loc_26_1730:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -112(%rbp)
vmovdqu %xmm0, -80(%rbp)
movss %xmm0, -64(%rbp)
xorb %al, %al
movb %al, -60(%rbp)
movb %al, -59(%rbp)
movq $-1, -72(%rbp)
movq -48(%rbp), %rdx
movq %rdx, -112(%rbp)
movq -16(%rbp), %rax
addq $80, %rax
movq %rax, -1024(%rbp)
movq -1024(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -104(%rbp)
movq -32(%rbp), %rdi
call __bah_arrayLength
movq %rax, -1040(%rbp)
movq -32(%rbp), %rdi
movq -1040(%rbp), %rsi
call __Bah_realocate_arr
movq -32(%rbp), %rdi
movq -1040(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
jmp .ELSE_NOT_3674
.ELSE_NOT_3666:
.loc_26_1734:
.loc_26_1735:
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_3676(%rip), %rsi
call throwError
.ELSE_NOT_3674:
leave
ret
.global .generateImmediateValues_end
.generateImmediateValues_end:
.global generateRuntimeDebugInfo
generateRuntimeDebugInfo:
pushq %rbp
movq %rsp, %rbp
subq $240, %rsp
.loc_26_1741:
cmpb $0, isObjectFile(%rip)
je .IF_NOT_3677
.loc_26_1742:
leave
ret
.IF_NOT_3677:
.loc_26_1745:
leaq gen(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, -64(%rbp)
leaq .VAR_3679(%rip), %rdi
call rope
movq -64(%rbp), %rdi
movq %rax, %rsi
call rope.add
leaq gen(%rip), %rdi
addq $32, %rdi
movq %rax, (%rdi)
.loc_26_1746:
leaq gen(%rip), %rax
addq $40, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3681
.loc_26_1747:
movq $0, -16(%rbp)
.FOR_LOOP_START_3682:
leaq parserCtx(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -64(%rbp)
movq -64(%rbp), %rdi
call __bah_arrayLength
cmpq -16(%rbp), %rax
jle .FOR_NOT_3682
movb %al, %r11b
.loc_26_1748:
movq -16(%rbp), %rbx
salq $3, %rbx
leaq parserCtx(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_3688
.loc_26_1749:
addq $1, -16(%rbp)
jmp .FOR_LOOP_START_3682
.IF_NOT_3688:
.loc_26_1751:
movq -16(%rbp), %rbx
salq $3, %rbx
leaq parserCtx(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
.loc_26_1752:
movq -32(%rbp), %rdx
movq %rdx, -48(%rbp)
.loc_26_1754:
movq -32(%rbp), %rdi
leaq .VAR_2791(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3691
.loc_26_1755:
leaq .VAR_2789(%rip), %rdx
movq %rdx, -48(%rbp)
.IF_NOT_3691:
.loc_26_1758:
leaq gen(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, -64(%rbp)
leaq .VAR_3694(%rip), %rax
movq %rax, -80(%rbp)
leaq .VAR_3696(%rip), %rax
movq %rax, -96(%rbp)
leaq .VAR_3698(%rip), %rax
movq %rax, -112(%rbp)
movq -48(%rbp), %rdi
call __bah_strlenSTR
movq %rax, -128(%rbp)
movq -128(%rbp), %rdi
call uintToStr
movq %rax, -144(%rbp)
leaq .VAR_3702(%rip), %rax
movq %rax, -160(%rbp)
leaq .VAR_3704(%rip), %rax
movq %rax, -176(%rbp)
movl $5, %edi
movq -80(%rbp), %rbx
addl (%rbx), %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -112(%rbp), %rbx
addl (%rbx), %edi
movq -144(%rbp), %rbx
addl (%rbx), %edi
movq -160(%rbp), %rbx
addl (%rbx), %edi
movq -48(%rbp), %rbx
addl (%rbx), %edi
movq -176(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -192(%rbp)
call memoryAllocSTR_NZ
subq $5, -192(%rbp)
movq -192(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -208(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -80(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq -192(%rbp), %rdi
addq %rdx, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq -192(%rbp), %rdi
addq %rdx, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq -192(%rbp), %rdi
addq %rdx, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq -192(%rbp), %rdi
addq %rdx, %rdi
movq -112(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq -192(%rbp), %rdi
addq %rdx, %rdi
movq -144(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq -192(%rbp), %rdi
addq %rdx, %rdi
movq -160(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq -192(%rbp), %rdi
addq %rdx, %rdi
movq -48(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -224(%rbp), %rdx
movq -192(%rbp), %rdi
addq %rdx, %rdi
movq -176(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -192(%rbp)
movq %rdx, -224(%rbp)
call memcpy
movq -208(%rbp), %rdi
call rope
movq %rax, -240(%rbp)
movq -64(%rbp), %rdi
movq -240(%rbp), %rsi
call rope.add
leaq gen(%rip), %rdi
addq $32, %rdi
movq %rax, (%rdi)
addq $1, -16(%rbp)
jmp .FOR_LOOP_START_3682
.FOR_NOT_3682:
.IF_NOT_3681:
.loc_26_1762:
leaq gen(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, -64(%rbp)
leaq .VAR_3711(%rip), %rdi
call rope
movq -64(%rbp), %rdi
movq %rax, %rsi
call rope.add
leaq gen(%rip), %rdi
addq $32, %rdi
movq %rax, (%rdi)
leave
ret
.global .generateRuntimeDebugInfo_end
.generateRuntimeDebugInfo_end:
.file 27 "/home/alois/Documents/bah-asm/src/./parser.bah"
.global parallelObjCompile
parallelObjCompile:
pushq %rbp
movq %rsp, %rbp
subq $256, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
movq %rcx, -64(%rbp)
.loc_27_24:
leaq .VAR_1362(%rip), %rax
movq %rax, -176(%rbp)
leaq .VAR_3715(%rip), %rax
movq %rax, -192(%rbp)
leaq .VAR_1357(%rip), %rax
movq %rax, -208(%rbp)
movl $5, %edi
movq -176(%rbp), %rbx
addl (%rbx), %edi
movq -192(%rbp), %rbx
addl (%rbx), %edi
movq -208(%rbp), %rbx
addl (%rbx), %edi
movq -16(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -224(%rbp)
call memoryAllocSTR_NZ
subq $5, -224(%rbp)
movq -224(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -240(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -176(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -192(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -208(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -16(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -240(%rbp), %rdi
call println
.loc_27_26:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
.loc_27_27:
movq -80(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rbx
addq $-1, %rbx
movq %rbx, -96(%rbp)
movq -96(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_3722
movb %al, %r10b
.FOR_LOOP_START_3722:
.loc_27_28:
movq -80(%rbp), %rax
addq $4, %rax
addq -96(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .IF_NOT_3727
.loc_27_29:
jmp .FOR_NOT_3722
.IF_NOT_3727:
subq $1, -96(%rbp)
movq -96(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_3722
.FOR_NOT_3722:
.loc_27_32:
movq -96(%rbp), %rbx
addq $1, %rbx
movq -80(%rbp), %rdi
movq $0, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, -80(%rbp)
.loc_27_34:
movq compilerPath(%rip), %rbx
movq %rbx, -176(%rbp)
leaq .VAR_1009(%rip), %rax
movq %rax, -192(%rbp)
leaq .VAR_3732(%rip), %rax
movq %rax, -208(%rbp)
movl $5, %edi
movq -176(%rbp), %rbx
addl (%rbx), %edi
movq -192(%rbp), %rbx
addl (%rbx), %edi
movq -16(%rbp), %rbx
addl (%rbx), %edi
movq -208(%rbp), %rbx
addl (%rbx), %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -224(%rbp)
call memoryAllocSTR_NZ
subq $5, -224(%rbp)
movq -224(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -240(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -176(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -192(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -16(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -208(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
leaq -144(%rbp), %rdi
movq -240(%rbp), %rsi
call command
.loc_27_35:
leaq -144(%rbp), %rdi
call command.runBytes
movq %rax, -160(%rbp)
.loc_27_37:
movq -128(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_3738
.loc_27_38:
movq -160(%rbp), %rdi
call arrToStr
movq %rax, %rdi
call println
.loc_27_39:
movq -128(%rbp), %rax
movl %eax, %edi
call exit
.IF_NOT_3738:
.loc_27_42:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_3742
.loc_27_43:
movq -16(%rbp), %rdi
movq -48(%rbp), %rsi
call makeCacheFile
jmp .ELSE_NOT_3743
.IF_NOT_3742:
.loc_27_44:
.loc_27_45:
movq -64(%rbp), %rdi
movq -48(%rbp), %rsi
call updateCacheFile
.ELSE_NOT_3743:
.loc_27_48:
movq compileWaitChannel(%rip), %rdi
movq $0, %rsi
call channel.send
leave
ret
.global .parallelObjCompile_end
.parallelObjCompile_end:
.global includeFile
includeFile:
pushq %rbp
movq %rsp, %rbp
subq $160, %rsp
movq %rdi, -16(%rbp)
.loc_27_52:
leaq parserCtx(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, -128(%rbp)
movb $0, -129(%rbp)
movq $0, -144(%rbp)
movq -128(%rbp), %rax
addq $8, %rax
movq -144(%rbp), %rdx
cmpq (%rax), %rdx
jnb .FOR_NOT_3747
movb %al, -145(%rbp)
.FOR_LOOP_START_3747:
movq -128(%rbp), %rax
movq -144(%rbp), %rbx
salq $3, %rbx
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -160(%rbp)
movq -16(%rbp), %rdi
movq -160(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3751
movb $1, -129(%rbp)
jmp .FOR_NOT_3747
.IF_NOT_3751:
addq $1, -144(%rbp)
movq -128(%rbp), %rax
addq $8, %rax
movq -144(%rbp), %rdx
cmpq (%rax), %rdx
jb .FOR_LOOP_START_3747
.FOR_NOT_3747:
cmpb $0, -129(%rbp)
je .IF_NOT_3752
.loc_27_53:
leave
ret
.IF_NOT_3752:
.loc_27_56:
leaq parserCtx(%rip), %rdi
addq $32, %rdi
movq (%rdi), %rax
movq %rax, -128(%rbp)
leaq parserCtx(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_arrayLength
movq %rax, -144(%rbp)
movq -128(%rbp), %rdi
movq -144(%rbp), %rsi
call __Bah_realocate_arr
movq -128(%rbp), %rdi
movq -144(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_58:
pxor %xmm0, %xmm0
vmovdqu %xmm0, -32(%rbp)
.loc_27_59:
leaq -32(%rbp), %rdi
movq -16(%rbp), %rsi
leaq .VAR_729(%rip), %rdx
call fileStream.open
.loc_27_60:
leaq -32(%rbp), %rdi
call fileStream.readContent
movq %rax, -48(%rbp)
.loc_27_61:
leaq -32(%rbp), %rdi
call fileStream.close
.loc_27_64:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_27_65:
leaq parserCtx(%rip), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
.loc_27_66:
leaq gen(%rip), %rax
addq $176, %rax
movq (%rax), %rdx
movq %rdx, -96(%rbp)
.loc_27_67:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %dl
movb %dl, -97(%rbp)
.loc_27_69:
cmpb $0, isImportFile(%rip)
je .BOOL_AND_3757
movb isObjectFile(%rip), %bl
movb %bl, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_3757
movb $1, %al
jmp .BOOL_AND_3757_END
.BOOL_AND_3757:
movb $0, %al
.BOOL_AND_3757_END:
cmpb $0, %al
je .IF_NOT_3760
.loc_27_70:
leaq parserCtx(%rip), %rdi
addq $96, %rdi
movb $0, (%rdi)
jmp .ELSE_NOT_3761
.IF_NOT_3760:
.loc_27_71:
cmpb $0, isObjectFile(%rip)
je .ELSE_NOT_3761
.loc_27_72:
leaq parserCtx(%rip), %rdi
addq $96, %rdi
movb $1, (%rdi)
.ELSE_NOT_3761:
.loc_27_75:
leaq parserCtx(%rip), %rdi
addq $72, %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_76:
leaq parserCtx(%rip), %rdi
addq $64, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_78:
movq -48(%rbp), %rdi
call lexer
movq %rax, -112(%rbp)
.loc_27_80:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rax
leaq gen(%rip), %rdi
movq %rax, %rsi
call asmContext.generateFileLocation
.loc_27_81:
movq -112(%rbp), %rdi
call __bah_arrayLength
movq -112(%rbp), %rdi
movq $0, %rsi
movq %rax, %rdx
call parseLines
.loc_27_84:
leaq gen(%rip), %rdi
addq $176, %rdi
movq -96(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_85:
leaq parserCtx(%rip), %rdi
addq $72, %rdi
movq -64(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_86:
leaq parserCtx(%rip), %rdi
addq $64, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_87:
leaq parserCtx(%rip), %rdi
addq $96, %rdi
movb -97(%rbp), %dl
movb %dl, (%rdi)
leave
ret
.global .includeFile_end
.includeFile_end:
.global importFile
importFile:
pushq %rbp
movq %rsp, %rbp
subq $288, %rsp
movq %rdi, -16(%rbp)
.loc_27_92:
leaq parserCtx(%rip), %rax
addq $112, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_3764
.loc_27_93:
movq -16(%rbp), %rdi
call includeFile
.loc_27_94:
leave
ret
.IF_NOT_3764:
.loc_27_97:
leaq parserCtx(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, -208(%rbp)
movb $0, -209(%rbp)
movq $0, -224(%rbp)
movq -208(%rbp), %rax
addq $8, %rax
movq -224(%rbp), %rdx
cmpq (%rax), %rdx
jnb .FOR_NOT_3768
movb %al, -225(%rbp)
.FOR_LOOP_START_3768:
movq -208(%rbp), %rax
movq -224(%rbp), %rbx
salq $3, %rbx
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -16(%rbp), %rdi
movq -240(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3772
movb $1, -209(%rbp)
jmp .FOR_NOT_3768
.IF_NOT_3772:
addq $1, -224(%rbp)
movq -208(%rbp), %rax
addq $8, %rax
movq -224(%rbp), %rdx
cmpq (%rax), %rdx
jb .FOR_LOOP_START_3768
.FOR_NOT_3768:
cmpb $0, -209(%rbp)
je .IF_NOT_3773
.loc_27_98:
leave
ret
.IF_NOT_3773:
.loc_27_101:
leaq parserCtx(%rip), %rdi
addq $32, %rdi
movq (%rdi), %rax
movq %rax, -208(%rbp)
leaq parserCtx(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_arrayLength
movq %rax, -224(%rbp)
movq -208(%rbp), %rdi
movq -224(%rbp), %rsi
call __Bah_realocate_arr
movq -208(%rbp), %rdi
movq -224(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_104:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
.loc_27_105:
leaq parserCtx(%rip), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -48(%rbp)
.loc_27_106:
leaq gen(%rip), %rax
addq $176, %rax
movq (%rax), %rdx
movq %rdx, -64(%rbp)
.loc_27_107:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %dl
movb %dl, -65(%rbp)
.loc_27_108:
leaq parserCtx(%rip), %rax
addq $104, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
.loc_27_109:
movb isImportFile(%rip), %dl
movb %dl, -81(%rbp)
.loc_27_111:
pxor %xmm0, %xmm0
vmovdqu %xmm0, -112(%rbp)
.loc_27_112:
leaq -112(%rbp), %rdi
movq -16(%rbp), %rsi
leaq .VAR_729(%rip), %rdx
call fileStream.open
.loc_27_113:
leaq -112(%rbp), %rdi
call fileStream.readContent
movq %rax, -128(%rbp)
.loc_27_114:
leaq -112(%rbp), %rdi
call fileStream.close
.loc_27_116:
leaq parserCtx(%rip), %rdi
addq $72, %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_117:
leaq parserCtx(%rip), %rdi
addq $64, %rdi
movq -128(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_118:
leaq parserCtx(%rip), %rdi
addq $96, %rdi
movb $1, (%rdi)
.loc_27_119:
movq $40, %rdi
call memoryAlloc
movq %rax, -144(%rbp)
movq $8, 24(%rax)
leaq parserCtx(%rip), %rdi
addq $104, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_120:
movb $1, isImportFile(%rip)
.loc_27_122:
movq -128(%rbp), %rdi
call lexer
movq %rax, -160(%rbp)
.loc_27_123:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rax
leaq gen(%rip), %rdi
movq %rax, %rsi
call asmContext.generateFileLocation
.loc_27_124:
movq -160(%rbp), %rdi
call __bah_arrayLength
movq -160(%rbp), %rdi
movq $0, %rsi
movq %rax, %rdx
call parseLines
.loc_27_126:
movq -16(%rbp), %rdi
call getCacheFile
movq %rax, -176(%rbp)
.loc_27_127:
leaq .VAR_394(%rip), %rax
movq %rax, -208(%rbp)
leaq .VAR_806(%rip), %rax
movq %rax, -224(%rbp)
movq -16(%rbp), %rdi
call pathToVarName
movq %rax, -240(%rbp)
movl $5, %edi
movq -208(%rbp), %rbx
addl (%rbx), %edi
movq -224(%rbp), %rbx
addl (%rbx), %edi
movq -240(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -256(%rbp)
call memoryAllocSTR_NZ
subq $5, -256(%rbp)
movq -256(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -272(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -208(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -256(%rbp)
movq %rdx, -288(%rbp)
call memcpy
movq -288(%rbp), %rdx
movq -256(%rbp), %rdi
addq %rdx, %rdi
movq -224(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -256(%rbp)
movq %rdx, -288(%rbp)
call memcpy
movq -288(%rbp), %rdx
movq -256(%rbp), %rdi
addq %rdx, %rdi
movq -240(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -256(%rbp)
movq %rdx, -288(%rbp)
call memcpy
movq -272(%rbp), %rdx
movq %rdx, -192(%rbp)
.loc_27_129:
movb isObjectFile(%rip), %bl
movb %bl, -193(%rbp)
movb -193(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_3787
movq -176(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_OR_3790
movq -176(%rbp), %rdi
call isValidCacheFile
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_OR_3790_NOT
.BOOL_OR_3790:
movb $1, %al
jmp .BOOL_OR_3790_END
.BOOL_OR_3790_NOT:
movb $0, %al
.BOOL_OR_3790_END:
cmpb $0, %al
je .BOOL_AND_3787
movb $1, %al
jmp .BOOL_AND_3787_END
.BOOL_AND_3787:
movb $0, %al
.BOOL_AND_3787_END:
cmpb $0, %al
je .IF_NOT_3794
.loc_27_130:
leaq parserCtx(%rip), %rax
addq $88, %rax
movq %rax, %rdx
addq $1, (%rdx)
.loc_27_131:
movq $32, %rdi
call memoryAlloc
movq %rax, -208(%rbp)
movq -208(%rbp), %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
movq -208(%rbp), %rdi
addq $8, %rdi
movq -192(%rbp), %rdx
movq %rdx, (%rdi)
leaq parserCtx(%rip), %rax
addq $104, %rax
movq -208(%rbp), %rdi
addq $16, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -208(%rbp), %rdi
addq $24, %rdi
movq -176(%rbp), %rdx
movq %rdx, (%rdi)
movq $0, %rdi
movq $0, %rsi
leaq .Bah_async_28_131, %rdx
movq -208(%rbp), %rcx
call GC_thread_create
.IF_NOT_3794:
.loc_27_134:
leaq .VAR_810(%rip), %rax
movq %rax, -208(%rbp)
movl $5, %edi
movq -192(%rbp), %rbx
addl (%rbx), %edi
movq -208(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -224(%rbp)
call memoryAllocSTR_NZ
subq $5, -224(%rbp)
movq -224(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -240(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -192(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -208(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
leaq parserCtx(%rip), %rdi
addq $48, %rdi
movq (%rdi), %rax
movq %rax, -272(%rbp)
leaq parserCtx(%rip), %rax
addq $48, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_arrayLength
movq %rax, -288(%rbp)
movq -272(%rbp), %rdi
movq -288(%rbp), %rsi
call __Bah_realocate_arr
movq -272(%rbp), %rdi
movq -288(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -240(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_136:
leaq gen(%rip), %rdi
addq $176, %rdi
movq -64(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_137:
leaq parserCtx(%rip), %rdi
addq $72, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_138:
leaq parserCtx(%rip), %rdi
addq $64, %rdi
movq -48(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_139:
leaq parserCtx(%rip), %rdi
addq $96, %rdi
movb -65(%rbp), %dl
movb %dl, (%rdi)
.loc_27_140:
leaq parserCtx(%rip), %rdi
addq $104, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_141:
movb -81(%rbp), %dl
movb %dl, isImportFile(%rip)
leave
ret
.global .importFile_end
.importFile_end:
.global consumeType
consumeType:
pushq %rbp
movq %rsp, %rbp
subq $272, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
movb %cl, -49(%rbp)
.loc_27_145:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_3810
.loc_27_146:
movq $0, -80(%rbp)
movq -32(%rbp), %rdx
movq %rdx, -72(%rbp)
movq -80(%rbp), %rax
movq -72(%rbp), %rdx
leave
ret
.IF_NOT_3810:
.loc_27_149:
movq $67, %rdi
call memoryAlloc
movq %rax, -64(%rbp)
movq -64(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
.loc_27_151:
movq -32(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_153:
cmpb $1, -49(%rbp)
je .BOOL_OR_3811
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_3813(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_3811_NOT
.BOOL_OR_3811:
movb $1, %al
jmp .BOOL_OR_3811_END
.BOOL_OR_3811_NOT:
movb $0, %al
.BOOL_OR_3811_END:
cmpb $0, %al
je .IF_NOT_3814
.loc_27_155:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $9, (%rdi)
.loc_27_156:
movq -64(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
.loc_27_157:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
.loc_27_159:
movb -49(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_3816
.loc_27_160:
addq $1, -80(%rbp)
.IF_NOT_3816:
.loc_27_163:
movq -80(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
jb .IF_NOT_3819
.loc_27_164:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3821(%rip), %rsi
call throwError
.IF_NOT_3819:
.loc_27_166:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_3825
.loc_27_167:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3827(%rip), %rsi
call throwError
.IF_NOT_3825:
.loc_27_170:
addq $1, -80(%rbp)
.loc_27_171:
movq -64(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_172:
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_3828
movb %al, %r11b
.FOR_LOOP_START_3828:
.loc_27_173:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3833
.loc_27_174:
jmp .FOR_NOT_3828
.IF_NOT_3833:
.loc_27_177:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
je .IF_NOT_3836
.loc_27_178:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3838(%rip), %rsi
call throwError
.IF_NOT_3836:
.loc_27_181:
leaq .VAR_388(%rip), %rdx
movq %rdx, -112(%rbp)
.loc_27_183:
cmpb $0, -49(%rbp)
je .IF_NOT_3840
.loc_27_184:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rdx
movq %rdx, -112(%rbp)
.loc_27_186:
addq $1, -80(%rbp)
.loc_27_188:
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_3842
.loc_27_189:
movq -80(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3844(%rip), %rsi
call throwError
.IF_NOT_3842:
.IF_NOT_3840:
.loc_27_194:
movq -16(%rbp), %rdi
movq -80(%rbp), %rsi
movq -48(%rbp), %rdx
movq $0, %rcx
call consumeType
movq %rax, -128(%rbp)
movq %rdx, -120(%rbp)
.loc_27_197:
movq -128(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_3846
.loc_27_198:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3848(%rip), %rsi
call throwError
.IF_NOT_3846:
.loc_27_200:
pxor %xmm0, %xmm0
movq %xmm0, -144(%rbp)
.loc_27_202:
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_OR_3849
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $11, %rdx
jne .BOOL_OR_3849_NOT
.BOOL_OR_3849:
movb $1, %al
jmp .BOOL_OR_3849_END
.BOOL_OR_3849_NOT:
movb $0, %al
.BOOL_OR_3849_END:
cmpb $0, %al
je .IF_NOT_3856
.loc_27_203:
movq $67, %rdi
call memoryAlloc
movq %rax, -160(%rbp)
movq -160(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -160(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_204:
movq -128(%rbp), %rdx
movq %rdx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -240(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -208(%rbp)
addq $32, %rax
movw (%rax), %bx
movw %bx, -176(%rbp)
addq $2, %rax
movb (%rax), %bl
movb %bl, -174(%rbp)
movq -144(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movw -176(%rbp), %bx
movw %bx, (%rdi)
addq $2, %rdi
movb -174(%rbp), %bl
movb %bl, (%rdi)
jmp .ELSE_NOT_3857
.IF_NOT_3856:
.loc_27_205:
.loc_27_206:
movq -128(%rbp), %rdx
movq %rdx, -144(%rbp)
.ELSE_NOT_3857:
.loc_27_209:
movq -144(%rbp), %rdi
movq -112(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_212:
movq -120(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_214:
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_3859
.loc_27_215:
movq -80(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3861(%rip), %rsi
call throwError
.IF_NOT_3859:
.loc_27_218:
movq -96(%rbp), %rdx
cmpq -64(%rbp), %rdx
jne .IF_NOT_3863
.loc_27_219:
movq -96(%rbp), %rdi
addq $24, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_3864
.IF_NOT_3863:
.loc_27_220:
.loc_27_221:
movq -96(%rbp), %rdi
addq $32, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_3864:
.loc_27_223:
movq -144(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_225:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_3868
.loc_27_226:
jmp .FOR_NOT_3828
.IF_NOT_3868:
addq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_3828
.FOR_NOT_3828:
.loc_27_230:
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_3870
.loc_27_231:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3872(%rip), %rsi
call throwError
.IF_NOT_3870:
.loc_27_234:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_3876
.loc_27_235:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3878(%rip), %rsi
call throwError
.IF_NOT_3876:
.loc_27_237:
addq $1, -80(%rbp)
.loc_27_239:
movq -16(%rbp), %rdi
movq -80(%rbp), %rsi
movq -48(%rbp), %rdx
movq $0, %rcx
call consumeType
movq %rax, -112(%rbp)
movq %rdx, -104(%rbp)
.loc_27_240:
movq -112(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_3880
.loc_27_241:
movq -64(%rbp), %rdi
addq $40, %rdi
movq -112(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_242:
movq -104(%rbp), %rdx
movq %rdx, -80(%rbp)
.IF_NOT_3880:
jmp .ELSE_NOT_3920
.IF_NOT_3814:
.loc_27_245:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_3881
movq -80(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_3881
movb $1, %al
jmp .BOOL_AND_3881_END
.BOOL_AND_3881:
movb $0, %al
.BOOL_AND_3881_END:
cmpb $0, %al
je .ELSE_NOT_3886
.loc_27_246:
movq -80(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_1038(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3889
.loc_27_248:
movq -80(%rbp), %rbx
addq $2, %rbx
movq %rbx, -80(%rbp)
.loc_27_249:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $6, (%rdi)
.loc_27_250:
movq -64(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
.loc_27_251:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
.loc_27_252:
movq -16(%rbp), %rdi
movq -80(%rbp), %rsi
movq -48(%rbp), %rdx
movq $0, %rcx
call consumeType
movq %rax, -96(%rbp)
movq %rdx, -88(%rbp)
.loc_27_253:
movq -96(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_3891
.loc_27_254:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3893(%rip), %rsi
call throwError
.IF_NOT_3891:
.loc_27_256:
movq -88(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_257:
movq -64(%rbp), %rdi
addq $24, %rdi
movq -96(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_3894
.IF_NOT_3889:
.loc_27_258:
.loc_27_261:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $13, (%rdi)
.loc_27_263:
movq -64(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_265:
addq $1, -80(%rbp)
.loc_27_266:
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_3895
movb %al, %r11b
.FOR_LOOP_START_3895:
.loc_27_267:
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -80(%rbp), %rsi
movq %rbx, %rdx
movq $0, %rcx
call consumeType
movq %rax, -112(%rbp)
movq %rdx, -104(%rbp)
.loc_27_269:
movq -112(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_3900
.loc_27_270:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3902(%rip), %rsi
call throwError
.IF_NOT_3900:
.loc_27_273:
movq -112(%rbp), %rdx
movq %rdx, -128(%rbp)
.loc_27_274:
movq $67, %rdi
call memoryAlloc
movq %rax, -144(%rbp)
movq -144(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -144(%rbp), %rdx
movq %rdx, -112(%rbp)
.loc_27_275:
movq -128(%rbp), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -224(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -192(%rbp)
addq $32, %rax
movw (%rax), %bx
movw %bx, -160(%rbp)
addq $2, %rax
movb (%rax), %bl
movb %bl, -158(%rbp)
movq -112(%rbp), %rdi
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -192(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movw -160(%rbp), %bx
movw %bx, (%rdi)
addq $2, %rdi
movb -158(%rbp), %bl
movb %bl, (%rdi)
.loc_27_276:
movq -112(%rbp), %rdi
addq $32, %rdi
movq $0, (%rdi)
.loc_27_278:
movq -96(%rbp), %rdx
cmpq -64(%rbp), %rdx
jne .IF_NOT_3904
.loc_27_279:
movq -96(%rbp), %rdi
addq $24, %rdi
movq -112(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_3905
.IF_NOT_3904:
.loc_27_280:
.loc_27_281:
movq -96(%rbp), %rdi
addq $32, %rdi
movq -112(%rbp), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_3905:
.loc_27_283:
movq -64(%rbp), %rax
addq $8, %rax
movq -112(%rbp), %rdi
addq $16, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_284:
movq -64(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq -112(%rbp), %rax
addq $8, %rax
movq %r11, %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq -64(%rbp), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_27_287:
movq -112(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_289:
movq -104(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_291:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_3913
.loc_27_292:
jmp .FOR_NOT_3895
.IF_NOT_3913:
addq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_3895
.FOR_NOT_3895:
.loc_27_296:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_1038(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_3917
.loc_27_297:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3919(%rip), %rsi
call throwError
.IF_NOT_3917:
.loc_27_300:
addq $1, -80(%rbp)
.ELSE_NOT_3894:
jmp .ELSE_NOT_3920
.ELSE_NOT_3886:
.loc_27_302:
.loc_27_303:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
jne .IF_NOT_3923
.loc_27_304:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_907(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3926
.loc_27_305:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $3, (%rdi)
.loc_27_306:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
jmp .ELSE_NOT_3963
.IF_NOT_3926:
.loc_27_307:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_3928(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3929
.loc_27_308:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $3, (%rdi)
.loc_27_309:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $4, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3929:
.loc_27_310:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_3931(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3932
.loc_27_311:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $1, (%rdi)
.loc_27_312:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $2, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3932:
.loc_27_313:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_3934(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3935
.loc_27_314:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $1, (%rdi)
.loc_27_315:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $4, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3935:
.loc_27_316:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_789(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3938
.loc_27_317:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $1, (%rdi)
.loc_27_318:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3938:
.loc_27_319:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_884(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_3939_END
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_3943(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_3939_NOT
.BOOL_OR_3939:
movb $1, %al
jmp .BOOL_OR_3939_END
.BOOL_OR_3939_NOT:
movb $0, %al
.BOOL_OR_3939_END:
cmpb $0, %al
je .ELSE_NOT_3944
.loc_27_320:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
.loc_27_321:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $1, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3944:
.loc_27_322:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_3946(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3947
.loc_27_323:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
.loc_27_324:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $2, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3947:
.loc_27_325:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_3949(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3950
.loc_27_326:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
.loc_27_327:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $4, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3950:
.loc_27_328:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_889(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3953
.loc_27_329:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
.loc_27_330:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3953:
.loc_27_331:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_787(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3956
.loc_27_332:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $4, (%rdi)
.loc_27_333:
movq -64(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
.loc_27_334:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3956:
.loc_27_335:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_857(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3959
.loc_27_336:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $0, (%rdi)
.loc_27_337:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $1, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3959:
.loc_27_338:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_965(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_3962
.loc_27_339:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $10, (%rdi)
.loc_27_340:
movq -64(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
.loc_27_341:
movq -64(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
jmp .ELSE_NOT_3963
.ELSE_NOT_3962:
.loc_27_342:
.loc_27_343:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
leaq parserCtx(%rip), %rdi
movq %rax, %rsi
call parserContext.findType
movq %rax, -64(%rbp)
.loc_27_344:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_3966
.loc_27_345:
movq $0, -96(%rbp)
movq -80(%rbp), %rdx
movq %rdx, -88(%rbp)
movq -96(%rbp), %rax
movq -88(%rbp), %rdx
leave
ret
.IF_NOT_3966:
.ELSE_NOT_3963:
.loc_27_349:
addq $1, -80(%rbp)
.loc_27_350:
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_3967
movb %al, %r11b
.FOR_LOOP_START_3967:
.loc_27_351:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_3973
.loc_27_352:
jmp .FOR_NOT_3967
.IF_NOT_3973:
.loc_27_354:
movq -64(%rbp), %rdi
call bahType.getPtr
movq %rax, -64(%rbp)
addq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_3967
.FOR_NOT_3967:
jmp .ELSE_NOT_3992
.IF_NOT_3923:
.loc_27_356:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $6, %rdx
jne .ELSE_NOT_3976
.loc_27_357:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_3978(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3979
.loc_27_358:
movq -64(%rbp), %rdi
addq $64, %rdi
movb $12, (%rdi)
.loc_27_359:
movq -80(%rbp), %rbx
addq $2, %rbx
movq %rbx, -256(%rbp)
movq -256(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_OR_3980
movq -80(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_1400(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_OR_3980
movq -80(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .BOOL_OR_3980_NOT
.BOOL_OR_3980:
movb $1, %al
jmp .BOOL_OR_3980_END
.BOOL_OR_3980_NOT:
movb $0, %al
.BOOL_OR_3980_END:
cmpb $0, %al
je .IF_NOT_3988
.loc_27_360:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3990(%rip), %rsi
call throwError
.IF_NOT_3988:
.loc_27_362:
movq -80(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, %rdi
call strToInt
movq -64(%rbp), %rdi
addq $8, %rdi
movq %rax, (%rdi)
.loc_27_363:
movq -80(%rbp), %rbx
addq $3, %rbx
movq %rbx, -80(%rbp)
.IF_NOT_3979:
jmp .ELSE_NOT_3992
.ELSE_NOT_3976:
.loc_27_366:
.loc_27_368:
movq $0, -96(%rbp)
movq -80(%rbp), %rdx
movq %rdx, -88(%rbp)
movq -96(%rbp), %rax
movq -88(%rbp), %rdx
leave
ret
.ELSE_NOT_3992:
.ELSE_NOT_3920:
.loc_27_372:
movq -64(%rbp), %rdx
movq %rdx, -96(%rbp)
movq -80(%rbp), %rdx
movq %rdx, -88(%rbp)
movq -96(%rbp), %rax
movq -88(%rbp), %rdx
leave
ret
.global .consumeType_end
.consumeType_end:
.global consumeLeftValue
consumeLeftValue:
pushq %rbp
movq %rsp, %rbp
subq $528, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
movq %rcx, -64(%rbp)
.loc_27_377:
movq -48(%rbp), %rdx
cmpq -64(%rbp), %rdx
jne .IF_NOT_3994
.loc_27_378:
movq $0, -96(%rbp)
movq -48(%rbp), %rdx
movq %rdx, -88(%rbp)
movq $0, -80(%rbp)
movq -16(%rbp), %rdi
vmovdqu -96(%rbp), %xmm0
vmovdqu %xmm0, (%rdi)
addq $16, %rdi
movb -80(%rbp), %bl
movb %bl, (%rdi)
leave
ret
.IF_NOT_3994:
.loc_27_383:
pxor %xmm0, %xmm0
movq %xmm0, -80(%rbp)
.loc_27_385:
movq -48(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -128(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -96(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -88(%rbp)
.loc_27_387:
movq -128(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_3996
.loc_27_388:
movq -48(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -64(%rbp), %rdx
jne .IF_NOT_3999
.loc_27_389:
leaq -128(%rbp), %rdi
leaq .VAR_4000(%rip), %rsi
call throwError
.IF_NOT_3999:
.loc_27_392:
movq -48(%rbp), %rbx
addq $1, %rbx
leaq -160(%rbp), %rdi
movq -32(%rbp), %rsi
movq %rbx, %rdx
movq -64(%rbp), %rcx
call consumeLeftValue
.loc_27_393:
movq -160(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4003
.loc_27_394:
movq -48(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4005(%rip), %rsi
call throwError
.IF_NOT_4003:
.loc_27_397:
movq -152(%rbp), %rdx
movq %rdx, -176(%rbp)
.loc_27_398:
movq -160(%rbp), %rdx
movq %rdx, -192(%rbp)
.loc_27_400:
cmpb $0, -144(%rbp)
je .IF_NOT_4006
.loc_27_401:
movq -192(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_4008(%rip), %rsi
call throwError
.IF_NOT_4006:
.loc_27_404:
movq -192(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4013
.loc_27_405:
movq -192(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_4015(%rip), %rsi
call throwError
.IF_NOT_4013:
.loc_27_409:
movq $95, %rdi
call memoryAlloc
movq %rax, -208(%rbp)
movq -208(%rbp), %rdi
addq $93, %rdi
movb $1, (%rdi)
movq -208(%rbp), %rdi
addq $72, %rdi
movq -192(%rbp), %rdx
movq %rdx, (%rdi)
movq -208(%rbp), %rdi
addq $8, %rdi
vmovdqu -128(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -96(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -88(%rbp), %bl
movb %bl, (%rdi)
movq -192(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq -208(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_416:
movq -208(%rbp), %rdx
movq %rdx, -240(%rbp)
movq -176(%rbp), %rdx
movq %rdx, -232(%rbp)
movq $0, -224(%rbp)
movq -16(%rbp), %rdi
vmovdqu -240(%rbp), %xmm0
vmovdqu %xmm0, (%rdi)
addq $16, %rdi
movb -224(%rbp), %bl
movb %bl, (%rdi)
leave
ret
.IF_NOT_3996:
.loc_27_419:
movq -120(%rbp), %rdx
cmpq $2, %rdx
jne .IF_NOT_4020
.loc_27_420:
leaq parserCtx(%rip), %rdi
movq -128(%rbp), %rsi
call parserContext.findVar
movq %rax, -80(%rbp)
.loc_27_421:
movq -80(%rbp), %rdx
cmpq $0, %rdx
sete %al
movb %al, %dl
movb %dl, -129(%rbp)
.loc_27_422:
cmpb $0, -129(%rbp)
je .IF_NOT_4022
.loc_27_423:
movq $95, %rdi
call memoryAlloc
movq %rax, -144(%rbp)
movq -144(%rbp), %rdi
addq $88, %rdi
movb $1, (%rdi)
movq -144(%rbp), %rdi
addq $8, %rdi
vmovdqu -128(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -96(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -88(%rbp), %bl
movb %bl, (%rdi)
.loc_27_427:
movq -144(%rbp), %rdx
movq %rdx, -176(%rbp)
movq -48(%rbp), %rbx
addq $1, %rbx
movq %rbx, -168(%rbp)
movq $1, -160(%rbp)
movq -16(%rbp), %rdi
vmovdqu -176(%rbp), %xmm0
vmovdqu %xmm0, (%rdi)
addq $16, %rdi
movb -160(%rbp), %bl
movb %bl, (%rdi)
leave
ret
.IF_NOT_4022:
.loc_27_430:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_4024
movq -80(%rbp), %rax
addq $16, %rax
movq %rax, -448(%rbp)
movq -448(%rbp), %rax
movq (%rax), %rax
movq %rax, -464(%rbp)
movq -464(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_AND_4024
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -480(%rbp)
movq -480(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -496(%rbp)
movq -496(%rbp), %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.isFlagSet
cmpb $0, %al
je .BOOL_AND_4024
movb $1, %al
jmp .BOOL_AND_4024_END
.BOOL_AND_4024:
movb $0, %al
.BOOL_AND_4024_END:
cmpb $0, %al
je .IF_NOT_4032
.loc_27_431:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.toggleFlag
.IF_NOT_4032:
.IF_NOT_4020:
.loc_27_435:
movq -80(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4036
.loc_27_436:
movq $0, -160(%rbp)
movq -48(%rbp), %rbx
addq $1, %rbx
movq %rbx, -152(%rbp)
movq $0, -144(%rbp)
movq -16(%rbp), %rdi
vmovdqu -160(%rbp), %xmm0
vmovdqu %xmm0, (%rdi)
addq $16, %rdi
movb -144(%rbp), %bl
movb %bl, (%rdi)
leave
ret
.IF_NOT_4036:
.loc_27_439:
movq -80(%rbp), %rax
addq $78, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_4038
.loc_27_440:
leaq -128(%rbp), %rdi
leaq .VAR_4039(%rip), %rsi
call throwError
.IF_NOT_4038:
.loc_27_443:
movq $95, %rdi
call memoryAlloc
movq %rax, -144(%rbp)
movq -144(%rbp), %rdi
addq $8, %rdi
movq -48(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -144(%rbp), %rdi
addq $88, %rdi
movb $1, (%rdi)
movq -144(%rbp), %rdi
addq $64, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
movq -80(%rbp), %rax
addq $8, %rax
movq -144(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_450:
movq -48(%rbp), %rbx
addq $1, %rbx
movq %rbx, -160(%rbp)
.loc_27_451:
.FOR_LOOP_START_4042:
movq -160(%rbp), %rdx
cmpq -64(%rbp), %rdx
jnb .FOR_NOT_4042
movb %al, %r11b
.loc_27_452:
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rdi
leaq .VAR_1123(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4046
.loc_27_453:
movq -144(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_4048
movq -144(%rbp), %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rax
movb (%rax), %al
movb %al, -433(%rbp)
movb -433(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_AND_4048
movb $1, %al
jmp .BOOL_AND_4048_END
.BOOL_AND_4048:
movb $0, %al
.BOOL_AND_4048_END:
cmpb $1, %al
je .BOOL_OR_4047_END
movq -144(%rbp), %rax
movq %rax, -448(%rbp)
movq -448(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -464(%rbp)
movq -464(%rbp), %rax
movb (%rax), %al
movb %al, -465(%rbp)
movb -465(%rbp), %dl
movsbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_AND_4057
movq -144(%rbp), %rax
movq %rax, -480(%rbp)
movq -480(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -496(%rbp)
movq -496(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -512(%rbp)
movq -512(%rbp), %rax
movb (%rax), %al
movb %al, -513(%rbp)
movb -513(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_AND_4057
movb $1, %al
jmp .BOOL_AND_4057_END
.BOOL_AND_4057:
movb $0, %al
.BOOL_AND_4057_END:
cmpb $1, %al
jne .BOOL_OR_4047_NOT
.BOOL_OR_4047:
movb $1, %al
jmp .BOOL_OR_4047_END
.BOOL_OR_4047_NOT:
movb $0, %al
.BOOL_OR_4047_END:
cmpb $0, %al
je .IF_NOT_4067
.loc_27_454:
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4069(%rip), %rsi
call throwError
.IF_NOT_4067:
.loc_27_457:
movq -144(%rbp), %rdx
movq %rdx, -176(%rbp)
.loc_27_458:
movq $95, %rdi
call memoryAlloc
movq %rax, -192(%rbp)
movq -192(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -240(%rbp)
movq %xmm0, -208(%rbp)
xorb %al, %al
movb %al, -200(%rbp)
movq $1, -208(%rbp)
movq $1, -216(%rbp)
movq $0, -224(%rbp)
movq $-1, -232(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -240(%rbp)
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -208(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -200(%rbp), %bl
movb %bl, (%rdi)
movq -192(%rbp), %rdi
addq $72, %rdi
movq -176(%rbp), %rdx
movq %rdx, (%rdi)
movq -192(%rbp), %rdi
addq $90, %rdi
movb $1, (%rdi)
movq -192(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_462:
addq $1, -160(%rbp)
.loc_27_463:
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
je .IF_NOT_4074
.loc_27_464:
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4076(%rip), %rsi
call throwError
.IF_NOT_4074:
.loc_27_466:
pxor %xmm0, %xmm0
movq %xmm0, -256(%rbp)
.loc_27_467:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_4080
.loc_27_468:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rax
movq (%rax), %rdx
movq %rdx, -256(%rbp)
jmp .ELSE_NOT_4086
.IF_NOT_4080:
.loc_27_469:
.loc_27_470:
movq -144(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -256(%rbp)
.ELSE_NOT_4086:
.loc_27_473:
movq -256(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_4091
movb %al, %r11b
.FOR_LOOP_START_4091:
.loc_27_474:
movq -256(%rbp), %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rax
movq (%rax), %rax
movq %rax, -448(%rbp)
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -464(%rbp)
movq -448(%rbp), %rdi
movq -464(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4098
.loc_27_475:
jmp .FOR_NOT_4091
.IF_NOT_4098:
movq -256(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -256(%rbp)
movq -256(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_4091
.FOR_NOT_4091:
.loc_27_479:
movq -256(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4100
.loc_27_480:
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4102(%rip), %rsi
call throwError
.IF_NOT_4100:
.loc_27_483:
movq $95, %rdi
call memoryAlloc
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
addq $8, %rdi
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -272(%rbp), %rdi
movq -256(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_487:
movq -144(%rbp), %rdi
movq -256(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_489:
movq -144(%rbp), %rdi
addq $80, %rdi
movq -272(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4198
.IF_NOT_4046:
.loc_27_490:
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_4106
.loc_27_491:
movq -160(%rbp), %rbx
addq $2, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -64(%rbp), %rdx
jb .IF_NOT_4109
.loc_27_492:
movq -48(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4111(%rip), %rsi
call throwError
.IF_NOT_4109:
.loc_27_494:
movq -160(%rbp), %rdx
movq %rdx, -176(%rbp)
.loc_27_495:
movq $1, -192(%rbp)
.loc_27_496:
movq -64(%rbp), %rbx
addq $-1, %rbx
movq %rbx, -208(%rbp)
.loc_27_497:
addq $1, -160(%rbp)
.loc_27_498:
.FOR_LOOP_START_4112:
movq -160(%rbp), %rdx
cmpq -64(%rbp), %rdx
jnb .FOR_NOT_4112
movb %al, %r11b
.loc_27_499:
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -128(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -96(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -88(%rbp)
.loc_27_500:
movq -120(%rbp), %rdx
cmpq $3, %rdx
je .IF_NOT_4115
.loc_27_501:
addq $1, -160(%rbp)
jmp .FOR_LOOP_START_4112
.IF_NOT_4115:
.loc_27_504:
movq -128(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $40, %dl
je .BOOL_OR_4116
movq -128(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $91, %dl
je .BOOL_OR_4116
movq -128(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
cmpb $123, %dl
jne .BOOL_OR_4116_NOT
.BOOL_OR_4116:
movb $1, %al
jmp .BOOL_OR_4116_END
.BOOL_OR_4116_NOT:
movb $0, %al
.BOOL_OR_4116_END:
cmpb $0, %al
je .IF_NOT_4123
.loc_27_505:
addq $1, -192(%rbp)
jmp .ELSE_NOT_4124
.IF_NOT_4123:
.loc_27_506:
.loc_27_507:
movq -192(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4126
.loc_27_508:
leaq -128(%rbp), %rdi
leaq .VAR_4127(%rip), %rsi
call throwError
.IF_NOT_4126:
.loc_27_510:
subq $1, -192(%rbp)
.loc_27_511:
movq -192(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4129
.loc_27_512:
movq -160(%rbp), %rdx
movq %rdx, -208(%rbp)
.loc_27_513:
jmp .FOR_NOT_4112
.IF_NOT_4129:
.loc_27_515:
addq $1, -160(%rbp)
jmp .FOR_LOOP_START_4112
.ELSE_NOT_4124:
addq $1, -160(%rbp)
jmp .FOR_LOOP_START_4112
.FOR_NOT_4112:
.loc_27_520:
movq -176(%rbp), %rbx
addq $1, %rbx
movq %rbx, -432(%rbp)
movq -208(%rbp), %rbx
addq $1, %rbx
movq -32(%rbp), %rdi
movq -432(%rbp), %rsi
movq %rbx, %rdx
movq -176(%rbp), %rcx
movq $0, %r8
call consumeValue
movq %rax, -224(%rbp)
movq %rdx, -216(%rbp)
.loc_27_522:
movq -224(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4133
.loc_27_523:
movq -48(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4135(%rip), %rsi
call throwError
.IF_NOT_4133:
.loc_27_526:
movq -144(%rbp), %rdx
movq %rdx, -240(%rbp)
.loc_27_528:
movq -240(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .IF_NOT_4140
.loc_27_529:
movq $95, %rdi
call memoryAlloc
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -304(%rbp)
movq %xmm0, -272(%rbp)
xorb %al, %al
movb %al, -264(%rbp)
movq $1, -272(%rbp)
movq $1, -280(%rbp)
movq $0, -288(%rbp)
movq $-1, -296(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -304(%rbp)
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -272(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -264(%rbp), %bl
movb %bl, (%rdi)
movq -256(%rbp), %rdi
addq $91, %rdi
movb $1, (%rdi)
movq -256(%rbp), %rdi
addq $72, %rdi
movq -240(%rbp), %rdx
movq %rdx, (%rdi)
movq -256(%rbp), %rdi
addq $56, %rdi
movq -224(%rbp), %rdx
movq %rdx, (%rdi)
movq -256(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_534:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq $1, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
movq -144(%rbp), %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4183
.IF_NOT_4140:
.loc_27_538:
movq -240(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .ELSE_NOT_4147
.loc_27_539:
movq $95, %rdi
call memoryAlloc
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
addq $8, %rdi
movq %rdi, %r11
pxor %xmm0, %xmm0
vmovdqu %ymm0, -304(%rbp)
movq %xmm0, -272(%rbp)
xorb %al, %al
movb %al, -264(%rbp)
movq $1, -272(%rbp)
movq $1, -280(%rbp)
movq $0, -288(%rbp)
movq $-1, -296(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -304(%rbp)
movq %r11, %rdi
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -272(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -264(%rbp), %bl
movb %bl, (%rdi)
movq -256(%rbp), %rdi
addq $89, %rdi
movb $1, (%rdi)
movq -256(%rbp), %rdi
addq $72, %rdi
movq -240(%rbp), %rdx
movq %rdx, (%rdi)
movq -256(%rbp), %rdi
addq $56, %rdi
movq -224(%rbp), %rdx
movq %rdx, (%rdi)
movq -240(%rbp), %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r9
movq -256(%rbp), %rdi
movq %r9, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -256(%rbp), %rdx
movq %rdx, -144(%rbp)
jmp .ELSE_NOT_4183
.ELSE_NOT_4147:
.loc_27_545:
movq -240(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .ELSE_NOT_4156
.loc_27_547:
movq -224(%rbp), %rax
addq $135, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4160
.loc_27_548:
movq -176(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4162(%rip), %rsi
call throwError
.IF_NOT_4160:
.loc_27_551:
leaq -304(%rbp), %rdi
movq -224(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_27_552:
movq -304(%rbp), %rax
movl (%rax), %eax
movl -304(%rbp), %edi
movq $1, %rsi
movl %eax, %edx
call strSubstitute
movq %rax, %rdi
call strToInt
movq %rax, -320(%rbp)
.loc_27_554:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jge .IF_NOT_4166
.loc_27_555:
movq -48(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4168(%rip), %rsi
call throwError
.IF_NOT_4166:
.loc_27_558:
movq $0, -336(%rbp)
.loc_27_559:
movq -144(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
.loc_27_560:
movq -336(%rbp), %rdx
cmpq -320(%rbp), %rdx
jge .FOR_NOT_4171
movb %al, %r11b
.FOR_LOOP_START_4171:
.loc_27_561:
movq -352(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4175
.loc_27_562:
jmp .FOR_NOT_4171
.IF_NOT_4175:
.loc_27_565:
movq -352(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
addq $1, -336(%rbp)
movq -336(%rbp), %rdx
cmpq -320(%rbp), %rdx
jl .FOR_LOOP_START_4171
.FOR_NOT_4171:
.loc_27_568:
movq -352(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4178
.loc_27_569:
movq -176(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4180(%rip), %rsi
call throwError
.IF_NOT_4178:
.loc_27_572:
movq $95, %rdi
call memoryAlloc
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
addq $8, %rdi
movq %rdi, %r11
pxor %xmm0, %xmm0
vmovdqu %ymm0, -416(%rbp)
movq %xmm0, -384(%rbp)
xorb %al, %al
movb %al, -376(%rbp)
movq $1, -384(%rbp)
movq $1, -392(%rbp)
movq $0, -400(%rbp)
movq $-1, -408(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -416(%rbp)
movq %r11, %rdi
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -384(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -376(%rbp), %bl
movb %bl, (%rdi)
movq -368(%rbp), %rdi
addq $94, %rdi
movb $1, (%rdi)
movq -368(%rbp), %rdi
addq $72, %rdi
movq -240(%rbp), %rdx
movq %rdx, (%rdi)
movq -368(%rbp), %rdi
addq $56, %rdi
movq -224(%rbp), %rdx
movq %rdx, (%rdi)
movq -368(%rbp), %rdi
movq -352(%rbp), %rdx
movq %rdx, (%rdi)
movq -368(%rbp), %rdx
movq %rdx, -144(%rbp)
jmp .ELSE_NOT_4183
.ELSE_NOT_4156:
.loc_27_578:
.loc_27_579:
movq -176(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4185(%rip), %rsi
call throwError
.ELSE_NOT_4183:
.loc_27_583:
movq -240(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_4188
.loc_27_584:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_4190(%rip), %rsi
call throwError
.IF_NOT_4188:
.loc_27_587:
movq -240(%rbp), %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .IF_NOT_4195
.loc_27_588:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rdi
leaq .VAR_4197(%rip), %rsi
call throwError
.IF_NOT_4195:
jmp .ELSE_NOT_4198
.ELSE_NOT_4106:
.loc_27_592:
.loc_27_593:
jmp .FOR_NOT_4042
.ELSE_NOT_4198:
addq $1, -160(%rbp)
jmp .FOR_LOOP_START_4042
.FOR_NOT_4042:
.loc_27_599:
movq -144(%rbp), %rdx
movq %rdx, -192(%rbp)
movq -160(%rbp), %rdx
movq %rdx, -184(%rbp)
movq $0, -176(%rbp)
movq -16(%rbp), %rdi
vmovdqu -192(%rbp), %xmm0
vmovdqu %xmm0, (%rdi)
addq $16, %rdi
movb -176(%rbp), %bl
movb %bl, (%rdi)
leave
ret
.global .consumeLeftValue_end
.consumeLeftValue_end:
.global recursiveStructDeclaration
recursiveStructDeclaration:
pushq %rbp
movq %rsp, %rbp
subq $320, %rsp
movq %rdi, -16(%rbp)
.loc_27_603:
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
.loc_27_604:
movq $139, %rdi
call memoryAlloc
movq %rax, -48(%rbp)
movq -48(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -112(%rbp)
vmovdqu %xmm0, -80(%rbp)
movss %xmm0, -64(%rbp)
xorb %al, %al
movb %al, -60(%rbp)
movb %al, -59(%rbp)
movq $-1, -72(%rbp)
vmovdqu -112(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -80(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -64(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -60(%rbp), %bx
movw %bx, (%rdi)
movq -48(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -160(%rbp)
movq %xmm0, -128(%rbp)
xorb %al, %al
movb %al, -120(%rbp)
movq $1, -128(%rbp)
movq $1, -136(%rbp)
movq $0, -144(%rbp)
movq $-1, -152(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -160(%rbp)
vmovdqu -160(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -128(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -120(%rbp), %bl
movb %bl, (%rdi)
movq -48(%rbp), %rdi
addq $138, %rdi
movb $14, (%rdi)
movq -48(%rbp), %rdi
addq $56, %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_608:
.FOR_LOOP_START_4203:
movq -32(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_4203
movb %al, %r11b
.loc_27_609:
movq -32(%rbp), %rax
addq $48, %rax
movq (%rax), %rdx
movq %rdx, -176(%rbp)
.loc_27_611:
movq -176(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4208
.loc_27_612:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_4212
.loc_27_613:
movq $139, %rdi
call memoryAlloc
movq %rax, -192(%rbp)
movq -192(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -256(%rbp)
vmovdqu %xmm0, -224(%rbp)
movss %xmm0, -208(%rbp)
xorb %al, %al
movb %al, -204(%rbp)
movb %al, -203(%rbp)
movq $-1, -216(%rbp)
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -208(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -204(%rbp), %bx
movw %bx, (%rdi)
movq -192(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -304(%rbp)
movq %xmm0, -272(%rbp)
xorb %al, %al
movb %al, -264(%rbp)
movq $1, -272(%rbp)
movq $1, -280(%rbp)
movq $0, -288(%rbp)
movq $-1, -296(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -304(%rbp)
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -272(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -264(%rbp), %bl
movb %bl, (%rdi)
movq -192(%rbp), %rdi
addq $138, %rdi
movb $14, (%rdi)
movq -192(%rbp), %rdx
movq %rdx, -176(%rbp)
.loc_27_616:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $6, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq $40, (%rdi)
movq -320(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
movq -32(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq -320(%rbp), %rdi
addq $24, %rdi
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -176(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4221
.IF_NOT_4212:
.loc_27_622:
movq -32(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .ELSE_NOT_4220
.loc_27_623:
movq -32(%rbp), %rdi
call recursiveStructDeclaration
movq %rax, -176(%rbp)
jmp .ELSE_NOT_4221
.ELSE_NOT_4220:
.loc_27_624:
.loc_27_625:
movq -32(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_4203
.ELSE_NOT_4221:
.IF_NOT_4208:
.loc_27_629:
movq -48(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -192(%rbp)
.loc_27_630:
movq $139, %rdi
call memoryAlloc
movq %rax, -208(%rbp)
movq -208(%rbp), %rdi
addq $80, %rdi
movq %rdi, %r11
pxor %xmm0, %xmm0
vmovdqu %ymm0, -272(%rbp)
vmovdqu %xmm0, -240(%rbp)
movss %xmm0, -224(%rbp)
xorb %al, %al
movb %al, -220(%rbp)
movb %al, -219(%rbp)
movq $-1, -232(%rbp)
movq %r11, %rdi
vmovdqu -272(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -240(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -224(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -220(%rbp), %bx
movw %bx, (%rdi)
movq -208(%rbp), %rdi
addq $8, %rdi
movq %rdi, %r10
pxor %xmm0, %xmm0
vmovdqu %ymm0, -320(%rbp)
movq %xmm0, -288(%rbp)
xorb %al, %al
movb %al, -280(%rbp)
movq $1, -288(%rbp)
movq $1, -296(%rbp)
movq $0, -304(%rbp)
movq $-1, -312(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -320(%rbp)
movq %r10, %rdi
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -288(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -280(%rbp), %bl
movb %bl, (%rdi)
movq -208(%rbp), %rdi
addq $56, %rdi
movq -32(%rbp), %rdx
movq %rdx, (%rdi)
movq -208(%rbp), %rdi
addq $72, %rdi
movq -176(%rbp), %rdx
movq %rdx, (%rdi)
movq -208(%rbp), %rdi
addq $64, %rdi
movq -192(%rbp), %rdx
movq %rdx, (%rdi)
movq -48(%rbp), %rdi
addq $64, %rdi
movq -208(%rbp), %rdx
movq %rdx, (%rdi)
movq -32(%rbp), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rdx
movq %rdx, -32(%rbp)
jmp .FOR_LOOP_START_4203
.FOR_NOT_4203:
.loc_27_637:
movq -48(%rbp), %rax
leave
ret
.global .recursiveStructDeclaration_end
.recursiveStructDeclaration_end:
.global consumeValue
consumeValue:
pushq %rbp
movq %rsp, %rbp
subq $1120, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
movq %rcx, -64(%rbp)
movq %r8, -80(%rbp)
.loc_27_642:
movq -32(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_643:
movq $0, -112(%rbp)
.loc_27_644:
movq -32(%rbp), %rdx
movq %rdx, -128(%rbp)
.loc_27_649:
movq -64(%rbp), %rdx
cmpq $-1, %rdx
je .IF_NOT_4227
.loc_27_650:
movq $0, -144(%rbp)
.loc_27_651:
.FOR_LOOP_START_4228:
movq -32(%rbp), %rdx
cmpq -64(%rbp), %rdx
jb .FOR_NOT_4228
movb %al, %r11b
.loc_27_652:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -192(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -160(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -152(%rbp)
.loc_27_653:
movq -184(%rbp), %rdx
cmpq $3, %rdx
jne .IF_NOT_4231
.loc_27_654:
movq -192(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $40, %dl
je .BOOL_OR_4232
movq -192(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $91, %dl
je .BOOL_OR_4232
movq -192(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
cmpb $123, %dl
jne .BOOL_OR_4232_NOT
.BOOL_OR_4232:
movb $1, %al
jmp .BOOL_OR_4232_END
.BOOL_OR_4232_NOT:
movb $0, %al
.BOOL_OR_4232_END:
cmpb $0, %al
je .IF_NOT_4239
.loc_27_655:
subq $1, -144(%rbp)
.loc_27_657:
subq $1, -32(%rbp)
jmp .FOR_LOOP_START_4228
.IF_NOT_4239:
.loc_27_659:
addq $1, -144(%rbp)
.IF_NOT_4231:
.loc_27_662:
movq -144(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_AND_4240
movq -192(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4242_END
movq -192(%rbp), %rdi
leaq .VAR_4244(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_4242_NOT
.BOOL_OR_4242:
movb $1, %al
jmp .BOOL_OR_4242_END
.BOOL_OR_4242_NOT:
movb $0, %al
.BOOL_OR_4242_END:
cmpb $0, %al
je .BOOL_AND_4240
movb $1, %al
jmp .BOOL_AND_4240_END
.BOOL_AND_4240:
movb $0, %al
.BOOL_AND_4240_END:
cmpb $0, %al
je .IF_NOT_4245
.loc_27_663:
jmp .FOR_NOT_4228
.IF_NOT_4245:
subq $1, -32(%rbp)
jmp .FOR_LOOP_START_4228
.FOR_NOT_4228:
.loc_27_666:
addq $1, -32(%rbp)
.loc_27_668:
movq -32(%rbp), %rbx
addq $2, %rbx
movq %rbx, -640(%rbp)
movq -640(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_4246
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4246
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_1038(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4246
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rdx
cmpq $2, %rdx
je .BOOL_OR_4253
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4253_END
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $6, %rdx
jne .BOOL_OR_4253_NOT
.BOOL_OR_4253:
movb $1, %al
jmp .BOOL_OR_4253_END
.BOOL_OR_4253_NOT:
movb $0, %al
.BOOL_OR_4253_END:
cmpb $0, %al
je .BOOL_AND_4246
movb $1, %al
jmp .BOOL_AND_4246_END
.BOOL_AND_4246:
movb $0, %al
.BOOL_AND_4246_END:
movb %al, -145(%rbp)
.loc_27_670:
movb -145(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_4260
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $3, %rdx
jne .BOOL_AND_4260
movb $1, %al
jmp .BOOL_AND_4260_END
.BOOL_AND_4260:
movb $0, %al
.BOOL_AND_4260_END:
cmpb $0, %al
je .IF_NOT_4264
.loc_27_671:
addq $1, -32(%rbp)
.loc_27_672:
subq $1, -48(%rbp)
.IF_NOT_4264:
.loc_27_675:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -176(%rbp)
movq %rdx, -168(%rbp)
.loc_27_677:
cmpb $0, -145(%rbp)
je .IF_NOT_4265
.loc_27_678:
subq $1, -168(%rbp)
jmp .ELSE_NOT_4268
.IF_NOT_4265:
.loc_27_679:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_4268
.loc_27_680:
addq $1, -168(%rbp)
.ELSE_NOT_4268:
.loc_27_683:
movq -176(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .IF_NOT_4272
.loc_27_684:
movq -176(%rbp), %rdi
movq $5, (%rdi)
.IF_NOT_4272:
.loc_27_687:
movq -176(%rbp), %rax
movq -168(%rbp), %rdx
leave
ret
.IF_NOT_4227:
.loc_27_690:
movq $139, %rdi
call memoryAlloc
movq %rax, -144(%rbp)
movq -144(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -208(%rbp)
vmovdqu %xmm0, -176(%rbp)
movss %xmm0, -160(%rbp)
xorb %al, %al
movb %al, -156(%rbp)
movb %al, -155(%rbp)
movq $-1, -168(%rbp)
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
movq -144(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -256(%rbp)
movq %xmm0, -224(%rbp)
xorb %al, %al
movb %al, -216(%rbp)
movq $1, -224(%rbp)
movq $1, -232(%rbp)
movq $0, -240(%rbp)
movq $-1, -248(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -256(%rbp)
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -224(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -216(%rbp), %bl
movb %bl, (%rdi)
.loc_27_691:
movb $0, -257(%rbp)
.loc_27_693:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4278
.loc_27_695:
movq $1, -272(%rbp)
.loc_27_696:
movq -48(%rbp), %rbx
addq $-1, %rbx
movq %rbx, -288(%rbp)
.loc_27_697:
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, -96(%rbp)
.FOR_LOOP_START_4279:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4279
movb %al, %r11b
.loc_27_698:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -336(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -304(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -296(%rbp)
.loc_27_699:
movq -328(%rbp), %rdx
cmpq $3, %rdx
je .IF_NOT_4282
.loc_27_700:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_4279
.IF_NOT_4282:
.loc_27_703:
movq -336(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $40, %dl
je .BOOL_OR_4283
movq -336(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $91, %dl
je .BOOL_OR_4283
movq -336(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
cmpb $123, %dl
jne .BOOL_OR_4283_NOT
.BOOL_OR_4283:
movb $1, %al
jmp .BOOL_OR_4283_END
.BOOL_OR_4283_NOT:
movb $0, %al
.BOOL_OR_4283_END:
cmpb $0, %al
je .IF_NOT_4290
.loc_27_704:
addq $1, -272(%rbp)
jmp .ELSE_NOT_4291
.IF_NOT_4290:
.loc_27_705:
.loc_27_706:
movq -272(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4293
.loc_27_707:
leaq -336(%rbp), %rdi
leaq .VAR_4127(%rip), %rsi
call throwError
.IF_NOT_4293:
.loc_27_709:
subq $1, -272(%rbp)
.loc_27_710:
movq -272(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4296
.loc_27_711:
movq -96(%rbp), %rdx
movq %rdx, -288(%rbp)
.loc_27_712:
jmp .FOR_NOT_4279
.IF_NOT_4296:
.loc_27_714:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_4279
.ELSE_NOT_4291:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_4279
.FOR_NOT_4279:
.loc_27_719:
movb $0, -289(%rbp)
.loc_27_720:
addq $1, -96(%rbp)
.loc_27_721:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4297
movb %al, %r11b
.FOR_LOOP_START_4297:
.loc_27_722:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4300_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4300_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4300_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4300_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rdi
leaq .VAR_1123(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_4300_NOT
.BOOL_OR_4300:
movb $1, %al
jmp .BOOL_OR_4300_END
.BOOL_OR_4300_NOT:
movb $0, %al
.BOOL_OR_4300_END:
cmpb $0, %al
je .IF_NOT_4311
.loc_27_723:
jmp .FOR_NOT_4297
.IF_NOT_4311:
.loc_27_725:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_4312
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1038(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_4312
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_4312
movb $1, %al
jmp .BOOL_AND_4312_END
.BOOL_AND_4312:
movb $0, %al
.BOOL_AND_4312_END:
cmpb $0, %al
je .IF_NOT_4322
.loc_27_726:
movb $1, -289(%rbp)
.loc_27_727:
jmp .FOR_NOT_4297
.IF_NOT_4322:
addq $1, -96(%rbp)
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_4297
.FOR_NOT_4297:
.loc_27_732:
movb -289(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4324
.loc_27_733:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -288(%rbp), %rdx
movq -64(%rbp), %rcx
movq $0, %r8
call consumeValue
movq %rax, -320(%rbp)
movq %rdx, -312(%rbp)
.loc_27_735:
movq -320(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .IF_NOT_4329
.loc_27_736:
movq -320(%rbp), %rdi
movq $5, (%rdi)
.IF_NOT_4329:
.loc_27_739:
movq -312(%rbp), %rbx
addq $1, %rbx
movq %rbx, -640(%rbp)
movq -640(%rbp), %rdx
cmpq -48(%rbp), %rdx
je .BOOL_OR_4330
movq -312(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_4330_NOT
.BOOL_OR_4330:
movb $1, %al
jmp .BOOL_OR_4330_END
.BOOL_OR_4330_NOT:
movb $0, %al
.BOOL_OR_4330_END:
cmpb $0, %al
je .IF_NOT_4335
.loc_27_740:
addq $1, -312(%rbp)
.loc_27_741:
movq -320(%rbp), %rax
movq -312(%rbp), %rdx
leave
ret
.IF_NOT_4335:
.loc_27_744:
movq -312(%rbp), %rdx
movq %rdx, -32(%rbp)
.loc_27_745:
movq -320(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_746:
movb $1, -257(%rbp)
.loc_27_747:
movq $5, -80(%rbp)
.IF_NOT_4324:
.IF_NOT_4278:
.loc_27_752:
movq -80(%rbp), %rdx
cmpq $5, %rdx
jne .IF_NOT_4337
.loc_27_753:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -304(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -272(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -264(%rbp)
.loc_27_756:
movb -257(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4339
.loc_27_759:
movq -296(%rbp), %rdx
cmpq $12, %rdx
jne .IF_NOT_4341
.loc_27_760:
movq -304(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %rbx
addq $-1, %rbx
movq -304(%rbp), %rdi
movq $1, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, %rdi
call lexer
movq %rax, -320(%rbp)
.loc_27_761:
movq -320(%rbp), %rdi
call __bah_arrayLength
movq -320(%rbp), %rdi
movq $0, %rsi
movq %rax, %rdx
movq $0, %rcx
call consumeType
movq %rax, -336(%rbp)
movq %rdx, -328(%rbp)
.loc_27_762:
movq -320(%rbp), %rdi
call __bah_arrayLength
cmpq -328(%rbp), %rax
jne .BOOL_OR_4346
movq -336(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_OR_4346_NOT
.BOOL_OR_4346:
movb $1, %al
jmp .BOOL_OR_4346_END
.BOOL_OR_4346_NOT:
movb $0, %al
.BOOL_OR_4346_END:
cmpb $0, %al
je .IF_NOT_4349
.loc_27_763:
leaq -304(%rbp), %rdi
leaq .VAR_4350(%rip), %rsi
call throwError
.IF_NOT_4349:
.loc_27_766:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq -64(%rbp), %rcx
movq -80(%rbp), %r8
call consumeValue
movq %rax, -352(%rbp)
movq %rdx, -344(%rbp)
.loc_27_768:
movq -352(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4353
.loc_27_769:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4355(%rip), %rsi
call throwError
.IF_NOT_4353:
.loc_27_772:
movq -336(%rbp), %rdx
movq %rdx, -368(%rbp)
.loc_27_773:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $9, (%rdi)
.loc_27_774:
movq -144(%rbp), %rdi
addq $8, %rdi
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -272(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -264(%rbp), %bl
movb %bl, (%rdi)
.loc_27_776:
movq -144(%rbp), %rdi
addq $56, %rdi
movq -336(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_777:
movq -144(%rbp), %rdi
addq $64, %rdi
movq -352(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_779:
movq -144(%rbp), %rdx
movq %rdx, -384(%rbp)
movq -344(%rbp), %rdx
movq %rdx, -376(%rbp)
movq -384(%rbp), %rax
movq -376(%rbp), %rdx
leave
ret
.IF_NOT_4341:
.loc_27_782:
movq -304(%rbp), %rdi
leaq .VAR_4357(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4356_END
movq -296(%rbp), %rdx
cmpq $2, %rdx
jne .BOOL_AND_4358
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, -640(%rbp)
movq -640(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_4358
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4358
movb $1, %al
jmp .BOOL_AND_4358_END
.BOOL_AND_4358:
movb $0, %al
.BOOL_AND_4358_END:
cmpb $1, %al
jne .BOOL_OR_4356_NOT
.BOOL_OR_4356:
movb $1, %al
jmp .BOOL_OR_4356_END
.BOOL_OR_4356_NOT:
movb $0, %al
.BOOL_OR_4356_END:
cmpb $0, %al
je .IF_NOT_4364
.loc_27_783:
pxor %xmm0, %xmm0
movq %xmm0, -320(%rbp)
.loc_27_784:
movq -304(%rbp), %rdi
leaq .VAR_4357(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4366
.loc_27_785:
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
leaq parserCtx(%rip), %rdi
movq %rax, %rsi
call parserContext.findType
movq %rax, -320(%rbp)
.loc_27_786:
addq $1, -96(%rbp)
jmp .ELSE_NOT_4368
.IF_NOT_4366:
.loc_27_787:
.loc_27_788:
leaq parserCtx(%rip), %rdi
movq -304(%rbp), %rsi
call parserContext.findType
movq %rax, -320(%rbp)
.ELSE_NOT_4368:
.loc_27_791:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4370
.loc_27_792:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4372(%rip), %rsi
call throwError
.IF_NOT_4370:
.loc_27_794:
movq -320(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -336(%rbp)
.loc_27_796:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $14, (%rdi)
.loc_27_797:
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_798:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq -144(%rbp), %rdi
addq $8, %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
.loc_27_799:
movq -144(%rbp), %rdx
movq %rdx, -352(%rbp)
.loc_27_801:
movq -96(%rbp), %rbx
addq $2, %rbx
movq %rbx, -96(%rbp)
.loc_27_802:
movq $1, -368(%rbp)
.loc_27_803:
.FOR_LOOP_START_4374:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4374
movb %al, %r11b
.loc_27_804:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4378
.loc_27_805:
addq $1, -368(%rbp)
jmp .ELSE_NOT_4381
.IF_NOT_4378:
.loc_27_806:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_4381
.loc_27_807:
subq $1, -368(%rbp)
.loc_27_808:
movq -368(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4383
.loc_27_809:
jmp .FOR_NOT_4374
.IF_NOT_4383:
.ELSE_NOT_4381:
.loc_27_815:
movq -96(%rbp), %rbx
addq $2, %rbx
movq %rbx, -640(%rbp)
movq -640(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_4384
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1400(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4384
movb $1, %al
jmp .BOOL_AND_4384_END
.BOOL_AND_4384:
movb $0, %al
.BOOL_AND_4384_END:
cmpb $0, %al
je .IF_NOT_4389
.loc_27_816:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
je .IF_NOT_4392
.loc_27_817:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4394(%rip), %rsi
call throwError
.IF_NOT_4392:
.loc_27_819:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -416(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -384(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -376(%rbp)
.loc_27_820:
movq -320(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -336(%rbp)
.loc_27_821:
movq -336(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_4397
movb %al, %r11b
.FOR_LOOP_START_4397:
.loc_27_822:
movq -336(%rbp), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
movq -416(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4403
.loc_27_823:
jmp .FOR_NOT_4397
.IF_NOT_4403:
movq -336(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -336(%rbp)
movq -336(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_4397
.FOR_NOT_4397:
.loc_27_827:
movq -336(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4405
.loc_27_828:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4407(%rip), %rsi
call throwError
.IF_NOT_4405:
.loc_27_830:
movq -96(%rbp), %rbx
addq $2, %rbx
movq %rbx, -96(%rbp)
.loc_27_831:
movq -392(%rbp), %rdx
movq %rdx, -432(%rbp)
.loc_27_832:
movq $0, -448(%rbp)
.loc_27_833:
movq -96(%rbp), %rdx
movq %rdx, -464(%rbp)
.FOR_LOOP_START_4408:
movq -464(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4408
movb %al, %r11b
.loc_27_834:
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4410_END
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4410_END
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_4410_NOT
.BOOL_OR_4410:
movb $1, %al
jmp .BOOL_OR_4410_END
.BOOL_OR_4410_NOT:
movb $0, %al
.BOOL_OR_4410_END:
cmpb $0, %al
je .IF_NOT_4417
.loc_27_835:
addq $1, -448(%rbp)
jmp .ELSE_NOT_4425
.IF_NOT_4417:
.loc_27_836:
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4418_END
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1038(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4418_END
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_4418_NOT
.BOOL_OR_4418:
movb $1, %al
jmp .BOOL_OR_4418_END
.BOOL_OR_4418_NOT:
movb $0, %al
.BOOL_OR_4418_END:
cmpb $0, %al
je .ELSE_NOT_4425
.loc_27_837:
subq $1, -448(%rbp)
.ELSE_NOT_4425:
.loc_27_840:
movq -448(%rbp), %rdx
cmpq $0, %rdx
jle .IF_NOT_4427
.loc_27_841:
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -432(%rbp)
.loc_27_842:
addq $1, -464(%rbp)
jmp .FOR_LOOP_START_4408
.IF_NOT_4427:
.loc_27_845:
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq -432(%rbp), %rdx
je .IF_NOT_4430
.loc_27_846:
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq -432(%rbp), %rdx
jne .IF_NOT_4433
.loc_27_847:
movq -464(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -432(%rbp)
.loc_27_848:
addq $1, -464(%rbp)
jmp .FOR_LOOP_START_4408
.IF_NOT_4433:
.loc_27_851:
jmp .FOR_NOT_4408
.IF_NOT_4430:
addq $1, -464(%rbp)
jmp .FOR_LOOP_START_4408
.FOR_NOT_4408:
.loc_27_855:
movq -464(%rbp), %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_4435
.loc_27_856:
subq $1, -464(%rbp)
.IF_NOT_4435:
.loc_27_859:
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq -464(%rbp), %rdx
movq -96(%rbp), %rcx
movq $0, %r8
call consumeValue
movq %rax, -480(%rbp)
movq %rdx, -472(%rbp)
.loc_27_860:
movq -480(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4437
.loc_27_861:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4439(%rip), %rsi
call throwError
.IF_NOT_4437:
.loc_27_864:
movq -472(%rbp), %rbx
subq $1, %rbx
movq %rbx, -96(%rbp)
.loc_27_865:
movq -464(%rbp), %rbx
addq $-1, %rbx
cmpq %rbx, -96(%rbp)
jnb .IF_NOT_4441
.loc_27_866:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4443(%rip), %rsi
call throwError
.IF_NOT_4441:
.loc_27_868:
movq -480(%rbp), %rdx
movq %rdx, -496(%rbp)
.loc_27_869:
movq -496(%rbp), %rax
addq $56, %rax
movq %rax, -640(%rbp)
movq -336(%rbp), %rdi
movq -640(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4447
.loc_27_870:
movq -496(%rbp), %rdi
movq -336(%rbp), %rsi
call throwTypeError
.IF_NOT_4447:
.loc_27_873:
movq $139, %rdi
call memoryAlloc
movq %rax, -512(%rbp)
movq -512(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -576(%rbp)
vmovdqu %xmm0, -544(%rbp)
movss %xmm0, -528(%rbp)
xorb %al, %al
movb %al, -524(%rbp)
movb %al, -523(%rbp)
movq $-1, -536(%rbp)
vmovdqu -576(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -544(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -528(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -524(%rbp), %bx
movw %bx, (%rdi)
movq -512(%rbp), %rdi
addq $8, %rdi
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -384(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -376(%rbp), %bl
movb %bl, (%rdi)
movq -512(%rbp), %rdi
addq $56, %rdi
movq -336(%rbp), %rdx
movq %rdx, (%rdi)
movq -352(%rbp), %rdi
addq $64, %rdi
movq -512(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_877:
movq -352(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $72, %rdi
movq -496(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_878:
movq -352(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
jmp .ELSE_NOT_4451
.IF_NOT_4389:
.loc_27_880:
.loc_27_881:
movq -336(%rbp), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -336(%rbp)
.loc_27_883:
movq -336(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4454
.loc_27_884:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4456(%rip), %rsi
call throwError
.IF_NOT_4454:
.loc_27_886:
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq %rbx, %rdx
movq -96(%rbp), %rcx
movq $0, %r8
call consumeValue
movq %rax, -384(%rbp)
movq %rdx, -376(%rbp)
.loc_27_887:
movq -384(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4459
.loc_27_888:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4439(%rip), %rsi
call throwError
.IF_NOT_4459:
.loc_27_891:
movq -376(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_892:
movq -384(%rbp), %rdx
movq %rdx, -400(%rbp)
.loc_27_893:
movq -400(%rbp), %rax
addq $56, %rax
movq %rax, -640(%rbp)
movq -336(%rbp), %rdi
movq -640(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4465
.loc_27_894:
movq -400(%rbp), %rdi
movq -336(%rbp), %rsi
call throwTypeError
.IF_NOT_4465:
.loc_27_897:
movq $139, %rdi
call memoryAlloc
movq %rax, -416(%rbp)
movq -416(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -480(%rbp)
vmovdqu %xmm0, -448(%rbp)
movss %xmm0, -432(%rbp)
xorb %al, %al
movb %al, -428(%rbp)
movb %al, -427(%rbp)
movq $-1, -440(%rbp)
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -432(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -428(%rbp), %bx
movw %bx, (%rdi)
movq -416(%rbp), %rdi
addq $8, %rdi
movq -400(%rbp), %rax
addq $8, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -416(%rbp), %rdi
addq $56, %rdi
movq -336(%rbp), %rdx
movq %rdx, (%rdi)
movq -352(%rbp), %rdi
addq $64, %rdi
movq -416(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_901:
movq -352(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $72, %rdi
movq -400(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_902:
movq -352(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
.loc_27_904:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_4473
.loc_27_905:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4476
.loc_27_906:
jmp .FOR_NOT_4374
.IF_NOT_4476:
.loc_27_908:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4478(%rip), %rsi
call throwError
.IF_NOT_4473:
.ELSE_NOT_4451:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_4374
.FOR_NOT_4374:
.loc_27_914:
movq -320(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -336(%rbp)
.loc_27_915:
.FOR_LOOP_START_4480:
movq -336(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_4480
movb %al, %r11b
.loc_27_916:
movq -336(%rbp), %rax
addq $48, %rax
movq (%rax), %rdx
movq %rdx, -384(%rbp)
.loc_27_918:
movq -384(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4485
.loc_27_919:
movq -336(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .IF_NOT_4489
.loc_27_920:
movq $139, %rdi
call memoryAlloc
movq %rax, -400(%rbp)
movq -400(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -464(%rbp)
vmovdqu %xmm0, -432(%rbp)
movss %xmm0, -416(%rbp)
xorb %al, %al
movb %al, -412(%rbp)
movb %al, -411(%rbp)
movq $-1, -424(%rbp)
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -416(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -412(%rbp), %bx
movw %bx, (%rdi)
movq -400(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -512(%rbp)
movq %xmm0, -480(%rbp)
xorb %al, %al
movb %al, -472(%rbp)
movq $1, -480(%rbp)
movq $1, -488(%rbp)
movq $0, -496(%rbp)
movq $-1, -504(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -512(%rbp)
vmovdqu -512(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -480(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -472(%rbp), %bl
movb %bl, (%rdi)
movq -400(%rbp), %rdi
addq $138, %rdi
movb $14, (%rdi)
movq -400(%rbp), %rdx
movq %rdx, -384(%rbp)
.loc_27_923:
movq $67, %rdi
call memoryAlloc
movq %rax, -528(%rbp)
movq -528(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -528(%rbp), %rdi
addq $64, %rdi
movb $6, (%rdi)
movq -528(%rbp), %rdi
addq $8, %rdi
movq $40, (%rdi)
movq -528(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
movq -336(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq -528(%rbp), %rdi
addq $24, %rdi
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -384(%rbp), %rdi
addq $56, %rdi
movq -528(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4498
.IF_NOT_4489:
.loc_27_929:
movq -336(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .ELSE_NOT_4497
.loc_27_930:
movq -336(%rbp), %rdi
call recursiveStructDeclaration
movq %rax, -384(%rbp)
jmp .ELSE_NOT_4498
.ELSE_NOT_4497:
.loc_27_931:
.loc_27_932:
movq -336(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -336(%rbp)
jmp .FOR_LOOP_START_4480
.ELSE_NOT_4498:
.IF_NOT_4485:
.loc_27_936:
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
.loc_27_937:
movq -352(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_4500
movb %al, %r11b
.FOR_LOOP_START_4500:
.loc_27_938:
movq -352(%rbp), %rax
addq $8, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -336(%rbp), %rax
movq %rax, -672(%rbp)
movq -656(%rbp), %rdi
movq -672(%rbp), %rax
movq (%rax), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4507
.loc_27_939:
jmp .FOR_NOT_4500
.IF_NOT_4507:
movq -352(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
movq -352(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_4500
.FOR_NOT_4500:
.loc_27_943:
movq -352(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4509
.loc_27_944:
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
.loc_27_945:
movq $139, %rdi
call memoryAlloc
movq %rax, -400(%rbp)
movq -400(%rbp), %rdi
addq $80, %rdi
movq %rdi, %r11
pxor %xmm0, %xmm0
vmovdqu %ymm0, -464(%rbp)
vmovdqu %xmm0, -432(%rbp)
movss %xmm0, -416(%rbp)
xorb %al, %al
movb %al, -412(%rbp)
movb %al, -411(%rbp)
movq $-1, -424(%rbp)
movq %r11, %rdi
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -416(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -412(%rbp), %bx
movw %bx, (%rdi)
movq -400(%rbp), %rdi
addq $8, %rdi
movq %rdi, %r10
pxor %xmm0, %xmm0
vmovdqu %ymm0, -512(%rbp)
movq %xmm0, -480(%rbp)
xorb %al, %al
movb %al, -472(%rbp)
movq $1, -480(%rbp)
movq $1, -488(%rbp)
movq $0, -496(%rbp)
movq $-1, -504(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -512(%rbp)
movq %r10, %rdi
vmovdqu -512(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -480(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -472(%rbp), %bl
movb %bl, (%rdi)
movq -400(%rbp), %rdi
addq $56, %rdi
movq -336(%rbp), %rdx
movq %rdx, (%rdi)
movq -400(%rbp), %rdi
addq $72, %rdi
movq -384(%rbp), %rdx
movq %rdx, (%rdi)
movq -400(%rbp), %rdi
addq $64, %rdi
movq -352(%rbp), %rdx
movq %rdx, (%rdi)
movq -144(%rbp), %rdi
addq $64, %rdi
movq -400(%rbp), %rdx
movq %rdx, (%rdi)
.IF_NOT_4509:
movq -336(%rbp), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rdx
movq %rdx, -336(%rbp)
jmp .FOR_LOOP_START_4480
.FOR_NOT_4480:
.loc_27_954:
movq -304(%rbp), %rdi
leaq .VAR_4357(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4515
.loc_27_955:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rdi
call bahType.getPtr
movq -144(%rbp), %rdi
addq $56, %rdi
movq %rax, (%rdi)
.IF_NOT_4515:
.loc_27_958:
movq -144(%rbp), %rdx
movq %rdx, -384(%rbp)
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, -376(%rbp)
movq -384(%rbp), %rax
movq -376(%rbp), %rdx
leave
ret
.IF_NOT_4364:
.loc_27_961:
movq -304(%rbp), %rdi
leaq .VAR_3978(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4518
.loc_27_962:
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
je .BOOL_OR_4519
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .BOOL_OR_4519_NOT
.BOOL_OR_4519:
movb $1, %al
jmp .BOOL_OR_4519_END
.BOOL_OR_4519_NOT:
movb $0, %al
.BOOL_OR_4519_END:
cmpb $0, %al
je .IF_NOT_4524
.loc_27_963:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4526(%rip), %rsi
call throwError
.IF_NOT_4524:
.loc_27_966:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $14, (%rdi)
.loc_27_967:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $12, (%rdi)
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, %rdi
call strToInt
movq -320(%rbp), %rdi
addq $8, %rdi
movq %rax, (%rdi)
movq -320(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_973:
movq -144(%rbp), %rdx
movq %rdx, -336(%rbp)
movq -96(%rbp), %rbx
addq $2, %rbx
movq %rbx, -328(%rbp)
movq -336(%rbp), %rax
movq -328(%rbp), %rdx
leave
ret
.IF_NOT_4518:
.loc_27_976:
movq -304(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4528
movq -96(%rbp), %rbx
addq $2, %rbx
movq %rbx, -640(%rbp)
movq -640(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_4528
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1038(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4528
movb $1, %al
jmp .BOOL_AND_4528_END
.BOOL_AND_4528:
movb $0, %al
.BOOL_AND_4528_END:
cmpb $0, %al
je .IF_NOT_4534
.loc_27_977:
movq -96(%rbp), %rbx
addq $2, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $0, %rcx
call consumeType
movq %rax, -320(%rbp)
movq %rdx, -312(%rbp)
.loc_27_979:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4537
.loc_27_980:
movq -96(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4539(%rip), %rsi
call throwError
.IF_NOT_4537:
.loc_27_983:
movq -312(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_985:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $14, (%rdi)
.loc_27_986:
movq -144(%rbp), %rdi
addq $8, %rdi
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -272(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -264(%rbp), %bl
movb %bl, (%rdi)
.loc_27_987:
movq $67, %rdi
call memoryAlloc
movq %rax, -336(%rbp)
movq -336(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -336(%rbp), %rdi
addq $64, %rdi
movb $6, (%rdi)
movq -336(%rbp), %rdi
addq $8, %rdi
movq $40, (%rdi)
movq -336(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
movq -336(%rbp), %rdi
addq $24, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -336(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_994:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_4540
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4540
movb $1, %al
jmp .BOOL_AND_4540_END
.BOOL_AND_4540:
movb $0, %al
.BOOL_AND_4540_END:
cmpb $0, %al
je .IF_NOT_4544
.loc_27_995:
movq $1, -352(%rbp)
.loc_27_996:
addq $1, -96(%rbp)
.loc_27_997:
movq -144(%rbp), %rdx
movq %rdx, -368(%rbp)
.loc_27_999:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4545
movb %al, %r11b
.FOR_LOOP_START_4545:
.loc_27_1000:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4550
.loc_27_1001:
addq $1, -352(%rbp)
jmp .ELSE_NOT_4553
.IF_NOT_4550:
.loc_27_1002:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_4553
.loc_27_1003:
subq $1, -352(%rbp)
.loc_27_1004:
movq -352(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4555
.loc_27_1005:
jmp .FOR_NOT_4545
.IF_NOT_4555:
.ELSE_NOT_4553:
.loc_27_1009:
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq %rbx, %rdx
movq -96(%rbp), %rcx
movq $0, %r8
call consumeValue
movq %rax, -384(%rbp)
movq %rdx, -376(%rbp)
.loc_27_1011:
movq -384(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4558
.loc_27_1012:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4560(%rip), %rsi
call throwError
.IF_NOT_4558:
.loc_27_1015:
movq -384(%rbp), %rax
addq $56, %rax
movq %rax, -640(%rbp)
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -672(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rdi
movq -672(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4566
.loc_27_1016:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq -384(%rbp), %rdi
movq (%rax), %rsi
call throwTypeError
.IF_NOT_4566:
.loc_27_1019:
movq -376(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1021:
movq $139, %rdi
call memoryAlloc
movq %rax, -400(%rbp)
movq -400(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -464(%rbp)
vmovdqu %xmm0, -432(%rbp)
movss %xmm0, -416(%rbp)
xorb %al, %al
movb %al, -412(%rbp)
movb %al, -411(%rbp)
movq $-1, -424(%rbp)
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -416(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -412(%rbp), %bx
movw %bx, (%rdi)
movq -400(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -512(%rbp)
movq %xmm0, -480(%rbp)
xorb %al, %al
movb %al, -472(%rbp)
movq $1, -480(%rbp)
movq $1, -488(%rbp)
movq $0, -496(%rbp)
movq $-1, -504(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -512(%rbp)
vmovdqu -512(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -480(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -472(%rbp), %bl
movb %bl, (%rdi)
movq -400(%rbp), %rdi
addq $64, %rdi
movq -384(%rbp), %rdx
movq %rdx, (%rdi)
movq -368(%rbp), %rdi
addq $72, %rdi
movq -400(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1024:
movq -368(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -368(%rbp)
.loc_27_1026:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_4573
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_4573
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_4573
movb $1, %al
jmp .BOOL_AND_4573_END
.BOOL_AND_4573:
movb $0, %al
.BOOL_AND_4573_END:
cmpb $0, %al
je .IF_NOT_4581
.loc_27_1027:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4583(%rip), %rsi
call throwError
.IF_NOT_4581:
addq $1, -96(%rbp)
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_4545
.FOR_NOT_4545:
.IF_NOT_4544:
.loc_27_1035:
movq -144(%rbp), %rdx
movq %rdx, -352(%rbp)
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, -344(%rbp)
movq -352(%rbp), %rax
movq -344(%rbp), %rdx
leave
ret
.IF_NOT_4534:
.loc_27_1038:
movq -304(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4584
movq -96(%rbp), %rbx
addq $2, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_4584
movb $1, %al
jmp .BOOL_AND_4584_END
.BOOL_AND_4584:
movb $0, %al
.BOOL_AND_4584_END:
cmpb $0, %al
je .IF_NOT_4588
.loc_27_1039:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $13, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1043:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $14, (%rdi)
.loc_27_1044:
movq -144(%rbp), %rdi
addq $8, %rdi
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -272(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -264(%rbp), %bl
movb %bl, (%rdi)
.loc_27_1046:
movq -144(%rbp), %rdx
movq %rdx, -336(%rbp)
.loc_27_1047:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
.loc_27_1048:
addq $1, -96(%rbp)
.loc_27_1049:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4590
movb %al, %r11b
.FOR_LOOP_START_4590:
.loc_27_1051:
movq -48(%rbp), %rbx
addq $-1, %rbx
movq %rbx, -640(%rbp)
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq -640(%rbp), %rdx
movq %rbx, %rcx
movq $0, %r8
call consumeValue
movq %rax, -368(%rbp)
movq %rdx, -360(%rbp)
.loc_27_1054:
movq -368(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4596
.loc_27_1055:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4598(%rip), %rsi
call throwError
.IF_NOT_4596:
.loc_27_1058:
movq $67, %rdi
call memoryAlloc
movq %rax, -384(%rbp)
movq -384(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
.loc_27_1059:
movq -368(%rbp), %rax
addq $56, %rax
movq (%rax), %rdx
movq %rdx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -464(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -432(%rbp)
addq $32, %rax
movw (%rax), %bx
movw %bx, -400(%rbp)
addq $2, %rax
movb (%rax), %bl
movb %bl, -398(%rbp)
movq -384(%rbp), %rdi
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movw -400(%rbp), %bx
movw %bx, (%rdi)
addq $2, %rdi
movb -398(%rbp), %bl
movb %bl, (%rdi)
.loc_27_1060:
movq -384(%rbp), %rdi
addq $32, %rdi
movq $0, (%rdi)
.loc_27_1062:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq -352(%rbp), %rdx
movq %r11, %rax
movq (%rax), %r8
cmpq %r8, %rdx
jne .IF_NOT_4602
.loc_27_1063:
movq -352(%rbp), %rdi
addq $24, %rdi
movq -384(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4603
.IF_NOT_4602:
.loc_27_1064:
.loc_27_1065:
movq -352(%rbp), %rdi
addq $32, %rdi
movq -384(%rbp), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_4603:
.loc_27_1067:
movq -384(%rbp), %rdx
movq %rdx, -352(%rbp)
.loc_27_1070:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq -384(%rbp), %rdi
addq $16, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_1071:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq -384(%rbp), %rax
addq $8, %rax
movq %r11, %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq -144(%rbp), %rdi
addq $56, %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_27_1073:
movq $139, %rdi
call memoryAlloc
movq %rax, -480(%rbp)
movq -480(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -544(%rbp)
vmovdqu %xmm0, -512(%rbp)
movss %xmm0, -496(%rbp)
xorb %al, %al
movb %al, -492(%rbp)
movb %al, -491(%rbp)
movq $-1, -504(%rbp)
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -496(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -492(%rbp), %bx
movw %bx, (%rdi)
movq -480(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -592(%rbp)
movq %xmm0, -560(%rbp)
xorb %al, %al
movb %al, -552(%rbp)
movq $1, -560(%rbp)
movq $1, -568(%rbp)
movq $0, -576(%rbp)
movq $-1, -584(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -592(%rbp)
vmovdqu -592(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -552(%rbp), %bl
movb %bl, (%rdi)
movq -480(%rbp), %rdi
addq $72, %rdi
movq -368(%rbp), %rdx
movq %rdx, (%rdi)
movq -336(%rbp), %rdi
addq $64, %rdi
movq -480(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1076:
movq -336(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -336(%rbp)
.loc_27_1078:
movq -360(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1080:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_4617
.loc_27_1081:
jmp .FOR_NOT_4590
.IF_NOT_4617:
addq $1, -96(%rbp)
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_4590
.FOR_NOT_4590:
.loc_27_1085:
addq $1, -96(%rbp)
.loc_27_1086:
movq -144(%rbp), %rdx
movq %rdx, -368(%rbp)
movq -96(%rbp), %rdx
movq %rdx, -360(%rbp)
movq -368(%rbp), %rax
movq -360(%rbp), %rdx
leave
ret
.IF_NOT_4588:
.loc_27_1089:
movq -304(%rbp), %rdi
leaq .VAR_1886(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4619
.loc_27_1090:
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_4622
.loc_27_1091:
leaq -304(%rbp), %rdi
leaq .VAR_4623(%rip), %rsi
call throwError
.IF_NOT_4622:
.loc_27_1093:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq -64(%rbp), %rcx
movq -80(%rbp), %r8
call consumeValue
movq %rax, -320(%rbp)
movq %rdx, -312(%rbp)
.loc_27_1094:
movq -312(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1096:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4626
.loc_27_1097:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4628(%rip), %rsi
call throwError
.IF_NOT_4626:
.loc_27_1100:
movq -320(%rbp), %rdx
movq %rdx, -336(%rbp)
.loc_27_1106:
movq -320(%rbp), %rax
addq $56, %rax
movq (%rax), %rdi
call bahType.getPtr
movq %rax, -352(%rbp)
.loc_27_1108:
movq -336(%rbp), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -496(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -464(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm3
vmovdqu %ymm3, -432(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm4
vmovdqu %ymm4, -400(%rbp)
addq $32, %rax
movq (%rax), %xmm4
movq %xmm4, -368(%rbp)
addq $8, %rax
movw (%rax), %bx
movw %bx, -360(%rbp)
addq $2, %rax
movb (%rax), %bl
movb %bl, -358(%rbp)
movq -144(%rbp), %rdi
vmovdqu -496(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -464(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %ymm3
vmovdqu %ymm3, (%rdi)
addq $32, %rdi
vmovdqu -400(%rbp), %ymm4
vmovdqu %ymm4, (%rdi)
addq $32, %rdi
movq -368(%rbp), %xmm4
movq %xmm4, (%rdi)
addq $8, %rdi
movw -360(%rbp), %bx
movw %bx, (%rdi)
addq $2, %rdi
movb -358(%rbp), %bl
movb %bl, (%rdi)
.loc_27_1109:
movq -144(%rbp), %rdi
addq $56, %rdi
movq -352(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1110:
movq -144(%rbp), %rdi
addq $134, %rdi
movb $1, (%rdi)
.loc_27_1112:
movq -144(%rbp), %rdx
movq %rdx, -512(%rbp)
movq -96(%rbp), %rdx
movq %rdx, -504(%rbp)
movq -512(%rbp), %rax
movq -504(%rbp), %rdx
leave
ret
.IF_NOT_4619:
.loc_27_1116:
movq -304(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4631
.loc_27_1117:
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_4634
.loc_27_1118:
leaq -304(%rbp), %rdi
leaq .VAR_4635(%rip), %rsi
call throwError
.IF_NOT_4634:
.loc_27_1120:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq -64(%rbp), %rcx
movq -80(%rbp), %r8
call consumeValue
movq %rax, -320(%rbp)
movq %rdx, -312(%rbp)
.loc_27_1121:
movq -312(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1123:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4638
.loc_27_1124:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4640(%rip), %rsi
call throwError
.IF_NOT_4638:
.loc_27_1127:
movq -320(%rbp), %rdx
movq %rdx, -336(%rbp)
.loc_27_1129:
movq -320(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4645
.loc_27_1130:
movq -336(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_4647(%rip), %rsi
call throwError
.IF_NOT_4645:
.loc_27_1133:
movq -320(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -352(%rbp)
.loc_27_1135:
movq -144(%rbp), %rdi
addq $56, %rdi
movq -352(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1136:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $8, (%rdi)
.loc_27_1137:
movq -144(%rbp), %rdi
addq $64, %rdi
movq -336(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1139:
movq -144(%rbp), %rdx
movq %rdx, -368(%rbp)
movq -96(%rbp), %rdx
movq %rdx, -360(%rbp)
movq -368(%rbp), %rax
movq -360(%rbp), %rdx
leave
ret
.IF_NOT_4631:
.loc_27_1142:
movb -264(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4651
.loc_27_1143:
leaq -304(%rbp), %rdi
leaq .VAR_4652(%rip), %rsi
call throwError
.IF_NOT_4651:
.loc_27_1146:
movq -144(%rbp), %rdi
addq $8, %rdi
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -272(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -264(%rbp), %bl
movb %bl, (%rdi)
.loc_27_1148:
movq -296(%rbp), %rdx
cmpq $2, %rdx
jne .IF_NOT_4654
.loc_27_1149:
movq -304(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $36, %dl
jne .IF_NOT_4657
.loc_27_1150:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $12, (%rdi)
.loc_27_1151:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4658
.IF_NOT_4657:
.loc_27_1155:
.loc_27_1156:
leaq parserCtx(%rip), %rdi
movq -304(%rbp), %rsi
call parserContext.findVar
movq %rax, -320(%rbp)
.loc_27_1158:
movq -320(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_4660
.loc_27_1159:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $5, (%rdi)
.loc_27_1160:
movq -320(%rbp), %rax
addq $8, %rax
movq -144(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_1161:
movq -320(%rbp), %rax
addq $24, %rax
movq -144(%rbp), %rdi
addq $80, %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rax
addq $16, %rdi
movd (%rax), %xmm2
movd %xmm2, (%rdi)
addq $4, %rax
addq $4, %rdi
movw (%rax), %bx
movw %bx, (%rdi)
.loc_27_1163:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_4663
movq -320(%rbp), %rax
addq $16, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_AND_4663
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.isFlagSet
cmpb $0, %al
je .BOOL_AND_4663
movb $1, %al
jmp .BOOL_AND_4663_END
.BOOL_AND_4663:
movb $0, %al
.BOOL_AND_4663_END:
cmpb $0, %al
je .IF_NOT_4671
.loc_27_1164:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.toggleFlag
.IF_NOT_4671:
jmp .ELSE_NOT_4674
.IF_NOT_4660:
.loc_27_1167:
.loc_27_1168:
leaq parserCtx(%rip), %rdi
movq -304(%rbp), %rsi
call parserContext.findFunc
movq %rax, -336(%rbp)
.loc_27_1169:
movq -336(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_4676
.loc_27_1170:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $3, (%rdi)
.loc_27_1171:
movq -336(%rbp), %rax
addq $8, %rax
movq -144(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_1172:
movq -144(%rbp), %rdi
addq $135, %rdi
movb $1, (%rdi)
jmp .ELSE_NOT_4678
.IF_NOT_4676:
.loc_27_1173:
.loc_27_1174:
leaq -304(%rbp), %rdi
leaq .VAR_4679(%rip), %rsi
call throwError
.ELSE_NOT_4678:
.ELSE_NOT_4674:
.ELSE_NOT_4658:
jmp .ELSE_NOT_4690
.IF_NOT_4654:
.loc_27_1178:
movq -296(%rbp), %rdx
cmpq $8, %rdx
jne .ELSE_NOT_4681
.loc_27_1179:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq $1, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $0, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1183:
movq -144(%rbp), %rdi
addq $135, %rdi
movb $1, (%rdi)
jmp .ELSE_NOT_4690
.ELSE_NOT_4681:
.loc_27_1184:
movq -296(%rbp), %rdx
cmpq $0, %rdx
jne .ELSE_NOT_4683
.loc_27_1185:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $1, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1189:
movq -144(%rbp), %rdi
addq $135, %rdi
movb $1, (%rdi)
jmp .ELSE_NOT_4690
.ELSE_NOT_4683:
.loc_27_1190:
movq -296(%rbp), %rdx
cmpq $1, %rdx
jne .ELSE_NOT_4685
.loc_27_1191:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $3, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1195:
movq -144(%rbp), %rdi
addq $135, %rdi
movb $1, (%rdi)
jmp .ELSE_NOT_4690
.ELSE_NOT_4685:
.loc_27_1196:
movq -296(%rbp), %rdx
cmpq $5, %rdx
jne .ELSE_NOT_4687
.loc_27_1197:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $4, (%rdi)
movq -320(%rbp), %rdi
addq $66, %rdi
movb $1, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1202:
movq -144(%rbp), %rdi
addq $135, %rdi
movb $1, (%rdi)
jmp .ELSE_NOT_4690
.ELSE_NOT_4687:
.loc_27_1203:
movq -296(%rbp), %rdx
cmpq $7, %rdx
jne .ELSE_NOT_4689
.loc_27_1204:
movq $67, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq $1, (%rdi)
movq -320(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1208:
movq -144(%rbp), %rdi
addq $135, %rdi
movb $1, (%rdi)
jmp .ELSE_NOT_4690
.ELSE_NOT_4689:
.loc_27_1209:
.loc_27_1210:
movq $0, -144(%rbp)
.ELSE_NOT_4690:
.loc_27_1213:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, -640(%rbp)
movq -640(%rbp), %rdx
cmpq $1, %rdx
je .BOOL_OR_4691
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdx
cmpq $10, %rdx
je .BOOL_OR_4691
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4691_END
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rdi
leaq .VAR_1038(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_4691_END
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_4691_NOT
.BOOL_OR_4691:
movb $1, %al
jmp .BOOL_OR_4691_END
.BOOL_OR_4691_NOT:
movb $0, %al
.BOOL_OR_4691_END:
cmpb $0, %al
je .IF_NOT_4702
.loc_27_1214:
movq -144(%rbp), %rdx
movq %rdx, -320(%rbp)
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, -312(%rbp)
movq -320(%rbp), %rax
movq -312(%rbp), %rdx
leave
ret
.IF_NOT_4702:
.loc_27_1217:
movq -144(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4704
.loc_27_1218:
leaq -304(%rbp), %rdi
leaq .VAR_4705(%rip), %rsi
call throwError
.IF_NOT_4704:
.IF_NOT_4339:
.loc_27_1222:
.FOR_LOOP_START_4706:
movq -32(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4706
movb %al, %r11b
.loc_27_1223:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4710
.loc_27_1224:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
je .IF_NOT_4715
.loc_27_1225:
leaq -304(%rbp), %rdi
leaq .VAR_4716(%rip), %rsi
call throwError
.IF_NOT_4715:
.loc_27_1229:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_2748(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4719
.loc_27_1230:
movq -32(%rbp), %rbx
addq $2, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $0, %rcx
call consumeType
movq %rax, -320(%rbp)
movq %rdx, -312(%rbp)
.loc_27_1231:
movq -312(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1233:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4722
.loc_27_1234:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4724(%rip), %rsi
call throwError
.IF_NOT_4722:
.loc_27_1237:
movq -144(%rbp), %rdi
addq $135, %rdi
movb $1, (%rdi)
.loc_27_1238:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $0, (%rdi)
.loc_27_1239:
movq -144(%rbp), %rdi
addq $80, %rdi
movq %rdi, -640(%rbp)
movq -320(%rbp), %rax
addq $8, %rax
movq (%rax), %rdi
call uintToStr
movq -640(%rbp), %rdi
leaq gen(%rip), %rsi
movq %rax, %rdx
call asmContext.staticInt
.loc_27_1240:
movq $67, %rdi
call memoryAlloc
movq %rax, -336(%rbp)
movq -336(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -336(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
movq -336(%rbp), %rdi
addq $8, %rdi
movq $8, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -336(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1245:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_4731
.loc_27_1246:
movq -32(%rbp), %rbx
addq $3, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4733(%rip), %rsi
call throwError
.IF_NOT_4731:
.loc_27_1250:
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
.loc_27_1251:
jmp .FOR_LOOP_START_4706
.IF_NOT_4719:
.loc_27_1254:
movq -144(%rbp), %rdx
movq %rdx, -320(%rbp)
.loc_27_1255:
movq $139, %rdi
call memoryAlloc
movq %rax, -336(%rbp)
movq -336(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -400(%rbp)
vmovdqu %xmm0, -368(%rbp)
movss %xmm0, -352(%rbp)
xorb %al, %al
movb %al, -348(%rbp)
movb %al, -347(%rbp)
movq $-1, -360(%rbp)
vmovdqu -400(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -368(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -352(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -348(%rbp), %bx
movw %bx, (%rdi)
movq -336(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -448(%rbp)
movq %xmm0, -416(%rbp)
xorb %al, %al
movb %al, -408(%rbp)
movq $1, -416(%rbp)
movq $1, -424(%rbp)
movq $0, -432(%rbp)
movq $-1, -440(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -448(%rbp)
vmovdqu -448(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -416(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -408(%rbp), %bl
movb %bl, (%rdi)
movq -336(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_1256:
movq -144(%rbp), %rdi
addq $138, %rdi
movb $4, (%rdi)
.loc_27_1257:
movq -144(%rbp), %rdi
addq $64, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1258:
movq -320(%rbp), %rax
addq $8, %rax
movq -144(%rbp), %rdi
addq $8, %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
.loc_27_1259:
movq -320(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $40, %rax
movq -144(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_1261:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_4740
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.isFlagSet
cmpb $0, %al
je .BOOL_AND_4740
movb $1, %al
jmp .BOOL_AND_4740_END
.BOOL_AND_4740:
movb $0, %al
.BOOL_AND_4740_END:
cmpb $0, %al
je .IF_NOT_4745
.loc_27_1262:
movq -320(%rbp), %rax
addq $56, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.isFlagSet
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4749
.loc_27_1263:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rdi
movq $1, %rsi
call bahType.toggleFlag
jmp .ELSE_NOT_4752
.IF_NOT_4749:
.loc_27_1264:
.loc_27_1265:
movq -320(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
leaq parserCtx(%rip), %rdi
movq %rax, %rsi
call parserContext.findFunc
movq %rax, -464(%rbp)
.loc_27_1266:
movq -464(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_4755
movq -464(%rbp), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -656(%rbp), %rdi
movq -688(%rbp), %rax
movq (%rax), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_4755
movb $1, %al
jmp .BOOL_AND_4755_END
.BOOL_AND_4755:
movb $0, %al
.BOOL_AND_4755_END:
cmpb $0, %al
je .IF_NOT_4762
.loc_27_1267:
leaq parserCtx(%rip), %rdi
addq $120, %rdi
movq (%rdi), %rdi
addq $56, %rdi
movq (%rdi), %rdi
addq $32, %rdi
movq (%rdi), %rax
movq %rax, -640(%rbp)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $32, %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, -656(%rbp)
movq -640(%rbp), %rdi
movq -656(%rbp), %rsi
call __Bah_realocate_arr
movq -640(%rbp), %rdi
movq -656(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -464(%rbp), %rdx
movq %rdx, (%rdi)
.IF_NOT_4762:
.ELSE_NOT_4752:
.IF_NOT_4745:
.loc_27_1272:
movq -320(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -464(%rbp)
.loc_27_1273:
movq -144(%rbp), %rdx
movq %rdx, -480(%rbp)
.loc_27_1276:
movq -32(%rbp), %rbx
addq $2, %rbx
movq %rbx, -96(%rbp)
.loc_27_1277:
movq $1, -112(%rbp)
.loc_27_1279:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movb (%rax), %al
movb %al, -657(%rbp)
movb -657(%rbp), %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .BOOL_AND_4769
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rax
movq (%rax), %rax
movq %rax, -720(%rbp)
movq -720(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_4769
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -736(%rbp)
movq -736(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -752(%rbp)
movq -752(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -768(%rbp)
movq -768(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -784(%rbp)
movq -784(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_4769
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -800(%rbp)
movq -800(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -816(%rbp)
movq -816(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -832(%rbp)
movq -832(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -848(%rbp)
movq -848(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_4784
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -864(%rbp)
movq -864(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -880(%rbp)
movq -880(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -896(%rbp)
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -912(%rbp)
movq -912(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -928(%rbp)
movq -928(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -944(%rbp)
movq -896(%rbp), %rax
movq (%rax), %rdi
movq -944(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
cmpb $0, %al
je .BOOL_AND_4784
movb $1, %al
jmp .BOOL_AND_4784_END
.BOOL_AND_4784:
movb $0, %al
.BOOL_AND_4784_END:
cmpb $1, %al
je .BOOL_OR_4783_END
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -960(%rbp)
movq -960(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -976(%rbp)
movq -976(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -992(%rbp)
movq -992(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -1008(%rbp)
movq -1008(%rbp), %rax
movb (%rax), %al
movb %al, -1009(%rbp)
movb -1009(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_4795
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -1024(%rbp)
movq -1024(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -1040(%rbp)
movq -1040(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1056(%rbp)
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -1072(%rbp)
movq -1072(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -1088(%rbp)
movq -1088(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1104(%rbp)
movq -1104(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -1120(%rbp)
movq -1056(%rbp), %rax
movq (%rax), %rdi
movq -1120(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
cmpb $0, %al
je .BOOL_AND_4795
movb $1, %al
jmp .BOOL_AND_4795_END
.BOOL_AND_4795:
movb $0, %al
.BOOL_AND_4795_END:
cmpb $1, %al
jne .BOOL_OR_4783_NOT
.BOOL_OR_4783:
movb $1, %al
jmp .BOOL_OR_4783_END
.BOOL_OR_4783_NOT:
movb $0, %al
.BOOL_OR_4783_END:
cmpb $0, %al
je .BOOL_AND_4769
movb $1, %al
jmp .BOOL_AND_4769_END
.BOOL_AND_4769:
movb $0, %al
.BOOL_AND_4769_END:
cmpb $0, %al
je .IF_NOT_4809
.loc_27_1280:
movq -464(%rbp), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -464(%rbp)
.IF_NOT_4809:
.loc_27_1283:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4811
movb %al, %r11b
.FOR_LOOP_START_4811:
.loc_27_1284:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4816
.loc_27_1285:
jmp .FOR_NOT_4811
.IF_NOT_4816:
.loc_27_1288:
movq -464(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4818
.loc_27_1289:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4820(%rip), %rsi
call throwError
.IF_NOT_4818:
.loc_27_1292:
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -496(%rbp)
movq %rdx, -488(%rbp)
.loc_27_1293:
movq -488(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1296:
movq -496(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4822
.loc_27_1297:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4824(%rip), %rsi
call throwError
.IF_NOT_4822:
.loc_27_1300:
movq -464(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movb (%rax), %al
movb %al, -641(%rbp)
movb -641(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .BOOL_AND_4825
movq -464(%rbp), %rax
addq $24, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rdi
leaq .VAR_4832(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4825
movq -496(%rbp), %rax
addq $56, %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -720(%rbp)
movq -720(%rbp), %rax
movb (%rax), %al
movb %al, -721(%rbp)
movb -721(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .BOOL_OR_4833
movq -496(%rbp), %rax
addq $56, %rax
movq %rax, -736(%rbp)
movq -736(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -752(%rbp)
movq -752(%rbp), %rax
movq (%rax), %rax
movq %rax, -768(%rbp)
movq -768(%rbp), %rax
movq (%rax), %rax
movq %rax, -784(%rbp)
movq -784(%rbp), %rdi
leaq .VAR_4832(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_OR_4833_NOT
.BOOL_OR_4833:
movb $1, %al
jmp .BOOL_OR_4833_END
.BOOL_OR_4833_NOT:
movb $0, %al
.BOOL_OR_4833_END:
cmpb $0, %al
je .BOOL_AND_4825
movb $1, %al
jmp .BOOL_AND_4825_END
.BOOL_AND_4825:
movb $0, %al
.BOOL_AND_4825_END:
cmpb $0, %al
je .IF_NOT_4844
.loc_27_1301:
movq $139, %rdi
call memoryAlloc
movq %rax, -512(%rbp)
movq -512(%rbp), %rdi
addq $80, %rdi
movq %rdi, %r11
pxor %xmm0, %xmm0
vmovdqu %ymm0, -576(%rbp)
vmovdqu %xmm0, -544(%rbp)
movss %xmm0, -528(%rbp)
xorb %al, %al
movb %al, -524(%rbp)
movb %al, -523(%rbp)
movq $-1, -536(%rbp)
movq %r11, %rdi
vmovdqu -576(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -544(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -528(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -524(%rbp), %bx
movw %bx, (%rdi)
movq -512(%rbp), %rdi
addq $8, %rdi
movq %rdi, %r10
pxor %xmm0, %xmm0
vmovdqu %ymm0, -624(%rbp)
movq %xmm0, -592(%rbp)
xorb %al, %al
movb %al, -584(%rbp)
movq $1, -592(%rbp)
movq $1, -600(%rbp)
movq $0, -608(%rbp)
movq $-1, -616(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -624(%rbp)
movq %r10, %rdi
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -592(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -584(%rbp), %bl
movb %bl, (%rdi)
movq -512(%rbp), %rdi
addq $138, %rdi
movb $15, (%rdi)
movq -512(%rbp), %rdi
addq $64, %rdi
movq -496(%rbp), %rdx
movq %rdx, (%rdi)
movq -512(%rbp), %rdi
addq $56, %rdi
movq -464(%rbp), %rdx
movq %rdx, (%rdi)
movq -480(%rbp), %rdi
addq $72, %rdi
movq -512(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4848
.IF_NOT_4844:
.loc_27_1306:
.loc_27_1307:
movq -496(%rbp), %rax
addq $56, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movb (%rax), %al
movb %al, -657(%rbp)
movb -657(%rbp), %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .BOOL_AND_4849
movq -464(%rbp), %rax
addq $65, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_4849
movq -464(%rbp), %rax
addq $24, %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rax
movb (%rax), %al
movb %al, -705(%rbp)
movb -705(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .BOOL_AND_4849
movq -464(%rbp), %rax
addq $24, %rax
movq %rax, -720(%rbp)
movq -720(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -736(%rbp)
movq -736(%rbp), %rax
movq (%rax), %rax
movq %rax, -752(%rbp)
movq -752(%rbp), %rax
movq (%rax), %rax
movq %rax, -768(%rbp)
movq -768(%rbp), %rdi
leaq .VAR_4863(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_4849
movb $1, %al
jmp .BOOL_AND_4849_END
.BOOL_AND_4849:
movb $0, %al
.BOOL_AND_4849_END:
cmpb $0, %al
je .IF_NOT_4864
.loc_27_1308:
movq -496(%rbp), %rdi
addq $56, %rdi
movq -464(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4868
.IF_NOT_4864:
.loc_27_1309:
movq -496(%rbp), %rax
addq $56, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rdi
movq -464(%rbp), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .ELSE_NOT_4868
.loc_27_1310:
movq -496(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .BOOL_OR_4869
movq -464(%rbp), %rax
addq $65, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -625(%rbp)
movb -625(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
je .BOOL_OR_4869
movq -464(%rbp), %rax
addq $24, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movb (%rax), %al
movb %al, -657(%rbp)
movb -657(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
jne .BOOL_OR_4869
movq -464(%rbp), %rax
addq $24, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rax
movq (%rax), %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rdx
cmpq $1, %rdx
je .BOOL_OR_4869_NOT
.BOOL_OR_4869:
movb $1, %al
jmp .BOOL_OR_4869_END
.BOOL_OR_4869_NOT:
movb $0, %al
.BOOL_OR_4869_END:
cmpb $0, %al
je .IF_NOT_4885
.loc_27_1311:
movq -496(%rbp), %rdi
movq -464(%rbp), %rsi
call throwTypeError
.IF_NOT_4885:
.ELSE_NOT_4868:
.loc_27_1315:
movq $139, %rdi
call memoryAlloc
movq %rax, -512(%rbp)
movq -512(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -576(%rbp)
vmovdqu %xmm0, -544(%rbp)
movss %xmm0, -528(%rbp)
xorb %al, %al
movb %al, -524(%rbp)
movb %al, -523(%rbp)
movq $-1, -536(%rbp)
vmovdqu -576(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -544(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -528(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -524(%rbp), %bx
movw %bx, (%rdi)
movq -512(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -624(%rbp)
movq %xmm0, -592(%rbp)
xorb %al, %al
movb %al, -584(%rbp)
movq $1, -592(%rbp)
movq $1, -600(%rbp)
movq $0, -608(%rbp)
movq $-1, -616(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -624(%rbp)
vmovdqu -624(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -592(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -584(%rbp), %bl
movb %bl, (%rdi)
movq -512(%rbp), %rdi
addq $138, %rdi
movb $6, (%rdi)
movq -512(%rbp), %rdi
addq $64, %rdi
movq -496(%rbp), %rdx
movq %rdx, (%rdi)
movq -512(%rbp), %rdi
addq $56, %rdi
movq -464(%rbp), %rdx
movq %rdx, (%rdi)
movq -480(%rbp), %rdi
addq $72, %rdi
movq -512(%rbp), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_4848:
.loc_27_1322:
movq -480(%rbp), %rax
addq $72, %rax
movq (%rax), %rdx
movq %rdx, -480(%rbp)
.loc_27_1323:
movq -464(%rbp), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -464(%rbp)
.loc_27_1325:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_4892
.loc_27_1326:
leaq -304(%rbp), %rdi
leaq .VAR_4893(%rip), %rsi
call throwError
.IF_NOT_4892:
.loc_27_1329:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_4894
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_4894
movb $1, %al
jmp .BOOL_AND_4894_END
.BOOL_AND_4894:
movb $0, %al
.BOOL_AND_4894_END:
cmpb $0, %al
je .IF_NOT_4901
.loc_27_1330:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_4903(%rip), %rsi
call throwError
jmp .ELSE_NOT_4906
.IF_NOT_4901:
.loc_27_1331:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_4906
.loc_27_1332:
subq $1, -96(%rbp)
.ELSE_NOT_4906:
addq $1, -96(%rbp)
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_4811
.FOR_NOT_4811:
.loc_27_1337:
movq -464(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_4908
.loc_27_1338:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4910(%rip), %rsi
call throwError
.IF_NOT_4908:
.loc_27_1341:
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
jmp .ELSE_NOT_5110
.IF_NOT_4710:
.loc_27_1342:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_4913
.loc_27_1344:
movq -32(%rbp), %rbx
addq $3, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
jb .IF_NOT_4916
.loc_27_1345:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4111(%rip), %rsi
call throwError
.IF_NOT_4916:
.loc_27_1348:
movq $1, -320(%rbp)
.loc_27_1349:
movq -48(%rbp), %rbx
addq $-1, %rbx
movq %rbx, -336(%rbp)
.loc_27_1350:
movq $-1, -352(%rbp)
.loc_27_1351:
movq -32(%rbp), %rbx
addq $2, %rbx
movq %rbx, -96(%rbp)
.FOR_LOOP_START_4919:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_4919
movb %al, %r11b
.loc_27_1352:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -304(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -272(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -264(%rbp)
.loc_27_1353:
movq -296(%rbp), %rdx
cmpq $3, %rdx
je .IF_NOT_4922
.loc_27_1354:
movq -304(%rbp), %rdi
leaq .VAR_1400(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_4924
.loc_27_1355:
movq -96(%rbp), %rdx
movq %rdx, -352(%rbp)
.IF_NOT_4924:
.loc_27_1357:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_4919
.IF_NOT_4922:
.loc_27_1360:
movq -304(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $40, %dl
je .BOOL_OR_4925
movq -304(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $91, %dl
je .BOOL_OR_4925
movq -304(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
cmpb $123, %dl
jne .BOOL_OR_4925_NOT
.BOOL_OR_4925:
movb $1, %al
jmp .BOOL_OR_4925_END
.BOOL_OR_4925_NOT:
movb $0, %al
.BOOL_OR_4925_END:
cmpb $0, %al
je .IF_NOT_4932
.loc_27_1361:
addq $1, -320(%rbp)
jmp .ELSE_NOT_4933
.IF_NOT_4932:
.loc_27_1362:
.loc_27_1363:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4935
.loc_27_1364:
leaq -304(%rbp), %rdi
leaq .VAR_4127(%rip), %rsi
call throwError
.IF_NOT_4935:
.loc_27_1366:
subq $1, -320(%rbp)
.loc_27_1367:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4938
.loc_27_1368:
movq -96(%rbp), %rdx
movq %rdx, -336(%rbp)
.loc_27_1369:
jmp .FOR_NOT_4919
.IF_NOT_4938:
.loc_27_1371:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_4919
.ELSE_NOT_4933:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_4919
.FOR_NOT_4919:
.loc_27_1376:
movq -352(%rbp), %rdx
cmpq $-1, %rdx
je .IF_NOT_4940
.loc_27_1377:
movq $0, -368(%rbp)
.loc_27_1378:
movq $0, -384(%rbp)
.loc_27_1380:
movq -32(%rbp), %rbx
addq $2, %rbx
cmpq -352(%rbp), %rbx
jge .IF_NOT_4942
.loc_27_1381:
movq -32(%rbp), %rbx
addq $2, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -352(%rbp), %rdx
movq -64(%rbp), %rcx
movq $0, %r8
call consumeValue
movq %rax, -400(%rbp)
movq %rdx, -392(%rbp)
.loc_27_1382:
movq -400(%rbp), %rdx
movq %rdx, -368(%rbp)
.loc_27_1383:
movq -368(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4945
.loc_27_1384:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4947(%rip), %rsi
call throwError
.IF_NOT_4945:
.IF_NOT_4942:
.loc_27_1388:
movq -352(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -336(%rbp), %rdx
jge .IF_NOT_4950
.loc_27_1389:
movq -352(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -336(%rbp), %rdx
movq -64(%rbp), %rcx
movq $0, %r8
call consumeValue
movq %rax, -400(%rbp)
movq %rdx, -392(%rbp)
.loc_27_1390:
movq -400(%rbp), %rdx
movq %rdx, -384(%rbp)
.loc_27_1391:
movq -384(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4953
.loc_27_1392:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4955(%rip), %rsi
call throwError
.IF_NOT_4953:
.IF_NOT_4950:
.loc_27_1396:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
je .BOOL_AND_4956
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movb (%rax), %al
movb %al, -641(%rbp)
movb -641(%rbp), %dl
movzbq %dl, %rdx
cmpq $4, %rdx
je .BOOL_AND_4956
movb $1, %al
jmp .BOOL_AND_4956_END
.BOOL_AND_4956:
movb $0, %al
.BOOL_AND_4956_END:
cmpb $0, %al
je .IF_NOT_4965
.loc_27_1397:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_4967(%rip), %rsi
call throwError
.IF_NOT_4965:
.loc_27_1400:
movq $139, %rdi
call memoryAlloc
movq %rax, -400(%rbp)
movq -400(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -464(%rbp)
vmovdqu %xmm0, -432(%rbp)
movss %xmm0, -416(%rbp)
xorb %al, %al
movb %al, -412(%rbp)
movb %al, -411(%rbp)
movq $-1, -424(%rbp)
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -432(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -416(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -412(%rbp), %bx
movw %bx, (%rdi)
movq -400(%rbp), %rdi
addq $8, %rdi
movq -144(%rbp), %rax
addq $8, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -400(%rbp), %rdi
addq $138, %rdi
movb $11, (%rdi)
movq -400(%rbp), %rdi
addq $64, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
movq -144(%rbp), %rax
addq $56, %rax
movq -400(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -400(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_1407:
movq $139, %rdi
call memoryAlloc
movq %rax, -480(%rbp)
movq -480(%rbp), %rdi
addq $80, %rdi
movq %rdi, %r11
pxor %xmm0, %xmm0
vmovdqu %ymm0, -544(%rbp)
vmovdqu %xmm0, -512(%rbp)
movss %xmm0, -496(%rbp)
xorb %al, %al
movb %al, -492(%rbp)
movb %al, -491(%rbp)
movq $-1, -504(%rbp)
movq %r11, %rdi
vmovdqu -544(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -512(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -496(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -492(%rbp), %bx
movw %bx, (%rdi)
movq -480(%rbp), %rdi
addq $8, %rdi
movq %rdi, %r10
pxor %xmm0, %xmm0
vmovdqu %ymm0, -592(%rbp)
movq %xmm0, -560(%rbp)
xorb %al, %al
movb %al, -552(%rbp)
movq $1, -560(%rbp)
movq $1, -568(%rbp)
movq $0, -576(%rbp)
movq $-1, -584(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -592(%rbp)
movq %r10, %rdi
vmovdqu -592(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -560(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -552(%rbp), %bl
movb %bl, (%rdi)
movq -480(%rbp), %rdi
addq $64, %rdi
movq -368(%rbp), %rdx
movq %rdx, (%rdi)
movq -480(%rbp), %rdi
addq $72, %rdi
movq -384(%rbp), %rdx
movq %rdx, (%rdi)
movq -144(%rbp), %rdi
addq $72, %rdi
movq -480(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_4975
.IF_NOT_4940:
.loc_27_1412:
.loc_27_1413:
movq -32(%rbp), %rbx
addq $2, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -336(%rbp), %rdx
movq -64(%rbp), %rcx
movq $0, %r8
call consumeValue
movq %rax, -368(%rbp)
movq %rdx, -360(%rbp)
.loc_27_1415:
movq -368(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_4978
.loc_27_1416:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4135(%rip), %rsi
call throwError
.IF_NOT_4978:
.loc_27_1419:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rdx
movq %rdx, -384(%rbp)
.loc_27_1421:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_4984
.loc_27_1422:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_4190(%rip), %rsi
call throwError
.IF_NOT_4984:
.loc_27_1425:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $13, %rdx
jne .IF_NOT_4991
.loc_27_1427:
movq -368(%rbp), %rax
addq $135, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_4995
.loc_27_1428:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4162(%rip), %rsi
call throwError
.IF_NOT_4995:
.loc_27_1431:
leaq -448(%rbp), %rdi
movq -368(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_27_1432:
movq -448(%rbp), %rax
movl (%rax), %eax
movl -448(%rbp), %edi
movq $1, %rsi
movl %eax, %edx
call strSubstitute
movq %rax, %rdi
call strToInt
movq %rax, -464(%rbp)
.loc_27_1434:
movq -464(%rbp), %rdx
cmpq $0, %rdx
jge .IF_NOT_5001
.loc_27_1435:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4168(%rip), %rsi
call throwError
.IF_NOT_5001:
.loc_27_1438:
movq $0, -480(%rbp)
.loc_27_1439:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -496(%rbp)
.loc_27_1440:
movq -480(%rbp), %rdx
cmpq -464(%rbp), %rdx
jge .FOR_NOT_5006
movb %al, %r11b
.FOR_LOOP_START_5006:
.loc_27_1441:
movq -496(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5010
.loc_27_1442:
jmp .FOR_NOT_5006
.IF_NOT_5010:
.loc_27_1445:
movq -496(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -496(%rbp)
addq $1, -480(%rbp)
movq -480(%rbp), %rdx
cmpq -464(%rbp), %rdx
jl .FOR_LOOP_START_5006
.FOR_NOT_5006:
.loc_27_1448:
movq -496(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5013
.loc_27_1449:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4180(%rip), %rsi
call throwError
.IF_NOT_5013:
.loc_27_1452:
movq $139, %rdi
call memoryAlloc
movq %rax, -512(%rbp)
movq -512(%rbp), %rdi
addq $80, %rdi
movq %rdi, %r11
pxor %xmm0, %xmm0
vmovdqu %ymm0, -576(%rbp)
vmovdqu %xmm0, -544(%rbp)
movss %xmm0, -528(%rbp)
xorb %al, %al
movb %al, -524(%rbp)
movb %al, -523(%rbp)
movq $-1, -536(%rbp)
movq %r11, %rdi
vmovdqu -576(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -544(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -528(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -524(%rbp), %bx
movw %bx, (%rdi)
movq -512(%rbp), %rdi
addq $8, %rdi
movq %rdi, %r10
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, %r9
movq %r10, %rdi
movq %r9, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -512(%rbp), %rdi
addq $138, %rdi
movb $10, (%rdi)
movq -512(%rbp), %rdi
addq $64, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
movq -512(%rbp), %rdi
addq $72, %rdi
movq -368(%rbp), %rdx
movq %rdx, (%rdi)
movq -512(%rbp), %rdi
addq $56, %rdi
movq -496(%rbp), %rdx
movq %rdx, (%rdi)
movq -512(%rbp), %rdx
movq %rdx, -144(%rbp)
jmp .ELSE_NOT_5019
.IF_NOT_4991:
.loc_27_1460:
.loc_27_1461:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
je .BOOL_OR_5020
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movb (%rax), %al
movb %al, -641(%rbp)
movb -641(%rbp), %dl
movzbq %dl, %rdx
cmpq $12, %rdx
jne .BOOL_OR_5020_NOT
.BOOL_OR_5020:
movb $1, %al
jmp .BOOL_OR_5020_END
.BOOL_OR_5020_NOT:
movb $0, %al
.BOOL_OR_5020_END:
cmpb $0, %al
je .IF_NOT_5029
.loc_27_1462:
movq $67, %rdi
call memoryAlloc
movq %rax, -400(%rbp)
movq -400(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -400(%rbp), %rdi
addq $64, %rdi
movb $2, (%rdi)
movq -400(%rbp), %rdi
addq $8, %rdi
movq $1, (%rdi)
movq -400(%rbp), %rdx
movq %rdx, -384(%rbp)
jmp .ELSE_NOT_5037
.IF_NOT_5029:
.loc_27_1466:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
jne .ELSE_NOT_5034
.loc_27_1467:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, -384(%rbp)
jmp .ELSE_NOT_5037
.ELSE_NOT_5034:
.loc_27_1468:
.loc_27_1469:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_4967(%rip), %rsi
call throwError
.ELSE_NOT_5037:
.loc_27_1472:
movq -144(%rbp), %rdx
movq %rdx, -400(%rbp)
.loc_27_1473:
movq $139, %rdi
call memoryAlloc
movq %rax, -416(%rbp)
movq -416(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -480(%rbp)
vmovdqu %xmm0, -448(%rbp)
movss %xmm0, -432(%rbp)
xorb %al, %al
movb %al, -428(%rbp)
movb %al, -427(%rbp)
movq $-1, -440(%rbp)
vmovdqu -480(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -448(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -432(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -428(%rbp), %bx
movw %bx, (%rdi)
movq -416(%rbp), %rdi
addq $8, %rdi
movq -400(%rbp), %rax
addq $8, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -416(%rbp), %rdi
addq $138, %rdi
movb $10, (%rdi)
movq -416(%rbp), %rdi
addq $64, %rdi
movq -400(%rbp), %rdx
movq %rdx, (%rdi)
movq -416(%rbp), %rdi
addq $72, %rdi
movq -368(%rbp), %rdx
movq %rdx, (%rdi)
movq -416(%rbp), %rdi
addq $56, %rdi
movq -384(%rbp), %rdx
movq %rdx, (%rdi)
movq -416(%rbp), %rdx
movq %rdx, -144(%rbp)
.ELSE_NOT_5019:
.ELSE_NOT_4975:
.loc_27_1483:
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
jmp .ELSE_NOT_5110
.ELSE_NOT_4913:
.loc_27_1484:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1123(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5045
.loc_27_1485:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_5047
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movb (%rax), %al
movb %al, -641(%rbp)
movb -641(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_AND_5047
movb $1, %al
jmp .BOOL_AND_5047_END
.BOOL_AND_5047:
movb $0, %al
.BOOL_AND_5047_END:
cmpb $1, %al
je .BOOL_OR_5046_END
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_5056
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -720(%rbp)
movq -720(%rbp), %rax
movb (%rax), %al
movb %al, -721(%rbp)
movb -721(%rbp), %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_AND_5056
movb $1, %al
jmp .BOOL_AND_5056_END
.BOOL_AND_5056:
movb $0, %al
.BOOL_AND_5056_END:
cmpb $1, %al
jne .BOOL_OR_5046_NOT
.BOOL_OR_5046:
movb $1, %al
jmp .BOOL_OR_5046_END
.BOOL_OR_5046_NOT:
movb $0, %al
.BOOL_OR_5046_END:
cmpb $0, %al
je .IF_NOT_5064
.loc_27_1486:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_5066(%rip), %rsi
call throwError
.IF_NOT_5064:
.loc_27_1489:
movq -32(%rbp), %rbx
addq $2, %rbx
movq %rbx, -96(%rbp)
.loc_27_1491:
movq $139, %rdi
call memoryAlloc
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -384(%rbp)
vmovdqu %xmm0, -352(%rbp)
movss %xmm0, -336(%rbp)
xorb %al, %al
movb %al, -332(%rbp)
movb %al, -331(%rbp)
movq $-1, -344(%rbp)
vmovdqu -384(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -352(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -336(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -332(%rbp), %bx
movw %bx, (%rdi)
movq -320(%rbp), %rdi
addq $8, %rdi
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
.loc_27_1495:
pxor %xmm0, %xmm0
movq %xmm0, -400(%rbp)
.loc_27_1497:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_5071
.loc_27_1498:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rdx
movq %rdx, -400(%rbp)
jmp .ELSE_NOT_5076
.IF_NOT_5071:
.loc_27_1499:
.loc_27_1500:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -400(%rbp)
.ELSE_NOT_5076:
.loc_27_1503:
movq -400(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_5080
movb %al, %r11b
.FOR_LOOP_START_5080:
.loc_27_1504:
movq -400(%rbp), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -656(%rbp), %rdi
movq -672(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5087
.loc_27_1505:
jmp .FOR_NOT_5080
.IF_NOT_5087:
movq -400(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -400(%rbp)
movq -400(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_5080
.FOR_NOT_5080:
.loc_27_1509:
movq -400(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5089
.loc_27_1510:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rdx
movq %rdx, -416(%rbp)
.loc_27_1511:
movq -144(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_5093
.loc_27_1512:
movq -144(%rbp), %rax
addq $56, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -416(%rbp)
.IF_NOT_5093:
.loc_27_1516:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
leaq parserCtx(%rip), %rdi
movq -416(%rbp), %rsi
movq %rax, %rdx
call parserContext.findMethod
movq %rax, -432(%rbp)
.loc_27_1517:
movq -432(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5098
.loc_27_1518:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5100(%rip), %rsi
call throwError
.IF_NOT_5098:
.loc_27_1521:
movq -320(%rbp), %rdi
addq $138, %rdi
movb $3, (%rdi)
.loc_27_1522:
movq -320(%rbp), %rdi
addq $80, %rdi
movq -432(%rbp), %rax
movq (%rax), %rsi
call asmSymbolValue
.loc_27_1523:
movq -320(%rbp), %rdi
addq $80, %rdi
movq %rdi, %rdi
addq $32, %rdi
movq $-1, (%rdi)
.loc_27_1524:
movq -320(%rbp), %rdi
addq $80, %rdi
movq %rdi, %rdi
addq $8, %rdi
movq $8, (%rdi)
.loc_27_1525:
movq $139, %rdi
call memoryAlloc
movq %rax, -448(%rbp)
movq -448(%rbp), %rdi
addq $80, %rdi
movq %rdi, %r11
pxor %xmm0, %xmm0
vmovdqu %ymm0, -512(%rbp)
vmovdqu %xmm0, -480(%rbp)
movss %xmm0, -464(%rbp)
xorb %al, %al
movb %al, -460(%rbp)
movb %al, -459(%rbp)
movq $-1, -472(%rbp)
movq %r11, %rdi
vmovdqu -512(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -480(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -464(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -460(%rbp), %bx
movw %bx, (%rdi)
movq -448(%rbp), %rdi
addq $138, %rdi
movb $13, (%rdi)
movq -448(%rbp), %rdi
addq $64, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
movq -448(%rbp), %rdi
addq $72, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
movq -432(%rbp), %rax
addq $8, %rax
movq %rax, %r10
movq -448(%rbp), %rdi
addq $56, %rdi
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -448(%rbp), %rdi
addq $8, %rdi
movq %rdi, %r9
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %r9, %rdi
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -448(%rbp), %rdx
movq %rdx, -144(%rbp)
jmp .ELSE_NOT_5106
.IF_NOT_5089:
.loc_27_1533:
.loc_27_1534:
movq -320(%rbp), %rdi
addq $56, %rdi
movq -400(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1535:
movq -144(%rbp), %rdx
movq %rdx, -416(%rbp)
.loc_27_1536:
movq $139, %rdi
call memoryAlloc
movq %rax, -432(%rbp)
movq -432(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -496(%rbp)
vmovdqu %xmm0, -464(%rbp)
movss %xmm0, -448(%rbp)
xorb %al, %al
movb %al, -444(%rbp)
movb %al, -443(%rbp)
movq $-1, -456(%rbp)
vmovdqu -496(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -464(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -448(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -444(%rbp), %bx
movw %bx, (%rdi)
movq -432(%rbp), %rdi
addq $138, %rdi
movb $13, (%rdi)
movq -432(%rbp), %rdi
addq $64, %rdi
movq -416(%rbp), %rdx
movq %rdx, (%rdi)
movq -432(%rbp), %rdi
addq $72, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
movq -320(%rbp), %rax
addq $56, %rax
movq -432(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -432(%rbp), %rdi
addq $8, %rdi
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -432(%rbp), %rdx
movq %rdx, -144(%rbp)
.ELSE_NOT_5106:
.loc_27_1546:
movq -96(%rbp), %rdx
movq %rdx, -32(%rbp)
jmp .ELSE_NOT_5110
.ELSE_NOT_5045:
.loc_27_1547:
.loc_27_1548:
jmp .FOR_NOT_4706
.ELSE_NOT_5110:
jmp .FOR_LOOP_START_4706
.FOR_NOT_4706:
.loc_27_1557:
movq -144(%rbp), %rdx
movq %rdx, -320(%rbp)
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, -312(%rbp)
movq -320(%rbp), %rax
movq -312(%rbp), %rdx
leave
ret
.IF_NOT_4337:
.loc_27_1564:
.FOR_LOOP_START_5111:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_5111
movb %al, %r11b
.loc_27_1565:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5113_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1020(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5113_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5113_NOT
.BOOL_OR_5113:
movb $1, %al
jmp .BOOL_OR_5113_END
.BOOL_OR_5113_NOT:
movb $0, %al
.BOOL_OR_5113_END:
cmpb $0, %al
je .IF_NOT_5120
.loc_27_1566:
movq -112(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5122
.loc_27_1567:
movq -96(%rbp), %rdx
movq %rdx, -128(%rbp)
.IF_NOT_5122:
.loc_27_1569:
addq $1, -112(%rbp)
jmp .ELSE_NOT_5130
.IF_NOT_5120:
.loc_27_1570:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1000(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5123_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1038(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5123_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5123_NOT
.BOOL_OR_5123:
movb $1, %al
jmp .BOOL_OR_5123_END
.BOOL_OR_5123_NOT:
movb $0, %al
.BOOL_OR_5123_END:
cmpb $0, %al
je .ELSE_NOT_5130
.loc_27_1571:
subq $1, -112(%rbp)
.loc_27_1572:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_5111
.ELSE_NOT_5130:
.loc_27_1575:
movq -112(%rbp), %rdx
cmpq $0, %rdx
jle .IF_NOT_5132
.loc_27_1576:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_5111
.IF_NOT_5132:
.loc_27_1579:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5135
.loc_27_1580:
jmp .FOR_NOT_5111
.IF_NOT_5135:
.loc_27_1583:
movq -32(%rbp), %rax
cmpq -96(%rbp), %rax
jnb .BOOL_AND_5136
movq -80(%rbp), %rdx
cmpq $3, %rdx
jne .BOOL_AND_5136
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .BOOL_OR_5139
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $1, %rdx
jne .BOOL_OR_5139_NOT
.BOOL_OR_5139:
movb $1, %al
jmp .BOOL_OR_5139_END
.BOOL_OR_5139_NOT:
movb $0, %al
.BOOL_OR_5139_END:
cmpb $0, %al
je .BOOL_AND_5136
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
cmpb $45, %dl
jne .BOOL_AND_5136
movq -96(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $12, %rdx
je .BOOL_AND_5136
movq -96(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdx
cmpq $10, %rdx
je .BOOL_AND_5136
movb $1, %al
jmp .BOOL_AND_5136_END
.BOOL_AND_5136:
movb $0, %al
.BOOL_AND_5136_END:
cmpb $0, %al
je .IF_NOT_5150
.loc_27_1584:
movq -96(%rbp), %rbx
addq $-1, %rbx
movq %rbx, -640(%rbp)
movq -80(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq -640(%rbp), %rsi
movq -96(%rbp), %rdx
movq -32(%rbp), %rcx
movq %rbx, %r8
call consumeValue
movq %rax, -288(%rbp)
movq %rdx, -280(%rbp)
.loc_27_1585:
movq -288(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_5154
.loc_27_1587:
movq $139, %rdi
call memoryAlloc
movq %rax, -304(%rbp)
movq -304(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -368(%rbp)
vmovdqu %xmm0, -336(%rbp)
movss %xmm0, -320(%rbp)
xorb %al, %al
movb %al, -316(%rbp)
movb %al, -315(%rbp)
movq $-1, -328(%rbp)
vmovdqu -368(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -336(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -320(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -316(%rbp), %bx
movw %bx, (%rdi)
movq -304(%rbp), %rdi
addq $8, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -416(%rbp)
movq %xmm0, -384(%rbp)
xorb %al, %al
movb %al, -376(%rbp)
movq $1, -384(%rbp)
movq $1, -392(%rbp)
movq $0, -400(%rbp)
movq $-1, -408(%rbp)
leaq .VAR_388(%rip), %rdx
movq %rdx, -416(%rbp)
vmovdqu -416(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -384(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -376(%rbp), %bl
movb %bl, (%rdi)
movq -304(%rbp), %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
movq -304(%rbp), %rdi
addq $138, %rdi
movb $1, (%rdi)
movq -304(%rbp), %rdi
addq $64, %rdi
movq -288(%rbp), %rdx
movq %rdx, (%rdi)
movq -304(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_1592:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -464(%rbp)
movq %xmm0, -432(%rbp)
xorb %al, %al
movb %al, -424(%rbp)
movq $1, -432(%rbp)
movq $1, -440(%rbp)
movq $0, -448(%rbp)
movq $-1, -456(%rbp)
leaq .VAR_1879(%rip), %rdx
movq %rdx, -464(%rbp)
movq -144(%rbp), %rdi
addq $8, %rdi
vmovdqu -464(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
movq -432(%rbp), %xmm1
movq %xmm1, (%rdi)
addq $8, %rdi
movb -424(%rbp), %bl
movb %bl, (%rdi)
.loc_27_1595:
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq -80(%rbp), %r8
call consumeValue
movq %rax, -480(%rbp)
movq %rdx, -472(%rbp)
.loc_27_1596:
movq -480(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5160
.loc_27_1597:
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5162(%rip), %rsi
call throwError
.IF_NOT_5160:
.loc_27_1599:
movq -144(%rbp), %rdi
addq $72, %rdi
movq -480(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1600:
movq -472(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1602:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -688(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rdi
movq -688(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5169
.loc_27_1603:
movq -144(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_5172(%rip), %rsi
call throwError
.IF_NOT_5169:
.loc_27_1606:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
cmpq %r8, %rax
jnb .IF_NOT_5181
.loc_27_1607:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq -144(%rbp), %rdi
addq $56, %rdi
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_5184
.IF_NOT_5181:
.loc_27_1608:
.loc_27_1609:
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq -144(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_5184:
.loc_27_1612:
movq -144(%rbp), %rdx
movq %rdx, -496(%rbp)
movq -96(%rbp), %rdx
movq %rdx, -488(%rbp)
movq -496(%rbp), %rax
movq -488(%rbp), %rdx
leave
ret
.IF_NOT_5154:
.IF_NOT_5150:
.loc_27_1616:
movq -32(%rbp), %rax
cmpq -96(%rbp), %rax
jnb .BOOL_AND_5187
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_5187
movb $1, %al
jmp .BOOL_AND_5187_END
.BOOL_AND_5187:
movb $0, %al
.BOOL_AND_5187_END:
cmpb $0, %al
je .IF_NOT_5191
.loc_27_1617:
movq -80(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_AND_5193
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_1534(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5193
movb $1, %al
jmp .BOOL_AND_5193_END
.BOOL_AND_5193:
movb $0, %al
.BOOL_AND_5193_END:
cmpb $1, %al
je .BOOL_OR_5192_END
movq -80(%rbp), %rdx
cmpq $1, %rdx
jne .BOOL_AND_5197
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1593(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5197
movb $1, %al
jmp .BOOL_AND_5197_END
.BOOL_AND_5197:
movb $0, %al
.BOOL_AND_5197_END:
cmpb $1, %al
je .BOOL_OR_5192_END
movq -80(%rbp), %rdx
cmpq $2, %rdx
jne .BOOL_AND_5201
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_1901(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5203_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rdi
leaq .VAR_1913(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5203_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rdi
leaq .VAR_1919(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5203_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -720(%rbp)
movq -720(%rbp), %rdi
leaq .VAR_1916(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5203_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -736(%rbp)
movq -736(%rbp), %rdi
leaq .VAR_1850(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5203_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -752(%rbp)
movq -752(%rbp), %rdi
leaq .VAR_1852(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5203_NOT
.BOOL_OR_5203:
movb $1, %al
jmp .BOOL_OR_5203_END
.BOOL_OR_5203_NOT:
movb $0, %al
.BOOL_OR_5203_END:
cmpb $0, %al
je .BOOL_AND_5201
movb $1, %al
jmp .BOOL_AND_5201_END
.BOOL_AND_5201:
movb $0, %al
.BOOL_AND_5201_END:
cmpb $1, %al
je .BOOL_OR_5192_END
movq -80(%rbp), %rdx
cmpq $3, %rdx
jne .BOOL_AND_5216
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -768(%rbp)
movq -768(%rbp), %rdi
leaq .VAR_1855(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5218_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -784(%rbp)
movq -784(%rbp), %rdi
leaq .VAR_1879(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5218_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -800(%rbp)
movq -800(%rbp), %rdi
leaq .VAR_1875(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5218_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -816(%rbp)
movq -816(%rbp), %rdi
leaq .VAR_1886(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5218_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -832(%rbp)
movq -832(%rbp), %rdi
leaq .VAR_1888(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5218_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -848(%rbp)
movq -848(%rbp), %rdi
leaq .VAR_1890(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5218_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -864(%rbp)
movq -864(%rbp), %rdi
leaq .VAR_1882(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5218_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -880(%rbp)
movq -880(%rbp), %rdi
leaq .VAR_1884(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5218_NOT
.BOOL_OR_5218:
movb $1, %al
jmp .BOOL_OR_5218_END
.BOOL_OR_5218_NOT:
movb $0, %al
.BOOL_OR_5218_END:
cmpb $0, %al
je .BOOL_AND_5216
movb $1, %al
jmp .BOOL_AND_5216_END
.BOOL_AND_5216:
movb $0, %al
.BOOL_AND_5216_END:
cmpb $1, %al
je .BOOL_OR_5192_END
movq -80(%rbp), %rdx
cmpq $4, %rdx
jne .BOOL_AND_5235
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -896(%rbp)
movq -896(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5237_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -912(%rbp)
movq -912(%rbp), %rdi
leaq .VAR_1864(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5237_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -928(%rbp)
movq -928(%rbp), %rdi
leaq .VAR_1868(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5237_NOT
.BOOL_OR_5237:
movb $1, %al
jmp .BOOL_OR_5237_END
.BOOL_OR_5237_NOT:
movb $0, %al
.BOOL_OR_5237_END:
cmpb $0, %al
je .BOOL_AND_5235
movb $1, %al
jmp .BOOL_AND_5235_END
.BOOL_AND_5235:
movb $0, %al
.BOOL_AND_5235_END:
cmpb $1, %al
jne .BOOL_OR_5192_NOT
.BOOL_OR_5192:
movb $1, %al
jmp .BOOL_OR_5192_END
.BOOL_OR_5192_NOT:
movb $0, %al
.BOOL_OR_5192_END:
cmpb $0, %al
je .IF_NOT_5244
.loc_27_1618:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5245
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, -656(%rbp)
movq -656(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .BOOL_AND_5245
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5245
movb $1, %al
jmp .BOOL_AND_5245_END
.BOOL_AND_5245:
movb $0, %al
.BOOL_AND_5245_END:
cmpb $0, %al
je .IF_NOT_5252
.loc_27_1619:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_5111
.IF_NOT_5252:
.loc_27_1622:
movq $139, %rdi
call memoryAlloc
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -336(%rbp)
vmovdqu %xmm0, -304(%rbp)
movss %xmm0, -288(%rbp)
xorb %al, %al
movb %al, -284(%rbp)
movb %al, -283(%rbp)
movq $-1, -296(%rbp)
vmovdqu -336(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -304(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -288(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -284(%rbp), %bx
movw %bx, (%rdi)
movq -272(%rbp), %rdi
addq $8, %rdi
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -272(%rbp), %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
movq -272(%rbp), %rdi
addq $138, %rdi
movb $1, (%rdi)
movq -272(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_1627:
movq -96(%rbp), %rbx
addq $-1, %rbx
movq %rbx, -640(%rbp)
movq -80(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq -640(%rbp), %rsi
movq -96(%rbp), %rdx
movq -32(%rbp), %rcx
movq %rbx, %r8
call consumeValue
movq %rax, -352(%rbp)
movq %rdx, -344(%rbp)
.loc_27_1628:
movq -144(%rbp), %rdi
addq $64, %rdi
movq -352(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1630:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_5260
.loc_27_1631:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5261_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1886(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5261_NOT
.BOOL_OR_5261:
movb $1, %al
jmp .BOOL_OR_5261_END
.BOOL_OR_5261_NOT:
movb $0, %al
.BOOL_OR_5261_END:
cmpb $0, %al
je .IF_NOT_5266
.loc_27_1633:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_5111
.IF_NOT_5266:
.loc_27_1635:
movq -96(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rdi
leaq .VAR_5268(%rip), %rsi
call throwError
jmp .ELSE_NOT_5279
.IF_NOT_5260:
.loc_27_1636:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $138, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movb (%rax), %al
movb %al, -657(%rbp)
movb -657(%rbp), %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .BOOL_AND_5269
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5274_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rdi
leaq .VAR_1886(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5274_NOT
.BOOL_OR_5274:
movb $1, %al
jmp .BOOL_OR_5274_END
.BOOL_OR_5274_NOT:
movb $0, %al
.BOOL_OR_5274_END:
cmpb $0, %al
je .BOOL_AND_5269
movb $1, %al
jmp .BOOL_AND_5269_END
.BOOL_AND_5269:
movb $0, %al
.BOOL_AND_5269_END:
cmpb $0, %al
je .ELSE_NOT_5279
.loc_27_1637:
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
.loc_27_1638:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_5111
.ELSE_NOT_5279:
.loc_27_1641:
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -640(%rbp)
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -640(%rbp), %rdi
movq -656(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5281
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rdi
leaq .VAR_1879(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5284_END
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rdi
leaq .VAR_1875(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5284_NOT
.BOOL_OR_5284:
movb $1, %al
jmp .BOOL_OR_5284_END
.BOOL_OR_5284_NOT:
movb $0, %al
.BOOL_OR_5284_END:
cmpb $0, %al
je .BOOL_AND_5281
movb $1, %al
jmp .BOOL_AND_5281_END
.BOOL_AND_5281:
movb $0, %al
.BOOL_AND_5281_END:
cmpb $0, %al
je .IF_NOT_5289
.loc_27_1642:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $1, %rdx
je .BOOL_AND_5290
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movb (%rax), %al
movb %al, -673(%rbp)
movb -673(%rbp), %dl
movzbq %dl, %rdx
cmpq $2, %rdx
je .BOOL_AND_5290
movb $1, %al
jmp .BOOL_AND_5290_END
.BOOL_AND_5290:
movb $0, %al
.BOOL_AND_5290_END:
cmpb $0, %al
je .IF_NOT_5301
.loc_27_1643:
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_5304(%rip), %rsi
call throwError
.IF_NOT_5301:
.loc_27_1645:
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq -144(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_1646:
movq -144(%rbp), %rdi
addq $136, %rdi
movb $1, (%rdi)
.loc_27_1647:
addq $1, -96(%rbp)
jmp .ELSE_NOT_5307
.IF_NOT_5289:
.loc_27_1648:
.loc_27_1649:
movq -96(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq -80(%rbp), %r8
call consumeValue
movq %rax, -368(%rbp)
movq %rdx, -360(%rbp)
.loc_27_1650:
movq -368(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5310
.loc_27_1651:
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5162(%rip), %rsi
call throwError
.IF_NOT_5310:
.loc_27_1653:
movq -144(%rbp), %rdi
addq $72, %rdi
movq -368(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1654:
movq -360(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1656:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1855(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5316
.loc_27_1657:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $6, %rdx
je .IF_NOT_5322
.loc_27_1658:
movq -144(%rbp), %rax
addq $72, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_5325(%rip), %rsi
call throwError
.IF_NOT_5322:
.loc_27_1661:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rax
movq (%rax), %rax
addq $24, %rax
movq %rax, -704(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rdi
movq -704(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5333
.loc_27_1662:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, -640(%rbp)
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -672(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rdi
movq -672(%rbp), %rax
movq (%rax), %rsi
call throwTypeError
.IF_NOT_5333:
jmp .ELSE_NOT_5343
.IF_NOT_5316:
.loc_27_1664:
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -688(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rdi
movq -688(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .ELSE_NOT_5343
.loc_27_1665:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, -640(%rbp)
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rdi
movq -656(%rbp), %rax
movq (%rax), %rsi
call throwTypeError
.ELSE_NOT_5343:
.loc_27_1668:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rdi
leaq .VAR_1534(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5347_END
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
movq %rax, -688(%rbp)
movq -688(%rbp), %rdi
leaq .VAR_1593(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5347_END
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -704(%rbp)
movq -704(%rbp), %rax
movq (%rax), %rax
movq %rax, -720(%rbp)
movq -720(%rbp), %rdi
leaq .VAR_1901(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5347_END
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -736(%rbp)
movq -736(%rbp), %rax
movq (%rax), %rax
movq %rax, -752(%rbp)
movq -752(%rbp), %rdi
leaq .VAR_1913(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5347_END
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -768(%rbp)
movq -768(%rbp), %rax
movq (%rax), %rax
movq %rax, -784(%rbp)
movq -784(%rbp), %rdi
leaq .VAR_1916(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5347_END
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -800(%rbp)
movq -800(%rbp), %rax
movq (%rax), %rax
movq %rax, -816(%rbp)
movq -816(%rbp), %rdi
leaq .VAR_1919(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5347_END
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -832(%rbp)
movq -832(%rbp), %rax
movq (%rax), %rax
movq %rax, -848(%rbp)
movq -848(%rbp), %rdi
leaq .VAR_1850(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5347_END
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -864(%rbp)
movq -864(%rbp), %rax
movq (%rax), %rax
movq %rax, -880(%rbp)
movq -880(%rbp), %rdi
leaq .VAR_1855(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_5347_END
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -896(%rbp)
movq -896(%rbp), %rax
movq (%rax), %rax
movq %rax, -912(%rbp)
movq -912(%rbp), %rdi
leaq .VAR_1852(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_5347_NOT
.BOOL_OR_5347:
movb $1, %al
jmp .BOOL_OR_5347_END
.BOOL_OR_5347_NOT:
movb $0, %al
.BOOL_OR_5347_END:
cmpb $0, %al
je .IF_NOT_5375
.loc_27_1669:
movq $67, %rdi
call memoryAlloc
movq %rax, -384(%rbp)
movq -384(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -384(%rbp), %rdi
addq $64, %rdi
movb $0, (%rdi)
movq -384(%rbp), %rdi
addq $8, %rdi
movq $1, (%rdi)
movq -144(%rbp), %rdi
addq $56, %rdi
movq -384(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_5376
.IF_NOT_5375:
.loc_27_1673:
.loc_27_1674:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -640(%rbp)
movq -640(%rbp), %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -656(%rbp)
movq -656(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -672(%rbp)
movq -672(%rbp), %rax
movq (%rax), %rax
cmpq %r8, %rax
jnb .IF_NOT_5385
.loc_27_1675:
movq -144(%rbp), %rax
addq $72, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r10
movq -144(%rbp), %rdi
addq $56, %rdi
movq %r10, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_5388
.IF_NOT_5385:
.loc_27_1676:
.loc_27_1677:
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $56, %rax
movq -144(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_5388:
.ELSE_NOT_5376:
.ELSE_NOT_5307:
.loc_27_1682:
movq -144(%rbp), %rdx
movq %rdx, -368(%rbp)
movq -96(%rbp), %rdx
movq %rdx, -360(%rbp)
movq -368(%rbp), %rax
movq -360(%rbp), %rdx
leave
ret
.IF_NOT_5244:
.IF_NOT_5191:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_5111
.FOR_NOT_5111:
.loc_27_1688:
movq -80(%rbp), %rdx
cmpq $5, %rdx
jne .IF_NOT_5392
.loc_27_1689:
movq $0, -288(%rbp)
movq -32(%rbp), %rdx
movq %rdx, -280(%rbp)
movq -288(%rbp), %rax
movq -280(%rbp), %rdx
leave
ret
.IF_NOT_5392:
.loc_27_1692:
movq -80(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq %rbx, %r8
call consumeValue
movq %rax, -288(%rbp)
movq %rdx, -280(%rbp)
movq -288(%rbp), %rax
movq -280(%rbp), %rdx
leave
ret
.global .consumeValue_end
.consumeValue_end:
.global parseHashDirective
parseHashDirective:
pushq %rbp
movq %rsp, %rbp
subq $384, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_1698:
movq -48(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5396
.loc_27_1699:
movq -32(%rbp), %rdx
movq %rdx, -64(%rbp)
.loc_27_1700:
movq -64(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_5397
movb %al, %r11b
.FOR_LOOP_START_5397:
.loc_27_1702:
movq $0, -80(%rbp)
.FOR_LOOP_START_5400:
movq BAH_boolean_hashes(%rip), %rdi
call __bah_arrayLength
cmpq -80(%rbp), %rax
jle .FOR_NOT_5400
movb %al, %r11b
.loc_27_1703:
movq -80(%rbp), %rbx
imulq $9, %rbx
movq BAH_boolean_hashes(%rip), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -288(%rbp)
movq -272(%rbp), %rdi
movq -288(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5404
.loc_27_1704:
jmp .FOR_NOT_5400
.IF_NOT_5404:
addq $1, -80(%rbp)
jmp .FOR_LOOP_START_5400
.FOR_NOT_5400:
.loc_27_1709:
movq BAH_boolean_hashes(%rip), %rdi
call __bah_arrayLength
cmpq -80(%rbp), %rax
jne .IF_NOT_5406
.loc_27_1710:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5408(%rip), %rsi
call throwError
.IF_NOT_5406:
.loc_27_1713:
movb $1, -81(%rbp)
.loc_27_1715:
movq -64(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5410(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5411
.loc_27_1716:
movb $0, -81(%rbp)
.loc_27_1717:
addq $1, -64(%rbp)
.IF_NOT_5411:
.loc_27_1720:
movq -80(%rbp), %rbx
imulq $9, %rbx
movq BAH_boolean_hashes(%rip), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb -81(%rbp), %dl
je .IF_NOT_5414
.loc_27_1721:
leave
ret
.IF_NOT_5414:
.loc_27_1724:
addq $1, -64(%rbp)
.loc_27_1725:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5417
.loc_27_1726:
jmp .FOR_NOT_5397
.IF_NOT_5417:
.loc_27_1729:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_5421
.loc_27_1730:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5423(%rip), %rsi
call throwError
.IF_NOT_5421:
addq $1, -64(%rbp)
movq -64(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_5397
.FOR_NOT_5397:
.loc_27_1734:
movq -64(%rbp), %rbx
addq $1, %rbx
movq %rbx, -272(%rbp)
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -272(%rbp), %rsi
movq %rbx, %rdx
call parseLines
.loc_27_1735:
leave
ret
.IF_NOT_5396:
.loc_27_1739:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq $0, %rax
cmpq %r11, %rax
jnb .IF_NOT_5428
.loc_27_1740:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5430(%rip), %rsi
call throwError
.IF_NOT_5428:
.loc_27_1743:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5432(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5433
.loc_27_1744:
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, -64(%rbp)
movq -64(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_5434
movb %al, %r11b
.FOR_LOOP_START_5434:
.loc_27_1745:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $5, %rdx
je .IF_NOT_5439
.loc_27_1746:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5441(%rip), %rsi
call throwError
.IF_NOT_5439:
.loc_27_1749:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -288(%rbp)
movq -288(%rbp), %rdi
call __bah_strlenSTR
movq %rax, -304(%rbp)
movq -304(%rbp), %rbx
addq $-1, %rbx
movq %rbx, -320(%rbp)
movq -272(%rbp), %rdi
movq $1, %rsi
movq -320(%rbp), %rdx
call strSubstitute
movq %rax, -336(%rbp)
leaq parserCtx(%rip), %rdi
addq $48, %rdi
movq (%rdi), %rax
movq %rax, -352(%rbp)
leaq parserCtx(%rip), %rax
addq $48, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
call __bah_arrayLength
movq %rax, -384(%rbp)
movq -352(%rbp), %rdi
movq -384(%rbp), %rsi
call __Bah_realocate_arr
movq -352(%rbp), %rdi
movq -384(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -336(%rbp), %rdx
movq %rdx, (%rdi)
addq $1, -64(%rbp)
movq -64(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_5434
.FOR_NOT_5434:
jmp .ELSE_NOT_5597
.IF_NOT_5433:
.loc_27_1752:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5451(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5452
.loc_27_1753:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $3, %rdx
jnb .IF_NOT_5455
.loc_27_1754:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5457(%rip), %rsi
call throwError
.IF_NOT_5455:
.loc_27_1757:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5460
.loc_27_1758:
movq -32(%rbp), %rbx
addq $2, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $1, %rcx
call consumeType
movq %rax, -64(%rbp)
movq %rdx, -56(%rbp)
.loc_27_1759:
movq -64(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_1760:
movq -56(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1762:
movq -80(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5463
.loc_27_1763:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5465(%rip), %rsi
call throwError
.IF_NOT_5463:
.loc_27_1766:
movq $48, %rdi
call memoryAlloc
movq %rax, -112(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -128(%rbp)
movq $8, 24(%rax)
movq -112(%rbp), %rdi
addq $32, %rdi
movq -128(%rbp), %rdx
movq %rdx, (%rdi)
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq -112(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -112(%rbp), %rdi
addq $8, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1772:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5468(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5466
movq -80(%rbp), %rdi
call bahType.toStr
movq %rax, -288(%rbp)
movq -288(%rbp), %rdi
leaq .VAR_5470(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_5466
movb $1, %al
jmp .BOOL_AND_5466_END
.BOOL_AND_5466:
movb $0, %al
.BOOL_AND_5466_END:
cmpb $0, %al
je .IF_NOT_5472
.loc_27_1773:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5474(%rip), %rsi
call throwError
.IF_NOT_5472:
.loc_27_1776:
leaq parserCtx(%rip), %rdi
movq -112(%rbp), %rsi
call parserContext.addFunc
.loc_27_1778:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
je .IF_NOT_5476
.loc_27_1779:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5478(%rip), %rsi
call throwError
.IF_NOT_5476:
jmp .ELSE_NOT_5479
.IF_NOT_5460:
.loc_27_1781:
.loc_27_1782:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
je .IF_NOT_5482
.loc_27_1783:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5484(%rip), %rsi
call throwError
.IF_NOT_5482:
.loc_27_1786:
movq -32(%rbp), %rbx
addq $2, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $0, %rcx
call consumeType
movq %rax, -64(%rbp)
movq %rdx, -56(%rbp)
.loc_27_1788:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5487
.loc_27_1789:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_3902(%rip), %rsi
call throwError
.IF_NOT_5487:
.loc_27_1792:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
leaq parserCtx(%rip), %rdi
movq -272(%rbp), %rsi
call parserContext.findType
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .IF_NOT_5493
.loc_27_1793:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5495(%rip), %rsi
call throwError
.IF_NOT_5493:
.loc_27_1796:
movq $67, %rdi
call memoryAlloc
movq %rax, -80(%rbp)
movq -80(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq -80(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -80(%rbp), %rdi
addq $64, %rdi
movb $11, (%rdi)
movq -64(%rbp), %rax
addq $8, %rax
movq -80(%rbp), %rdi
addq $8, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -80(%rbp), %rdi
addq $24, %rdi
movq -64(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1803:
leaq parserCtx(%rip), %rdi
movq -80(%rbp), %rsi
call parserContext.addType
.ELSE_NOT_5479:
jmp .ELSE_NOT_5597
.ELSE_NOT_5452:
.loc_27_1805:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5498(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5499
.loc_27_1806:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $2, %rdx
jne .BOOL_OR_5500
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $5, %rdx
je .BOOL_OR_5500_NOT
.BOOL_OR_5500:
movb $1, %al
jmp .BOOL_OR_5500_END
.BOOL_OR_5500_NOT:
movb $0, %al
.BOOL_OR_5500_END:
cmpb $0, %al
je .IF_NOT_5505
.loc_27_1807:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5507(%rip), %rsi
call throwError
.IF_NOT_5505:
.loc_27_1810:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_strlenSTR
movq %rax, %rbx
addq $-1, %rbx
movq -272(%rbp), %rdi
movq $1, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, -64(%rbp)
.loc_27_1812:
movq -64(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_1813:
movq -64(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
je .IF_NOT_5514
.loc_27_1814:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rax
movq %rax, %rdi
call absPath
movq %rax, -96(%rbp)
.loc_27_1815:
movq -96(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rbx
addq $-1, %rbx
movq %rbx, -112(%rbp)
movq -112(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_5517
movb %al, %r10b
.FOR_LOOP_START_5517:
.loc_27_1816:
movq -96(%rbp), %rax
addq $4, %rax
addq -112(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .IF_NOT_5522
.loc_27_1817:
jmp .FOR_NOT_5517
.IF_NOT_5522:
subq $1, -112(%rbp)
movq -112(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_5517
.FOR_NOT_5517:
.loc_27_1821:
movq -112(%rbp), %rbx
addq $1, %rbx
movq -96(%rbp), %rdi
movq $0, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, -96(%rbp)
.loc_27_1822:
movl $5, %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -272(%rbp)
call memoryAllocSTR_NZ
subq $5, -272(%rbp)
movq -272(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -288(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -304(%rbp), %rdx
movq -272(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -288(%rbp), %rdx
movq %rdx, -80(%rbp)
.IF_NOT_5514:
.loc_27_1825:
movq -80(%rbp), %rdi
call fileExists
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5529
.loc_27_1826:
leaq .VAR_394(%rip), %rax
movq %rax, -272(%rbp)
movl $5, %edi
movq -272(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -288(%rbp)
call memoryAllocSTR_NZ
subq $5, -288(%rbp)
movq -288(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -304(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -272(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -288(%rbp)
movq %rdx, -320(%rbp)
call memcpy
movq -320(%rbp), %rdx
movq -288(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -288(%rbp)
movq %rdx, -320(%rbp)
call memcpy
movq -304(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_1827:
movq -80(%rbp), %rdi
call fileExists
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5536
.loc_27_1828:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5538(%rip), %rsi
call throwError
.IF_NOT_5536:
.IF_NOT_5529:
.loc_27_1832:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_5539
.loc_27_1833:
leaq parserCtx(%rip), %rdi
addq $104, %rdi
movq (%rdi), %rax
movq %rax, -272(%rbp)
leaq parserCtx(%rip), %rax
addq $104, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_arrayLength
movq %rax, -288(%rbp)
movq -272(%rbp), %rdi
movq -288(%rbp), %rsi
call __Bah_realocate_arr
movq -272(%rbp), %rdi
movq -288(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.IF_NOT_5539:
.loc_27_1836:
movq -80(%rbp), %rdi
call includeFile
jmp .ELSE_NOT_5597
.ELSE_NOT_5499:
.loc_27_1838:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5544(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5545
.loc_27_1839:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $2, %rdx
jne .BOOL_OR_5546
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $5, %rdx
je .BOOL_OR_5546_NOT
.BOOL_OR_5546:
movb $1, %al
jmp .BOOL_OR_5546_END
.BOOL_OR_5546_NOT:
movb $0, %al
.BOOL_OR_5546_END:
cmpb $0, %al
je .IF_NOT_5551
.loc_27_1840:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5553(%rip), %rsi
call throwError
.IF_NOT_5551:
.loc_27_1843:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_strlenSTR
movq %rax, %rbx
addq $-1, %rbx
movq -272(%rbp), %rdi
movq $1, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, -64(%rbp)
.loc_27_1845:
movq -64(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_1846:
movq -64(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
je .IF_NOT_5560
.loc_27_1847:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rax
movq %rax, %rdi
call absPath
movq %rax, -96(%rbp)
.loc_27_1848:
movq -96(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rbx
addq $-1, %rbx
movq %rbx, -112(%rbp)
movq -112(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_5563
movb %al, %r10b
.FOR_LOOP_START_5563:
.loc_27_1849:
movq -96(%rbp), %rax
addq $4, %rax
addq -112(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .IF_NOT_5568
.loc_27_1850:
jmp .FOR_NOT_5563
.IF_NOT_5568:
subq $1, -112(%rbp)
movq -112(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_5563
.FOR_NOT_5563:
.loc_27_1854:
movq -112(%rbp), %rbx
addq $1, %rbx
movq -96(%rbp), %rdi
movq $0, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, -96(%rbp)
.loc_27_1855:
movl $5, %edi
movq -96(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -272(%rbp)
call memoryAllocSTR_NZ
subq $5, -272(%rbp)
movq -272(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -288(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -96(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -304(%rbp), %rdx
movq -272(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -272(%rbp)
movq %rdx, -304(%rbp)
call memcpy
movq -288(%rbp), %rdx
movq %rdx, -80(%rbp)
.IF_NOT_5560:
.loc_27_1859:
movq -80(%rbp), %rdi
call fileExists
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5575
.loc_27_1860:
leaq .VAR_394(%rip), %rax
movq %rax, -272(%rbp)
movl $5, %edi
movq -272(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -288(%rbp)
call memoryAllocSTR_NZ
subq $5, -288(%rbp)
movq -288(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -304(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -272(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -288(%rbp)
movq %rdx, -320(%rbp)
call memcpy
movq -320(%rbp), %rdx
movq -288(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -288(%rbp)
movq %rdx, -320(%rbp)
call memcpy
movq -304(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_1861:
movq -80(%rbp), %rdi
call fileExists
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5582
.loc_27_1862:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5538(%rip), %rsi
call throwError
.IF_NOT_5582:
.IF_NOT_5575:
.loc_27_1865:
movq -80(%rbp), %rdi
call absPath
movq %rax, -80(%rbp)
.loc_27_1867:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_5585
.loc_27_1868:
leaq parserCtx(%rip), %rdi
addq $104, %rdi
movq (%rdi), %rax
movq %rax, -272(%rbp)
leaq parserCtx(%rip), %rax
addq $104, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_arrayLength
movq %rax, -288(%rbp)
movq -272(%rbp), %rdi
movq -288(%rbp), %rsi
call __Bah_realocate_arr
movq -272(%rbp), %rdi
movq -288(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.IF_NOT_5585:
.loc_27_1871:
movq -80(%rbp), %rdi
call importFile
jmp .ELSE_NOT_5597
.ELSE_NOT_5545:
.loc_27_1873:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -272(%rbp)
movq -272(%rbp), %rdi
leaq .VAR_5590(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5591
.loc_27_1874:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_5592
.loc_27_1875:
leave
ret
.IF_NOT_5592:
.loc_27_1877:
leaq gen(%rip), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -256(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -224(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm3
vmovdqu %ymm3, -192(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm4
vmovdqu %ymm4, -160(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm5
vmovdqu %ymm5, -128(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm6
vmovdqu %ymm6, -96(%rbp)
addq $32, %rax
vmovdqu (%rax), %xmm6
vmovdqu %xmm6, -64(%rbp)
.loc_27_1878:
leaq initFnGen(%rip), %rax
leaq gen(%rip), %rdx
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rax
addq $32, %rdx
vmovdqu (%rax), %xmm6
vmovdqu %xmm6, (%rdx)
.loc_27_1879:
leaq gen(%rip), %rdi
addq $176, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1880:
leaq gen(%rip), %rdi
addq $184, %rdi
movq -72(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_1882:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
call parseLine
.loc_27_1884:
leaq gen(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq -248(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, -248(%rbp)
.loc_27_1885:
leaq gen(%rip), %rax
movq (%rax), %rax
movq -256(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, -256(%rbp)
.loc_27_1886:
leaq gen(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq -240(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, -240(%rbp)
.loc_27_1887:
leaq gen(%rip), %rdx
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rdx
vmovdqu -224(%rbp), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rdx
vmovdqu -192(%rbp), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rdx
vmovdqu -160(%rbp), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rdx
vmovdqu -128(%rbp), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rdx
vmovdqu -96(%rbp), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rdx
vmovdqu -64(%rbp), %xmm6
vmovdqu %xmm6, (%rdx)
jmp .ELSE_NOT_5597
.ELSE_NOT_5591:
.loc_27_1888:
.loc_27_1889:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5599(%rip), %rsi
call throwError
.ELSE_NOT_5597:
leave
ret
.global .parseHashDirective_end
.parseHashDirective_end:
.global parseReturn
parseReturn:
pushq %rbp
movq %rsp, %rbp
subq $256, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_1896:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_5602
.loc_27_1897:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5604(%rip), %rsi
call throwError
.IF_NOT_5602:
.loc_27_1900:
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_5607
.loc_27_1902:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $0, %rdx
je .IF_NOT_5613
.loc_27_1903:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -176(%rbp)
leaq .VAR_5615(%rip), %rax
movq %rax, -192(%rbp)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdi
call bahType.toStr
movq %rax, -208(%rbp)
movl $5, %edi
movq -192(%rbp), %rbx
addl (%rbx), %edi
movq -208(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -224(%rbp)
call memoryAllocSTR_NZ
subq $5, -224(%rbp)
movq -224(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -240(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -192(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -256(%rbp), %rdx
movq -224(%rbp), %rdi
addq %rdx, %rdi
movq -208(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -224(%rbp)
movq %rdx, -256(%rbp)
call memcpy
movq -176(%rbp), %rdi
movq -240(%rbp), %rsi
call throwError
.IF_NOT_5613:
.loc_27_1906:
leaq gen(%rip), %rdi
call asmContext.generateEarlyReturn
.loc_27_1907:
leave
ret
.IF_NOT_5607:
.loc_27_1910:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -64(%rbp)
movq %rdx, -56(%rbp)
.loc_27_1911:
movq -64(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_1912:
movq -80(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5625
.loc_27_1913:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5627(%rip), %rsi
call throwError
.IF_NOT_5625:
.loc_27_1916:
movq -56(%rbp), %rdx
cmpq -48(%rbp), %rdx
je .IF_NOT_5629
.loc_27_1917:
movq -56(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5631(%rip), %rsi
call throwError
.IF_NOT_5629:
.loc_27_1920:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $0, %rdx
jne .IF_NOT_5637
.loc_27_1921:
movq -80(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_5639(%rip), %rsi
call throwError
.IF_NOT_5637:
.loc_27_1924:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -176(%rbp)
movq -176(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -192(%rbp)
movq -192(%rbp), %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, -208(%rbp)
movq -80(%rbp), %rax
addq $56, %rax
movq %rax, -224(%rbp)
movq -208(%rbp), %rax
movq (%rax), %rdi
movq -224(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5646
.loc_27_1925:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
addq $40, %rax
movq -80(%rbp), %rdi
movq (%rax), %rsi
call throwTypeError
.IF_NOT_5646:
.loc_27_1928:
leaq parserCtx(%rip), %rdi
addq $120, %rdi
movq (%rdi), %rdi
addq $1, %rdi
movb $1, (%rdi)
.loc_27_1930:
leaq -144(%rbp), %rdi
movq -80(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
.loc_27_1932:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
addq $40, %rax
movq (%rax), %rdx
movq %rdx, -160(%rbp)
.loc_27_1933:
movq -160(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_5654
.loc_27_1935:
movq -160(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_5658
.loc_27_1936:
movq -160(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $0, %rdx
je .BOOL_AND_5659
movq -160(%rbp), %rax
addq $24, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, -176(%rbp)
movq -176(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -192(%rbp)
movq -192(%rbp), %rax
movb (%rax), %al
movb %al, -193(%rbp)
movb -193(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .BOOL_AND_5659
movb $1, %al
jmp .BOOL_AND_5659_END
.BOOL_AND_5659:
movb $0, %al
.BOOL_AND_5659_END:
cmpb $0, %al
je .IF_NOT_5669
.loc_27_1937:
movq -160(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $0, %rdx
je .IF_NOT_5675
.loc_27_1938:
movq -160(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -161(%rbp)
movb -161(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_5682
.loc_27_1939:
movb $1, -96(%rbp)
.IF_NOT_5682:
jmp .ELSE_NOT_5683
.IF_NOT_5675:
.loc_27_1941:
.loc_27_1942:
movb $1, -96(%rbp)
.ELSE_NOT_5683:
.IF_NOT_5669:
jmp .ELSE_NOT_5687
.IF_NOT_5658:
.loc_27_1945:
movq -160(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_5687
.loc_27_1946:
movb $1, -96(%rbp)
.ELSE_NOT_5687:
.IF_NOT_5654:
.loc_27_1950:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -144(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -112(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -96(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -92(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateReturn
addq $64, %rsp
leave
ret
.global .parseReturn_end
.parseReturn_end:
.global parseIf
parseIf:
pushq %rbp
movq %rsp, %rbp
subq $256, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_1955:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_5690
.loc_27_1956:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5692(%rip), %rsi
call throwError
.IF_NOT_5690:
.loc_27_1959:
movq $1, -64(%rbp)
.loc_27_1960:
movq -48(%rbp), %rbx
addq $-2, %rbx
movq %rbx, -80(%rbp)
.loc_27_1961:
movq -48(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1962:
movq -80(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_5693
movb %al, %r11b
.FOR_LOOP_START_5693:
.loc_27_1963:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5698
.loc_27_1964:
subq $1, -64(%rbp)
.loc_27_1965:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5700
.loc_27_1966:
movq -80(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_1967:
jmp .FOR_NOT_5693
.IF_NOT_5700:
jmp .ELSE_NOT_5703
.IF_NOT_5698:
.loc_27_1969:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5703
.loc_27_1970:
addq $1, -64(%rbp)
.ELSE_NOT_5703:
subq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_5693
.FOR_NOT_5693:
.loc_27_1976:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -96(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -112(%rbp)
movq %rdx, -104(%rbp)
.loc_27_1977:
movq -112(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5706
.loc_27_1978:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5708(%rip), %rsi
call throwError
.IF_NOT_5706:
.loc_27_1981:
leaq -176(%rbp), %rdi
movq -112(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -144(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -128(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -124(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateIf
addq $64, %rsp
.loc_27_1985:
movq $64, %rdi
call memoryAlloc
movq %rax, -192(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -208(%rbp)
movq $8, 24(%rax)
movq -192(%rbp), %rdi
addq $16, %rdi
movq -208(%rbp), %rdx
movq %rdx, (%rdi)
movq -192(%rbp), %rdi
movb $1, (%rdi)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq -192(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_1990:
leaq parserCtx(%rip), %rdi
movq -192(%rbp), %rsi
call parserContext.startScope
.loc_27_1992:
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, -224(%rbp)
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -224(%rbp), %rsi
movq %rbx, %rdx
call parseLines
.loc_27_1994:
leaq parserCtx(%rip), %rdi
call parserContext.endScope
.loc_27_1996:
leaq gen(%rip), %rdi
call asmContext.generateEndIf
.loc_27_1998:
movq -16(%rbp), %rdi
call __bah_arrayLength
cmpq %rax, -48(%rbp)
jnb .BOOL_AND_5712
movq -48(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -224(%rbp)
movq -224(%rbp), %rdi
leaq .VAR_5715(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5712
movb $1, %al
jmp .BOOL_AND_5712_END
.BOOL_AND_5712:
movb $0, %al
.BOOL_AND_5712_END:
cmpb $0, %al
je .IF_NOT_5716
.loc_27_1999:
leaq gen(%rip), %rax
addq $152, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_arrayLength
movq %rax, %rbx
subq $1, %rbx
movq %rbx, -224(%rbp)
leaq parserCtx(%rip), %rdi
addq $120, %rdi
movq (%rdi), %rdi
addq $16, %rdi
movq (%rdi), %rax
movq %rax, -240(%rbp)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, -256(%rbp)
movq -240(%rbp), %rdi
movq -256(%rbp), %rsi
call __Bah_realocate_arr
movq -240(%rbp), %rdi
movq -256(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -224(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2000:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rdx
addq $1, (%rdx)
jmp .ELSE_NOT_5724
.IF_NOT_5716:
.loc_27_2001:
.loc_27_2002:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdi
call clear
.loc_27_2003:
leaq parserCtx(%rip), %rdi
addq $120, %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq $0, (%rdi)
.ELSE_NOT_5724:
leave
ret
.global .parseIf_end
.parseIf_end:
.global parseElse
parseElse:
pushq %rbp
movq %rsp, %rbp
subq $320, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2010:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_5728
.loc_27_2011:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5692(%rip), %rsi
call throwError
.IF_NOT_5728:
.loc_27_2014:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
jne .IF_NOT_5734
.loc_27_2015:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5736(%rip), %rsi
call throwError
.IF_NOT_5734:
.loc_27_2018:
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, -64(%rbp)
.loc_27_2020:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, -240(%rbp)
movq $1, %rax
cmpq -240(%rbp), %rax
jnb .BOOL_AND_5737
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rdi
leaq .VAR_5741(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5737
movb $1, %al
jmp .BOOL_AND_5737_END
.BOOL_AND_5737:
movb $0, %al
.BOOL_AND_5737_END:
cmpb $0, %al
je .IF_NOT_5742
.loc_27_2021:
movq $1, -80(%rbp)
.loc_27_2022:
movq -48(%rbp), %rbx
addq $-2, %rbx
movq %rbx, -96(%rbp)
.loc_27_2023:
movq -96(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_5743
movb %al, %r11b
.FOR_LOOP_START_5743:
.loc_27_2024:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5748
.loc_27_2025:
subq $1, -80(%rbp)
.loc_27_2026:
movq -80(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5750
.loc_27_2027:
movq -96(%rbp), %rdx
movq %rdx, -64(%rbp)
.loc_27_2028:
jmp .FOR_NOT_5743
.IF_NOT_5750:
jmp .ELSE_NOT_5753
.IF_NOT_5748:
.loc_27_2030:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5753
.loc_27_2031:
addq $1, -80(%rbp)
.ELSE_NOT_5753:
subq $1, -96(%rbp)
movq -96(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_5743
.FOR_NOT_5743:
.loc_27_2035:
movq -32(%rbp), %rbx
addq $2, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -64(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -112(%rbp)
movq %rdx, -104(%rbp)
.loc_27_2036:
movq -112(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5756
.loc_27_2037:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5758(%rip), %rsi
call throwError
.IF_NOT_5756:
.loc_27_2040:
movq -16(%rbp), %rdi
call __bah_arrayLength
cmpq %rax, -48(%rbp)
jnb .BOOL_AND_5759
movq -48(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
leaq .VAR_5715(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_5759
movb $1, %al
jmp .BOOL_AND_5759_END
.BOOL_AND_5759:
movb $0, %al
.BOOL_AND_5759_END:
movb %al, -113(%rbp)
.loc_27_2041:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -128(%rbp)
.loc_27_2043:
cmpb $0, -113(%rbp)
je .IF_NOT_5764
.loc_27_2044:
movq $0, -128(%rbp)
.IF_NOT_5764:
.loc_27_2047:
leaq -192(%rbp), %rdi
movq -112(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $16, %rax
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq -128(%rbp), %rsi
movq (%rax), %rdx
call asmContext.generateElseIf
addq $64, %rsp
.loc_27_2049:
movq $64, %rdi
call memoryAlloc
movq %rax, -208(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -224(%rbp)
movq $8, 24(%rax)
movq -208(%rbp), %rdi
addq $16, %rdi
movq -224(%rbp), %rdx
movq %rdx, (%rdi)
movq -208(%rbp), %rdi
movb $1, (%rdi)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq -208(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_2054:
leaq parserCtx(%rip), %rdi
movq -208(%rbp), %rsi
call parserContext.startScope
.loc_27_2056:
movq -64(%rbp), %rbx
addq $1, %rbx
movq %rbx, -240(%rbp)
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -240(%rbp), %rsi
movq %rbx, %rdx
call parseLines
.loc_27_2058:
leaq parserCtx(%rip), %rdi
call parserContext.endScope
.loc_27_2060:
leaq gen(%rip), %rdi
call asmContext.generateEndElse
.loc_27_2062:
cmpb $0, -113(%rbp)
je .IF_NOT_5769
.loc_27_2063:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %rdx
addq $1, (%rdx)
.loc_27_2064:
leaq gen(%rip), %rax
addq $152, %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
call __bah_arrayLength
movq %rax, -256(%rbp)
movq -256(%rbp), %rbx
subq $1, %rbx
movq %rbx, -272(%rbp)
leaq parserCtx(%rip), %rdi
addq $120, %rdi
movq (%rdi), %rdi
addq $16, %rdi
movq (%rdi), %rax
movq %rax, -288(%rbp)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $16, %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rax
movq (%rax), %rdi
call __bah_arrayLength
movq %rax, -320(%rbp)
movq -288(%rbp), %rdi
movq -320(%rbp), %rsi
call __Bah_realocate_arr
movq -288(%rbp), %rdi
movq -320(%rbp), %rbx
salq $3, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -272(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_5777
.IF_NOT_5769:
.loc_27_2065:
.loc_27_2066:
leaq parserCtx(%rip), %rdi
addq $120, %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq $0, (%rdi)
.loc_27_2067:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $16, %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rax
movq (%rax), %rdi
call clear
.ELSE_NOT_5777:
jmp .ELSE_NOT_5779
.IF_NOT_5742:
.loc_27_2070:
.loc_27_2072:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -240(%rbp)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $16, %rax
movq %rax, -256(%rbp)
leaq gen(%rip), %rdi
movq -240(%rbp), %rax
movq (%rax), %rsi
movq -256(%rbp), %rax
movq (%rax), %rdx
call asmContext.generateElse
.loc_27_2074:
movq $64, %rdi
call memoryAlloc
movq %rax, -80(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -96(%rbp)
movq $8, 24(%rax)
movq -80(%rbp), %rdi
addq $16, %rdi
movq -96(%rbp), %rdx
movq %rdx, (%rdi)
movq -80(%rbp), %rdi
movb $1, (%rdi)
movq -80(%rbp), %rdi
addq $3, %rdi
movb $1, (%rdi)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq -80(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_2080:
leaq parserCtx(%rip), %rdi
movq -80(%rbp), %rsi
call parserContext.startScope
.loc_27_2082:
movq -64(%rbp), %rbx
addq $1, %rbx
movq %rbx, -240(%rbp)
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -240(%rbp), %rsi
movq %rbx, %rdx
call parseLines
.loc_27_2084:
leaq parserCtx(%rip), %rdi
call parserContext.endScope
.loc_27_2086:
leaq gen(%rip), %rdi
call asmContext.generateEndElse
.loc_27_2088:
leaq parserCtx(%rip), %rdi
addq $120, %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq $0, (%rdi)
.loc_27_2089:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $16, %rax
movq (%rax), %rdi
call clear
.ELSE_NOT_5779:
leave
ret
.global .parseElse_end
.parseElse_end:
.global parseFor
parseFor:
pushq %rbp
movq %rsp, %rbp
subq $416, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2096:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_5788
.loc_27_2097:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5692(%rip), %rsi
call throwError
.IF_NOT_5788:
.loc_27_2100:
movq $1, -64(%rbp)
.loc_27_2101:
movq -48(%rbp), %rbx
addq $-2, %rbx
movq %rbx, -80(%rbp)
.loc_27_2102:
movq -48(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_2103:
movq -80(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_5791
movb %al, %r11b
.FOR_LOOP_START_5791:
.loc_27_2104:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5796
.loc_27_2105:
subq $1, -64(%rbp)
.loc_27_2106:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5798
.loc_27_2107:
movq -80(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_2108:
jmp .FOR_NOT_5791
.IF_NOT_5798:
jmp .ELSE_NOT_5801
.IF_NOT_5796:
.loc_27_2110:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5801
.loc_27_2111:
addq $1, -64(%rbp)
.ELSE_NOT_5801:
subq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_5791
.FOR_NOT_5791:
.loc_27_2115:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -96(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -112(%rbp)
movq %rdx, -104(%rbp)
.loc_27_2116:
movq -112(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5804
.loc_27_2117:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5806(%rip), %rsi
call throwError
.IF_NOT_5804:
.loc_27_2120:
movq -112(%rbp), %rdx
movq %rdx, -128(%rbp)
.loc_27_2121:
movq -104(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_2123:
movq -112(%rbp), %rax
addq $56, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
movzbq %dl, %rdx
cmpq $0, %rdx
je .IF_NOT_5811
.loc_27_2124:
movq -128(%rbp), %rax
addq $8, %rax
movq %rax, -320(%rbp)
leaq .VAR_5813(%rip), %rax
movq %rax, -336(%rbp)
movq -128(%rbp), %rax
addq $56, %rax
movq (%rax), %rdi
call bahType.toStr
movq %rax, -352(%rbp)
leaq .VAR_1437(%rip), %rax
movq %rax, -368(%rbp)
movl $5, %edi
movq -336(%rbp), %rbx
addl (%rbx), %edi
movq -352(%rbp), %rbx
addl (%rbx), %edi
movq -368(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -384(%rbp)
call memoryAllocSTR_NZ
subq $5, -384(%rbp)
movq -384(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -400(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -336(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -384(%rbp)
movq %rdx, -416(%rbp)
call memcpy
movq -416(%rbp), %rdx
movq -384(%rbp), %rdi
addq %rdx, %rdi
movq -352(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -384(%rbp)
movq %rdx, -416(%rbp)
call memcpy
movq -416(%rbp), %rdx
movq -384(%rbp), %rdi
addq %rdx, %rdi
movq -368(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -384(%rbp)
movq %rdx, -416(%rbp)
call memcpy
movq -320(%rbp), %rdi
movq -400(%rbp), %rsi
call throwError
.IF_NOT_5811:
.loc_27_2127:
leaq gen(%rip), %rdi
call asmContext.generateFor
.loc_27_2128:
leaq gen(%rip), %rax
addq $152, %rax
movq (%rax), %rax
movq %rax, %rdi
call __bah_arrayLength
movq %rax, %rbx
addq $-1, %rbx
movq %rbx, -144(%rbp)
.loc_27_2130:
movb $0, -145(%rbp)
.loc_27_2131:
leaq gen(%rip), %rax
addq $136, %rax
cmpb $0, (%rax)
je .BOOL_AND_5824
movq -128(%rbp), %rdi
call isValueInexpensive
cmpb $1, %al
je .BOOL_OR_5825_END
movq -128(%rbp), %rax
addq $138, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
movb (%rax), %al
movb %al, -321(%rbp)
movb -321(%rbp), %dl
movzbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_AND_5826
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
cmpb $0, %al
je .BOOL_AND_5826
movq -128(%rbp), %rax
addq $72, %rax
movq %rax, -352(%rbp)
movq -352(%rbp), %rax
movq (%rax), %rdi
call isValueInexpensive
cmpb $0, %al
je .BOOL_AND_5826
movb $1, %al
jmp .BOOL_AND_5826_END
.BOOL_AND_5826:
movb $0, %al
.BOOL_AND_5826_END:
cmpb $1, %al
jne .BOOL_OR_5825_NOT
.BOOL_OR_5825:
movb $1, %al
jmp .BOOL_OR_5825_END
.BOOL_OR_5825_NOT:
movb $0, %al
.BOOL_OR_5825_END:
cmpb $0, %al
je .BOOL_AND_5824
movb $1, %al
jmp .BOOL_AND_5824_END
.BOOL_AND_5824:
movb $0, %al
.BOOL_AND_5824_END:
cmpb $0, %al
je .IF_NOT_5832
.loc_27_2132:
movb $1, -145(%rbp)
.loc_27_2133:
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, -160(%rbp)
.FOR_LOOP_START_5833:
movq -48(%rbp), %rbx
addq $-1, %rbx
cmpq %rbx, -160(%rbp)
jnb .FOR_NOT_5833
movb %al, %r11b
.loc_27_2134:
movq -160(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
leaq .VAR_5836(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5837
.loc_27_2135:
movb $0, -145(%rbp)
.loc_27_2136:
jmp .FOR_NOT_5833
.IF_NOT_5837:
addq $1, -160(%rbp)
jmp .FOR_LOOP_START_5833
.FOR_NOT_5833:
.IF_NOT_5832:
.loc_27_2141:
movb -145(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5839
.loc_27_2142:
movq $-1, -144(%rbp)
.IF_NOT_5839:
.loc_27_2145:
leaq -208(%rbp), %rdi
movq -128(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -160(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -156(%rbp), %bx
movw %bx, (%r10)
movq -144(%rbp), %rsi
call asmContext.generateForCond
addq $64, %rsp
.loc_27_2147:
movq $64, %rdi
call memoryAlloc
movq %rax, -224(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -240(%rbp)
movq $8, 24(%rax)
movq -224(%rbp), %rdi
addq $16, %rdi
movq -240(%rbp), %rdx
movq %rdx, (%rdi)
movq -224(%rbp), %rdi
movb $1, (%rdi)
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq -224(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_2152:
leaq parserCtx(%rip), %rdi
movq -224(%rbp), %rsi
call parserContext.startScope
.loc_27_2154:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
leaq .VAR_1029(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5843
.loc_27_2155:
movq -80(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -96(%rbp), %rdx
call parseLine
.IF_NOT_5843:
.loc_27_2158:
cmpb $0, -145(%rbp)
je .IF_NOT_5845
.loc_27_2159:
leaq -304(%rbp), %rdi
movq -128(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -256(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -252(%rbp), %bx
movw %bx, (%r10)
call asmContext.generateForOptimizedCond
addq $64, %rsp
.IF_NOT_5845:
.loc_27_2162:
leaq gen(%rip), %rdi
call asmContext.generateForIncr
.loc_27_2165:
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, -320(%rbp)
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -320(%rbp), %rsi
movq %rbx, %rdx
call parseLines
.loc_27_2167:
leaq gen(%rip), %rdi
movb -145(%rbp), %sil
movsbl %sil, %esi
call asmContext.generateForEnd
.loc_27_2169:
leaq parserCtx(%rip), %rdi
call parserContext.endScope
leave
ret
.global .parseFor_end
.parseFor_end:
.global parseStruct
parseStruct:
pushq %rbp
movq %rsp, %rbp
subq $448, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2176:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .IF_NOT_5850
.loc_27_2177:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5852(%rip), %rsi
call throwError
.IF_NOT_5850:
.loc_27_2180:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $4, %rdx
jnb .IF_NOT_5855
.loc_27_2181:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5857(%rip), %rsi
call throwError
.IF_NOT_5855:
.loc_27_2184:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
je .IF_NOT_5860
.loc_27_2185:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5862(%rip), %rsi
call throwError
.IF_NOT_5860:
.loc_27_2190:
movq $67, %rdi
call memoryAlloc
movq %rax, -64(%rbp)
movq -64(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -64(%rbp), %rdi
addq $64, %rdi
movb $5, (%rdi)
.loc_27_2193:
movq $67, %rdi
call memoryAlloc
movq %rax, -80(%rbp)
movq -80(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq -80(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -64(%rbp), %rdi
addq $24, %rdi
movq -80(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2197:
movq -64(%rbp), %rax
movq %rax, -368(%rbp)
leaq parserCtx(%rip), %rdi
movq -368(%rbp), %rax
movq (%rax), %rsi
call parserContext.findType
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .IF_NOT_5866
.loc_27_2198:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5868(%rip), %rsi
call throwError
.IF_NOT_5866:
.loc_27_2201:
movq -32(%rbp), %rbx
addq $2, %rbx
movq %rbx, -96(%rbp)
.loc_27_2203:
movq -64(%rbp), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -112(%rbp)
.loc_27_2204:
movq $0, -128(%rbp)
.loc_27_2206:
movq -32(%rbp), %rbx
addq $2, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_5871(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5872
.loc_27_2207:
movq -32(%rbp), %rbx
addq $3, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
je .IF_NOT_5875
.loc_27_2208:
movq -32(%rbp), %rbx
addq $3, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5862(%rip), %rsi
call throwError
.IF_NOT_5875:
.loc_27_2211:
movq -32(%rbp), %rbx
addq $3, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
leaq parserCtx(%rip), %rdi
movq %rax, %rsi
call parserContext.findType
movq %rax, -144(%rbp)
.loc_27_2212:
movq -144(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_OR_5879
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
je .BOOL_OR_5879_NOT
.BOOL_OR_5879:
movb $1, %al
jmp .BOOL_OR_5879_END
.BOOL_OR_5879_NOT:
movb $0, %al
.BOOL_OR_5879_END:
cmpb $0, %al
je .IF_NOT_5884
.loc_27_2213:
movq -32(%rbp), %rbx
addq $3, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5886(%rip), %rsi
call throwError
.IF_NOT_5884:
.loc_27_2215:
movq -64(%rbp), %rdi
addq $40, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2217:
movq -144(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
.loc_27_2219:
movq -144(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_5889
movb %al, %r11b
.FOR_LOOP_START_5889:
.loc_27_2220:
movq $67, %rdi
call memoryAlloc
movq %rax, -160(%rbp)
movq -160(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
.loc_27_2221:
movq -144(%rbp), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -240(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -208(%rbp)
addq $32, %rax
movw (%rax), %bx
movw %bx, -176(%rbp)
addq $2, %rax
movb (%rax), %bl
movb %bl, -174(%rbp)
movq -160(%rbp), %rdi
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movw -176(%rbp), %bx
movw %bx, (%rdi)
addq $2, %rdi
movb -174(%rbp), %bl
movb %bl, (%rdi)
.loc_27_2223:
movq -160(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -256(%rbp)
.loc_27_2225:
movq $8, %rax
cmpq -256(%rbp), %rax
jnb .IF_NOT_5895
.loc_27_2226:
movq $8, -256(%rbp)
.IF_NOT_5895:
.loc_27_2229:
movq -256(%rbp), %rbx
movq -128(%rbp), %rax
cqto
idivq %rbx
movq %rdx, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .IF_NOT_5898
.loc_27_2230:
movq -256(%rbp), %rbx
movq -128(%rbp), %rax
cqto
idivq %rbx
movq -256(%rbp), %rbx
subq %rdx, %rbx
addq -128(%rbp), %rbx
movq %rbx, -128(%rbp)
.IF_NOT_5898:
.loc_27_2233:
movq -160(%rbp), %rdi
addq $16, %rdi
movq -128(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2234:
movq -112(%rbp), %rdi
addq $32, %rdi
movq -160(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2235:
movq -160(%rbp), %rax
addq $8, %rax
movq -128(%rbp), %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq -64(%rbp), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_27_2236:
movq -160(%rbp), %rax
addq $8, %rax
movq -128(%rbp), %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -128(%rbp)
.loc_27_2238:
movq -112(%rbp), %rdi
addq $32, %rdi
movq -160(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2239:
movq -160(%rbp), %rdx
movq %rdx, -112(%rbp)
movq -144(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
movq -144(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_5889
.FOR_NOT_5889:
.loc_27_2241:
movq -112(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, %r11
movq -112(%rbp), %rax
addq $8, %rax
movq %r11, %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -128(%rbp)
.loc_27_2244:
movq -96(%rbp), %rbx
addq $2, %rbx
movq %rbx, -96(%rbp)
.IF_NOT_5872:
.loc_27_2247:
leaq parserCtx(%rip), %rdi
movq -64(%rbp), %rsi
call parserContext.addType
.loc_27_2249:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_5907
.loc_27_2250:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5909(%rip), %rsi
call throwError
.IF_NOT_5907:
.loc_27_2252:
addq $1, -96(%rbp)
.loc_27_2255:
.FOR_LOOP_START_5910:
movq -48(%rbp), %rbx
addq $-1, %rbx
cmpq %rbx, -96(%rbp)
jnb .FOR_NOT_5910
movb %al, %r11b
.loc_27_2256:
movq -96(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_2257:
movq -144(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
je .IF_NOT_5914
.loc_27_2258:
movq -144(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5916(%rip), %rsi
call throwError
.IF_NOT_5914:
.loc_27_2260:
addq $1, -96(%rbp)
.loc_27_2262:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5919
.loc_27_2263:
movq $1, -160(%rbp)
.loc_27_2264:
movq -96(%rbp), %rdx
movq %rdx, -176(%rbp)
.loc_27_2265:
movq -48(%rbp), %rdx
movq %rdx, -192(%rbp)
.loc_27_2266:
movq -176(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_5920
movb %al, %r11b
.FOR_LOOP_START_5920:
.loc_27_2267:
movq -176(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5925
.loc_27_2268:
movq -176(%rbp), %rdx
movq %rdx, -192(%rbp)
.loc_27_2269:
jmp .FOR_NOT_5920
.IF_NOT_5925:
addq $1, -176(%rbp)
movq -176(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_5920
.FOR_NOT_5920:
.loc_27_2273:
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq -192(%rbp), %rdx
movq $1, %rcx
call consumeType
movq %rax, -208(%rbp)
movq %rdx, -200(%rbp)
.loc_27_2275:
movq -208(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5927
.loc_27_2276:
movq -96(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5929(%rip), %rsi
call throwError
.IF_NOT_5927:
.loc_27_2279:
movq $48, %rdi
call memoryAlloc
movq %rax, -224(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -240(%rbp)
movq $8, 24(%rax)
movq -224(%rbp), %rdi
addq $32, %rdi
movq -240(%rbp), %rdx
movq %rdx, (%rdi)
movq -64(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
leaq .VAR_1123(%rip), %rax
movq %rax, -384(%rbp)
movq -144(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -400(%rbp)
movl $5, %edi
movq -368(%rbp), %rbx
addl (%rbx), %edi
movq -384(%rbp), %rbx
addl (%rbx), %edi
movq -400(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -416(%rbp)
call memoryAllocSTR_NZ
subq $5, -416(%rbp)
movq -416(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -432(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -368(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -416(%rbp)
movq %rdx, -448(%rbp)
call memcpy
movq -448(%rbp), %rdx
movq -416(%rbp), %rdi
addq %rdx, %rdi
movq -384(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -416(%rbp)
movq %rdx, -448(%rbp)
call memcpy
movq -448(%rbp), %rdx
movq -416(%rbp), %rdi
addq %rdx, %rdi
movq -400(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -416(%rbp)
movq %rdx, -448(%rbp)
call memcpy
movq -224(%rbp), %rdi
movq -432(%rbp), %rdx
movq %rdx, (%rdi)
movq -224(%rbp), %rdi
addq $8, %rdi
movq -208(%rbp), %rdx
movq %rdx, (%rdi)
movq -224(%rbp), %rdi
addq $16, %rdi
movb $1, (%rdi)
.loc_27_2285:
movq -64(%rbp), %rdi
call bahType.getPtr
movq %rax, -256(%rbp)
.loc_27_2286:
movq -224(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
addq $24, %rax
movq -256(%rbp), %rdi
addq $32, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_2287:
movq -256(%rbp), %rdi
leaq .VAR_5941(%rip), %rdx
movq %rdx, (%rdi)
.loc_27_2288:
movq -224(%rbp), %rdi
addq $8, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq -256(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2290:
movq $1, -272(%rbp)
.loc_27_2291:
movq -192(%rbp), %rbx
addq $1, %rbx
movq %rbx, -96(%rbp)
.loc_27_2292:
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_5942
movb %al, %r11b
.FOR_LOOP_START_5942:
.loc_27_2293:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5947
.loc_27_2294:
addq $1, -272(%rbp)
jmp .ELSE_NOT_5950
.IF_NOT_5947:
.loc_27_2295:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_5950
.loc_27_2296:
subq $1, -272(%rbp)
.loc_27_2297:
movq -272(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5952
.loc_27_2298:
addq $1, -96(%rbp)
.loc_27_2299:
jmp .FOR_NOT_5942
.IF_NOT_5952:
.ELSE_NOT_5950:
addq $1, -96(%rbp)
movq -96(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_5942
.FOR_NOT_5942:
.loc_27_2304:
leaq parserCtx(%rip), %rdi
movq -224(%rbp), %rsi
call parserContext.addFunc
.loc_27_2305:
movq -192(%rbp), %rbx
addq $1, %rbx
movq %rbx, -368(%rbp)
movq -224(%rbp), %rdi
movq -16(%rbp), %rsi
movq -368(%rbp), %rdx
movq -96(%rbp), %rcx
call parseFnBody
jmp .ELSE_NOT_5954
.IF_NOT_5919:
.loc_27_2307:
.loc_27_2309:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_1400(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .IF_NOT_5958
.loc_27_2310:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5960(%rip), %rsi
call throwError
.IF_NOT_5958:
.loc_27_2312:
addq $1, -96(%rbp)
.loc_27_2316:
movq -48(%rbp), %rbx
addq $-1, %rbx
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq %rbx, %rdx
movq $0, %rcx
call consumeType
movq %rax, -160(%rbp)
movq %rdx, -152(%rbp)
.loc_27_2317:
movq -160(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5963
.loc_27_2318:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_4724(%rip), %rsi
call throwError
.IF_NOT_5963:
.loc_27_2321:
movq -152(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_2322:
movq $67, %rdi
call memoryAlloc
movq %rax, -176(%rbp)
movq -176(%rbp), %rdi
addq $56, %rdi
movq $0, (%rdi)
.loc_27_2323:
movq -160(%rbp), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -256(%rbp)
addq $32, %rax
vmovdqu (%rax), %ymm2
vmovdqu %ymm2, -224(%rbp)
addq $32, %rax
movw (%rax), %bx
movw %bx, -192(%rbp)
addq $2, %rax
movb (%rax), %bl
movb %bl, -190(%rbp)
movq -176(%rbp), %rdi
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -224(%rbp), %ymm2
vmovdqu %ymm2, (%rdi)
addq $32, %rdi
movw -192(%rbp), %bx
movw %bx, (%rdi)
addq $2, %rdi
movb -190(%rbp), %bl
movb %bl, (%rdi)
.loc_27_2324:
movq -144(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq -176(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.loc_27_2326:
movq -176(%rbp), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -272(%rbp)
.loc_27_2328:
movq $8, %rax
cmpq -272(%rbp), %rax
jnb .IF_NOT_5968
.loc_27_2329:
movq $8, -272(%rbp)
.IF_NOT_5968:
.loc_27_2332:
movq -272(%rbp), %rbx
movq -128(%rbp), %rax
cqto
idivq %rbx
movq %rdx, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .IF_NOT_5971
.loc_27_2333:
movq -272(%rbp), %rbx
movq -128(%rbp), %rax
cqto
idivq %rbx
movq -272(%rbp), %rbx
subq %rdx, %rbx
addq -128(%rbp), %rbx
movq %rbx, -128(%rbp)
.IF_NOT_5971:
.loc_27_2337:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_4244(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_5974
.loc_27_2338:
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, %r11
movq -48(%rbp), %rax
cmpq %r11, %rax
jnb .IF_NOT_5977
.loc_27_2339:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5979(%rip), %rsi
call throwError
.IF_NOT_5977:
.loc_27_2342:
movq -96(%rbp), %rbx
addq $1, %rbx
movq %rbx, -288(%rbp)
.loc_27_2343:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -304(%rbp)
.loc_27_2344:
.FOR_LOOP_START_5980:
movq -48(%rbp), %rbx
addq $-1, %rbx
cmpq %rbx, -288(%rbp)
jnb .FOR_NOT_5980
movb %al, %r11b
.loc_27_2345:
movq -288(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -352(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -320(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -312(%rbp)
.loc_27_2346:
movq -344(%rbp), %rdx
cmpq $5, %rdx
jne .BOOL_AND_5982
movq -320(%rbp), %rdx
cmpq -304(%rbp), %rdx
jne .BOOL_AND_5982
movq -328(%rbp), %rdx
cmpq -304(%rbp), %rdx
je .BOOL_AND_5982
movb $1, %al
jmp .BOOL_AND_5982_END
.BOOL_AND_5982:
movb $0, %al
.BOOL_AND_5982_END:
cmpb $0, %al
je .IF_NOT_5986
.loc_27_2347:
movq -328(%rbp), %rdx
movq %rdx, -304(%rbp)
.IF_NOT_5986:
.loc_27_2350:
movq -328(%rbp), %rdx
cmpq -304(%rbp), %rdx
je .IF_NOT_5988
.loc_27_2351:
jmp .FOR_NOT_5980
.IF_NOT_5988:
addq $1, -288(%rbp)
jmp .FOR_LOOP_START_5980
.FOR_NOT_5980:
.loc_27_2356:
movq -96(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -288(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -320(%rbp)
movq %rdx, -312(%rbp)
.loc_27_2357:
movq -320(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_5991
.loc_27_2358:
movq -96(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5979(%rip), %rsi
call throwError
.IF_NOT_5991:
.loc_27_2361:
movq -320(%rbp), %rax
addq $56, %rax
movq %rax, -368(%rbp)
movq -176(%rbp), %rdi
movq -368(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_5997
.loc_27_2362:
movq -320(%rbp), %rdi
movq -176(%rbp), %rsi
call throwTypeError
.IF_NOT_5997:
.loc_27_2365:
movq -176(%rbp), %rdi
addq $48, %rdi
movq -320(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2367:
movq -312(%rbp), %rdx
movq %rdx, -96(%rbp)
.IF_NOT_5974:
.loc_27_2374:
movq -176(%rbp), %rdi
addq $16, %rdi
movq -128(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2375:
movq -112(%rbp), %rdi
addq $32, %rdi
movq -176(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2376:
movq -176(%rbp), %rax
addq $8, %rax
movq -128(%rbp), %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq -64(%rbp), %rdi
addq $8, %rdi
movq %rbx, (%rdi)
.loc_27_2377:
movq -176(%rbp), %rax
addq $8, %rax
movq -128(%rbp), %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -128(%rbp)
.loc_27_2378:
movq -112(%rbp), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -112(%rbp)
.ELSE_NOT_5954:
.loc_27_2383:
movq -48(%rbp), %rbx
addq $-1, %rbx
cmpq -96(%rbp), %rbx
jne .IF_NOT_6002
.loc_27_2384:
jmp .FOR_NOT_5910
jmp .ELSE_NOT_6003
.IF_NOT_6002:
.loc_27_2385:
.loc_27_2386:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq -144(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $24, %rax
movq %r11, %rdx
cmpq (%rax), %rdx
jne .IF_NOT_6006
.loc_27_2387:
movq -96(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6008(%rip), %rsi
call throwError
.IF_NOT_6006:
.loc_27_2389:
subq $1, -96(%rbp)
.ELSE_NOT_6003:
addq $1, -96(%rbp)
jmp .FOR_LOOP_START_5910
.FOR_NOT_5910:
leave
ret
.global .parseStruct_end
.parseStruct_end:
.global parseFnBody
parseFnBody:
pushq %rbp
movq %rsp, %rbp
subq $464, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
movq %rcx, -64(%rbp)
.loc_27_2398:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_6009
.loc_27_2399:
leave
ret
.IF_NOT_6009:
.loc_27_2402:
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
addq $40, %rax
movq (%rax), %rax
movq %rax, %rdx
cmpq $0, %rdx
setne %al
movb %al, %dl
movb %dl, -65(%rbp)
.loc_27_2404:
movq $0, -80(%rbp)
.loc_27_2405:
cmpb $0, -65(%rbp)
je .IF_NOT_6014
.loc_27_2406:
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
addq $40, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
.IF_NOT_6014:
.loc_27_2409:
movq $64, %rdi
call memoryAlloc
movq %rax, -96(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -112(%rbp)
movq $8, 24(%rax)
movq -96(%rbp), %rdi
addq $16, %rdi
movq -112(%rbp), %rdx
movq %rdx, (%rdi)
movq -96(%rbp), %rdi
movb $0, (%rdi)
movq -96(%rbp), %rdi
addq $1, %rdi
movb $0, (%rdi)
movq -96(%rbp), %rdi
addq $2, %rdi
movb -65(%rbp), %dl
movb %dl, (%rdi)
movq -96(%rbp), %rdi
addq $56, %rdi
movq -16(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2418:
leaq parserCtx(%rip), %rdi
movq -96(%rbp), %rsi
call parserContext.startScope
.loc_27_2420:
movq $40, %rdi
call memoryAlloc
movq %rax, -128(%rbp)
movq $54, 24(%rax)
.loc_27_2422:
leaq gen(%rip), %rdi
addq $88, %rdi
movq $0, (%rdi)
.loc_27_2423:
movq $16, -144(%rbp)
.loc_27_2425:
movq -80(%rbp), %rdx
cmpq $16, %rdx
jle .IF_NOT_6019
.loc_27_2426:
leaq gen(%rip), %rdi
addq $88, %rdi
movq $16, (%rdi)
.IF_NOT_6019:
.loc_27_2429:
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -160(%rbp)
.loc_27_2431:
cmpb $0, -65(%rbp)
je .BOOL_AND_6022
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq $8, %rax
cmpq %r8, %rax
jb .BOOL_AND_6022
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rax
movq (%rax), %rax
addq $65, %rax
movq %rax, -352(%rbp)
movq -352(%rbp), %rax
movb (%rax), %al
movb %al, -353(%rbp)
movb -353(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6022
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, -384(%rbp)
movq -384(%rbp), %rax
movq (%rax), %rax
addq $66, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rax
movb (%rax), %al
movb %al, -401(%rbp)
movb -401(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6022
movq -16(%rbp), %rax
addq $8, %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -448(%rbp)
movq -448(%rbp), %rax
movb (%rax), %al
movb %al, -449(%rbp)
movb -449(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
je .BOOL_AND_6022
movb $1, %al
jmp .BOOL_AND_6022_END
.BOOL_AND_6022:
movb $0, %al
.BOOL_AND_6022_END:
cmpb $0, %al
je .IF_NOT_6043
.loc_27_2432:
movq -16(%rbp), %rdi
addq $8, %rdi
movq (%rdi), %rdi
addq $56, %rdi
movq $1, (%rdi)
.IF_NOT_6043:
.loc_27_2435:
movq -160(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_6044
movb %al, %r11b
.FOR_LOOP_START_6044:
.loc_27_2436:
movq -160(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq $8, %rax
cmpq %r10, %rax
jb .BOOL_OR_6048
movq -160(%rbp), %rax
addq $65, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
cmpb $1, %al
je .BOOL_OR_6048_END
movq -160(%rbp), %rax
addq $66, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
cmpb $1, %al
je .BOOL_OR_6048_END
movq -160(%rbp), %rax
addq $64, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
movb (%rax), %al
movb %al, -321(%rbp)
movb -321(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .BOOL_OR_6048_NOT
.BOOL_OR_6048:
movb $1, %al
jmp .BOOL_OR_6048_END
.BOOL_OR_6048_NOT:
movb $0, %al
.BOOL_OR_6048_END:
cmpb $0, %al
je .IF_NOT_6057
.loc_27_2437:
movq -16(%rbp), %rdi
addq $8, %rdi
movq (%rdi), %rdi
addq $56, %rdi
movq $0, (%rdi)
.IF_NOT_6057:
.loc_27_2439:
movq $79, %rdi
call memoryAlloc
movq %rax, -176(%rbp)
movq -176(%rbp), %rdi
addq $24, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -240(%rbp)
vmovdqu %xmm0, -208(%rbp)
movss %xmm0, -192(%rbp)
xorb %al, %al
movb %al, -188(%rbp)
movb %al, -187(%rbp)
movq $-1, -200(%rbp)
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
movq -160(%rbp), %rax
movq -176(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -176(%rbp), %rdi
addq $8, %rdi
movq -160(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2443:
leaq parserCtx(%rip), %rdi
movq -176(%rbp), %rsi
call parserContext.addVar
.loc_27_2444:
movq -176(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq $16, %rax
cmpq %r9, %rax
jnb .IF_NOT_6064
.loc_27_2445:
movq -144(%rbp), %rdx
movq %rdx, -256(%rbp)
.loc_27_2447:
movq -160(%rbp), %rax
addq $32, %rax
movq (%rax), %rdx
movq %rdx, -272(%rbp)
.loc_27_2448:
movq -272(%rbp), %rdx
cmpq $0, %rdx
je .FOR_NOT_6066
movb %al, %r11b
.FOR_LOOP_START_6066:
.loc_27_2449:
movq -272(%rbp), %rax
addq $8, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
movq %rax, %r10
movq $16, %rax
cmpq %r10, %rax
jnb .IF_NOT_6073
.loc_27_2450:
movq -272(%rbp), %rax
addq $8, %rax
movq -256(%rbp), %rbx
movq (%rax), %rdx
addq %rdx, %rbx
movq %rbx, -256(%rbp)
.loc_27_2451:
movq $16, %rbx
movq -256(%rbp), %rax
cqto
idivq %rbx
movq %rdx, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .IF_NOT_6077
.loc_27_2452:
movq $16, %rbx
movq -256(%rbp), %rax
cqto
idivq %rbx
movq $16, %rbx
subq %rdx, %rbx
addq -256(%rbp), %rbx
movq %rbx, -256(%rbp)
.IF_NOT_6077:
.IF_NOT_6073:
movq -272(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -272(%rbp)
movq -272(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_6066
.FOR_NOT_6066:
.loc_27_2457:
movq -176(%rbp), %rdi
addq $24, %rdi
movq %rdi, -320(%rbp)
movq $0, %rbx
subq -256(%rbp), %rbx
movq %rbx, -336(%rbp)
movq -176(%rbp), %rax
addq $8, %rax
movq %rax, -352(%rbp)
movq -352(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -368(%rbp)
movq -320(%rbp), %rdi
movq -336(%rbp), %rsi
movq -368(%rbp), %rax
movq (%rax), %rdx
call asmSymbolStack
jmp .ELSE_NOT_6082
.IF_NOT_6064:
.loc_27_2458:
.loc_27_2459:
movq -176(%rbp), %rdi
addq $24, %rdi
movq -176(%rbp), %rax
movq %rax, -320(%rbp)
movq -176(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -336(%rbp)
leaq gen(%rip), %rsi
movq -320(%rbp), %rax
movq (%rax), %rdx
movq -336(%rbp), %rax
movq (%rax), %rcx
movq $0, %r8
call asmContext.generateVarDecl
.loc_27_2461:
movq -160(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_6090
.loc_27_2462:
movq -160(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
movq %rax, %r9
movq %r9, %rdx
cmpq $0, %rdx
je .BOOL_AND_6091
movq -160(%rbp), %rax
addq $24, %rax
movq %rax, %r8
movq %r8, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rax
movb (%rax), %al
movb %al, -337(%rbp)
movb -337(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .BOOL_AND_6091
movb $1, %al
jmp .BOOL_AND_6091_END
.BOOL_AND_6091:
movb $0, %al
.BOOL_AND_6091_END:
cmpb $0, %al
je .IF_NOT_6101
.loc_27_2463:
movq -160(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
movq %r8, %rdx
cmpq $0, %rdx
je .IF_NOT_6107
.loc_27_2464:
movq -160(%rbp), %rax
addq $24, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $32, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
addq $64, %rax
movq %rax, %r8
movq %r8, %rax
movb (%rax), %al
movb %al, -305(%rbp)
movb -305(%rbp), %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .IF_NOT_6114
.loc_27_2465:
movq -176(%rbp), %rdi
addq $24, %rdi
movq %rdi, %rdi
addq $48, %rdi
movb $1, (%rdi)
.IF_NOT_6114:
jmp .ELSE_NOT_6115
.IF_NOT_6107:
.loc_27_2467:
.loc_27_2468:
movq -176(%rbp), %rdi
addq $24, %rdi
movq %rdi, %rdi
addq $48, %rdi
movb $1, (%rdi)
.ELSE_NOT_6115:
.IF_NOT_6101:
jmp .ELSE_NOT_6119
.IF_NOT_6090:
.loc_27_2471:
movq -160(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $3, %rdx
jne .ELSE_NOT_6119
.loc_27_2472:
movq -176(%rbp), %rdi
addq $24, %rdi
movq %rdi, %rdi
addq $48, %rdi
movb $1, (%rdi)
.ELSE_NOT_6119:
.ELSE_NOT_6082:
.loc_27_2475:
movq -176(%rbp), %rax
addq $24, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -304(%rbp)
addq $32, %rax
vmovdqu (%rax), %xmm1
vmovdqu %xmm1, -272(%rbp)
addq $16, %rax
movd (%rax), %xmm2
movd %xmm2, -256(%rbp)
addq $4, %rax
movw (%rax), %bx
movw %bx, -252(%rbp)
movq -128(%rbp), %rdi
call __bah_arrayLength
movq %rax, -336(%rbp)
movq -128(%rbp), %rdi
movq -336(%rbp), %rsi
call __Bah_realocate_arr
movq -128(%rbp), %rdi
movq -336(%rbp), %rbx
imulq $54, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
vmovdqu -304(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -272(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -256(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -252(%rbp), %bx
movw %bx, (%rdi)
movq -160(%rbp), %rax
addq $32, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rdx
movq %rdx, -160(%rbp)
movq -160(%rbp), %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_6044
.FOR_NOT_6044:
.loc_27_2478:
movq -16(%rbp), %rax
leaq gen(%rip), %rdi
movq (%rax), %rsi
movq -128(%rbp), %rdx
movq -80(%rbp), %rcx
call asmContext.generateFnStart
.loc_27_2480:
movq -64(%rbp), %rbx
addq $-1, %rbx
movq -32(%rbp), %rdi
movq -48(%rbp), %rsi
movq %rbx, %rdx
call parseLines
.loc_27_2482:
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
addq $56, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rax
movq (%rax), %rax
addq $40, %rax
movq %rax, -352(%rbp)
movq -352(%rbp), %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_AND_6124
leaq parserCtx(%rip), %rax
addq $120, %rax
movq (%rax), %rax
movq %rax, -384(%rbp)
movq -384(%rbp), %rdi
call hasScopeReturned
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6124
movb $1, %al
jmp .BOOL_AND_6124_END
.BOOL_AND_6124:
movb $0, %al
.BOOL_AND_6124_END:
cmpb $0, %al
je .IF_NOT_6133
.loc_27_2483:
movq -64(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -32(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6135(%rip), %rsi
call throwError
.IF_NOT_6133:
.loc_27_2486:
leaq gen(%rip), %rdi
call asmContext.generateFnEnd
movq -16(%rbp), %rdi
addq $24, %rdi
movq %rax, (%rdi)
.loc_27_2488:
leaq parserCtx(%rip), %rdi
call parserContext.endScope
leave
ret
.global .parseFnBody_end
.parseFnBody_end:
.global parseFnDecl
parseFnDecl:
pushq %rbp
movq %rsp, %rbp
subq $208, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2493:
movq $1, -64(%rbp)
.loc_27_2494:
movq -48(%rbp), %rbx
addq $-2, %rbx
movq %rbx, -80(%rbp)
.loc_27_2495:
movq -48(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_2496:
movq -80(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_6136
movb %al, %r11b
.FOR_LOOP_START_6136:
.loc_27_2497:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -192(%rbp)
movq -192(%rbp), %rdi
leaq .VAR_4308(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_6141
.loc_27_2498:
subq $1, -64(%rbp)
.loc_27_2499:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6143
.loc_27_2500:
movq -80(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_2501:
jmp .FOR_NOT_6136
.IF_NOT_6143:
jmp .ELSE_NOT_6146
.IF_NOT_6141:
.loc_27_2503:
movq -80(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -192(%rbp)
movq -192(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6146
.loc_27_2504:
addq $1, -64(%rbp)
.ELSE_NOT_6146:
subq $1, -80(%rbp)
movq -80(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_6136
.FOR_NOT_6136:
.loc_27_2508:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -96(%rbp), %rdx
movq $1, %rcx
call consumeType
movq %rax, -112(%rbp)
movq %rdx, -104(%rbp)
.loc_27_2510:
movq -112(%rbp), %rdx
movq %rdx, -128(%rbp)
.loc_27_2512:
movq -104(%rbp), %rdx
movq %rdx, -80(%rbp)
.loc_27_2514:
movq -128(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6149
.loc_27_2515:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6151(%rip), %rsi
call throwError
.IF_NOT_6149:
.loc_27_2518:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
leaq parserCtx(%rip), %rdi
movq %rax, %rsi
call parserContext.findFunc
movq %rax, -144(%rbp)
.loc_27_2520:
movq -144(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6154
.loc_27_2521:
movq $48, %rdi
call memoryAlloc
movq %rax, -160(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -176(%rbp)
movq $8, 24(%rax)
movq -160(%rbp), %rdi
addq $32, %rdi
movq -176(%rbp), %rdx
movq %rdx, (%rdi)
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq -160(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -160(%rbp), %rdi
addq $8, %rdi
movq -128(%rbp), %rdx
movq %rdx, (%rdi)
movq -160(%rbp), %rdi
addq $16, %rdi
movb $1, (%rdi)
movq -160(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_2526:
leaq parserCtx(%rip), %rdi
movq -144(%rbp), %rsi
call parserContext.addFunc
jmp .ELSE_NOT_6155
.IF_NOT_6154:
.loc_27_2527:
.loc_27_2528:
movq -144(%rbp), %rax
addq $16, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_6157
.loc_27_2529:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -192(%rbp)
movq -192(%rbp), %rdi
leaq .VAR_6159(%rip), %rsi
call throwError
jmp .ELSE_NOT_6163
.IF_NOT_6157:
.loc_27_2530:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, -192(%rbp)
movq -192(%rbp), %rax
movq (%rax), %rdi
movq -128(%rbp), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .ELSE_NOT_6163
.loc_27_2531:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6165(%rip), %rsi
call throwError
.ELSE_NOT_6163:
.loc_27_2533:
movq -144(%rbp), %rdi
addq $16, %rdi
movb $1, (%rdi)
.loc_27_2534:
movq -144(%rbp), %rdi
addq $8, %rdi
movq -128(%rbp), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_6155:
.loc_27_2538:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -192(%rbp)
movq -192(%rbp), %rdi
leaq .VAR_5468(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_6166
movq -128(%rbp), %rdi
call bahType.toStr
movq %rax, -208(%rbp)
movq -208(%rbp), %rdi
leaq .VAR_5470(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_6166
movb $1, %al
jmp .BOOL_AND_6166_END
.BOOL_AND_6166:
movb $0, %al
.BOOL_AND_6166_END:
cmpb $0, %al
je .IF_NOT_6172
.loc_27_2539:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_5474(%rip), %rsi
call throwError
.IF_NOT_6172:
.loc_27_2542:
addq $1, -80(%rbp)
.loc_27_2544:
movq -144(%rbp), %rdi
movq -16(%rbp), %rsi
movq -80(%rbp), %rdx
movq -48(%rbp), %rcx
call parseFnBody
leave
ret
.global .parseFnDecl_end
.parseFnDecl_end:
.global parseVariableSet
parseVariableSet:
pushq %rbp
movq %rsp, %rbp
subq $480, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
movq %rcx, -64(%rbp)
movq %r8, -80(%rbp)
movq %r9, -72(%rbp)
.loc_27_2548:
movq $0, -96(%rbp)
.loc_27_2550:
movq -80(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6176
.loc_27_2551:
movq -64(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6178(%rip), %rsi
call throwError
.IF_NOT_6176:
.loc_27_2554:
movq 16(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6180
.loc_27_2555:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6182(%rip), %rsi
call throwError
.IF_NOT_6180:
.loc_27_2558:
movq 24(%rbp), %rdx
cmpq -64(%rbp), %rdx
je .IF_NOT_6184
.loc_27_2559:
movq -16(%rbp), %rdi
movq 24(%rbp), %rsi
movq -64(%rbp), %rdx
movq $0, %rcx
call consumeType
movq %rax, -112(%rbp)
movq %rdx, -104(%rbp)
.loc_27_2560:
movq -112(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6186
.loc_27_2561:
movq 24(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rdi
leaq .VAR_6188(%rip), %rsi
call throwError
jmp .ELSE_NOT_6190
.IF_NOT_6186:
.loc_27_2562:
movq -104(%rbp), %rdx
cmpq -64(%rbp), %rdx
je .ELSE_NOT_6190
.loc_27_2563:
movq -104(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6192(%rip), %rsi
call throwError
.ELSE_NOT_6190:
.loc_27_2566:
movb 32(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6194
.loc_27_2567:
movq 24(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6196(%rip), %rsi
call throwError
.IF_NOT_6194:
.loc_27_2570:
movq -112(%rbp), %rdx
movq %rdx, -96(%rbp)
.IF_NOT_6184:
.loc_27_2576:
movq -80(%rbp), %rdx
movq %rdx, -112(%rbp)
.loc_27_2577:
movq 16(%rbp), %rdx
movq %rdx, -128(%rbp)
.loc_27_2579:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
jne .IF_NOT_6200
.loc_27_2580:
cmpb $0, 32(%rbp)
je .IF_NOT_6201
.loc_27_2581:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6203(%rip), %rsi
call throwError
.IF_NOT_6201:
.loc_27_2584:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -64(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -160(%rbp)
movq %rdx, -152(%rbp)
movq -160(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_2585:
movq $139, %rdi
call memoryAlloc
movq %rax, -176(%rbp)
movq -176(%rbp), %rdi
addq $80, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -240(%rbp)
vmovdqu %xmm0, -208(%rbp)
movss %xmm0, -192(%rbp)
xorb %al, %al
movb %al, -188(%rbp)
movb %al, -187(%rbp)
movq $-1, -200(%rbp)
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -208(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -192(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -188(%rbp), %bx
movw %bx, (%rdi)
movq -176(%rbp), %rdi
addq $138, %rdi
movb $1, (%rdi)
movq -176(%rbp), %rdi
addq $8, %rdi
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rax
addq $32, %rdi
movq (%rax), %xmm1
movq %xmm1, (%rdi)
addq $8, %rax
addq $8, %rdi
movb (%rax), %bl
movb %bl, (%rdi)
movq -176(%rbp), %rdi
addq $64, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
movq -176(%rbp), %rdi
addq $72, %rdi
movq -112(%rbp), %rdx
movq %rdx, (%rdi)
movq -112(%rbp), %rax
addq $56, %rax
movq -176(%rbp), %rdi
addq $56, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -176(%rbp), %rdx
movq %rdx, -112(%rbp)
.IF_NOT_6200:
.loc_27_2594:
cmpb $0, 32(%rbp)
je .IF_NOT_6207
.loc_27_2597:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rdx
cmpq $2, %rdx
jne .IF_NOT_6211
.loc_27_2598:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6203(%rip), %rsi
call throwError
.IF_NOT_6211:
.loc_27_2601:
movq $79, %rdi
call memoryAlloc
movq %rax, -144(%rbp)
movq -144(%rbp), %rdi
addq $24, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -208(%rbp)
vmovdqu %xmm0, -176(%rbp)
movss %xmm0, -160(%rbp)
xorb %al, %al
movb %al, -156(%rbp)
movb %al, -155(%rbp)
movq $-1, -168(%rbp)
vmovdqu -208(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -176(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -160(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -156(%rbp), %bx
movw %bx, (%rdi)
movq 16(%rbp), %rax
addq $8, %rax
movq -144(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -112(%rbp), %rax
addq $56, %rax
movq -144(%rbp), %rdi
addq $8, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -128(%rbp), %rdi
addq $64, %rdi
movq -144(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2607:
movq -96(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_6218
.loc_27_2608:
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq -96(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2609:
movq -128(%rbp), %rdi
movq -96(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_6219
.IF_NOT_6218:
.loc_27_2610:
.loc_27_2611:
movq -112(%rbp), %rax
addq $56, %rax
movq -128(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.ELSE_NOT_6219:
.loc_27_2614:
movq -128(%rbp), %rax
addq $64, %rax
leaq parserCtx(%rip), %rdi
movq (%rax), %rsi
call parserContext.addVar
.loc_27_2616:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_6224
.loc_27_2617:
movq -112(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6226
.loc_27_2618:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_6227
.loc_27_2619:
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq -128(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
movq (%rax), %rsi
call asmSymbolStaticName
.loc_27_2620:
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r9
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq %rdi, %rdi
addq $8, %rdi
movq %r9, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_6234
.IF_NOT_6227:
.loc_27_2621:
.loc_27_2622:
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq %rdi, -400(%rbp)
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, -448(%rbp)
movq -448(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -464(%rbp)
movq -464(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -480(%rbp)
movq -400(%rbp), %rdi
leaq gen(%rip), %rsi
movq -432(%rbp), %rax
movq (%rax), %rdx
movq -480(%rbp), %rax
movq (%rax), %rcx
call asmContext.generateGlobalVarDecl
.ELSE_NOT_6234:
.IF_NOT_6226:
jmp .ELSE_NOT_6241
.IF_NOT_6224:
.loc_27_2625:
.loc_27_2626:
movq -128(%rbp), %rax
addq $88, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
je .BOOL_OR_6242
movq -112(%rbp), %rax
addq $138, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $14, %rdx
je .BOOL_AND_6246
movq -112(%rbp), %rax
addq $138, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rax
movb (%rax), %al
movb %al, -401(%rbp)
movb -401(%rbp), %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .BOOL_OR_6250
movq -112(%rbp), %rax
addq $56, %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rax
movq (%rax), %rax
movq %rax, -448(%rbp)
movq $8, %rax
cmpq -448(%rbp), %rax
jb .BOOL_OR_6250_NOT
.BOOL_OR_6250:
movb $1, %al
jmp .BOOL_OR_6250_END
.BOOL_OR_6250_NOT:
movb $0, %al
.BOOL_OR_6250_END:
cmpb $0, %al
je .BOOL_AND_6246
movb $1, %al
jmp .BOOL_AND_6246_END
.BOOL_AND_6246:
movb $0, %al
.BOOL_AND_6246_END:
cmpb $1, %al
jne .BOOL_OR_6242_NOT
.BOOL_OR_6242:
movb $1, %al
jmp .BOOL_OR_6242_END
.BOOL_OR_6242_NOT:
movb $0, %al
.BOOL_OR_6242_END:
cmpb $0, %al
je .IF_NOT_6258
.loc_27_2627:
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq %rdi, -400(%rbp)
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, -448(%rbp)
movq -448(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -464(%rbp)
movq -464(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -480(%rbp)
movq -400(%rbp), %rdi
leaq gen(%rip), %rsi
movq -432(%rbp), %rax
movq (%rax), %rdx
movq -480(%rbp), %rax
movq (%rax), %rcx
movq $0, %r8
call asmContext.generateVarDecl
.IF_NOT_6258:
.ELSE_NOT_6241:
jmp .ELSE_NOT_6265
.IF_NOT_6207:
.loc_27_2630:
.loc_27_2631:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_6268
.loc_27_2632:
movq -128(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_6270(%rip), %rsi
call throwError
.IF_NOT_6268:
.loc_27_2634:
movq -128(%rbp), %rax
movq %rax, -400(%rbp)
movq -112(%rbp), %rax
addq $56, %rax
movq %rax, -416(%rbp)
movq -400(%rbp), %rax
movq (%rax), %rdi
movq -416(%rbp), %rax
movq (%rax), %rsi
call compatibleTypes
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6275
.loc_27_2635:
movq -128(%rbp), %rax
movq -112(%rbp), %rdi
movq (%rax), %rsi
call throwTypeError
.IF_NOT_6275:
.ELSE_NOT_6265:
.loc_27_2639:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -192(%rbp)
vmovdqu %xmm0, -160(%rbp)
movss %xmm0, -144(%rbp)
xorb %al, %al
movb %al, -140(%rbp)
movb %al, -139(%rbp)
movq $-1, -152(%rbp)
.loc_27_2641:
movq -112(%rbp), %rax
addq $135, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_6278
.loc_27_2642:
movq -128(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq -112(%rbp), %rdi
addq $56, %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
.IF_NOT_6278:
.loc_27_2645:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_6283
.loc_27_2646:
movq -128(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -208(%rbp)
.loc_27_2647:
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $66, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_6290
.loc_27_2648:
movq $8, -208(%rbp)
.IF_NOT_6290:
.loc_27_2650:
cmpb $0, isObjectFile(%rip)
je .IF_NOT_6291
.loc_27_2651:
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq -128(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
movq (%rax), %rsi
call asmSymbolStaticName
.loc_27_2652:
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq %rdi, %rdi
addq $8, %rdi
movq -208(%rbp), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_6295
.IF_NOT_6291:
.loc_27_2653:
.loc_27_2654:
movq $40, %rdi
call memoryAlloc
movq %rax, -224(%rbp)
movq $54, 24(%rax)
.loc_27_2655:
movq -112(%rbp), %rdi
movq -224(%rbp), %rsi
call generateImmediateValues
.loc_27_2656:
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq %rdi, -400(%rbp)
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq -400(%rbp), %rdi
leaq gen(%rip), %rsi
movq -432(%rbp), %rax
movq (%rax), %rdx
movq -208(%rbp), %rcx
movq -224(%rbp), %r8
call asmContext.generateGlobalVarDeclWithValue
.ELSE_NOT_6295:
jmp .ELSE_NOT_6299
.IF_NOT_6283:
.loc_27_2658:
.loc_27_2661:
movq -128(%rbp), %rax
addq $88, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6300
movq -112(%rbp), %rax
addq $138, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .BOOL_AND_6300
movq -112(%rbp), %rax
addq $56, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rax
movq (%rax), %rax
movq %rax, -432(%rbp)
movq $16, %rax
cmpq -432(%rbp), %rax
jnb .BOOL_AND_6300
movb $1, %al
jmp .BOOL_AND_6300_END
.BOOL_AND_6300:
movb $0, %al
.BOOL_AND_6300_END:
cmpb $0, %al
je .IF_NOT_6311
.loc_27_2662:
leaq -256(%rbp), %rdi
movq -128(%rbp), %rsi
call generateBahLeftValueSymbol
.loc_27_2663:
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, -320(%rbp)
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, -288(%rbp)
movd -208(%rbp), %xmm2
movd %xmm2, -272(%rbp)
movw -204(%rbp), %bx
movw %bx, -268(%rbp)
.loc_27_2664:
movq -288(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_6313
.loc_27_2665:
movq $0, -288(%rbp)
.loc_27_2666:
movq $8, -312(%rbp)
.loc_27_2667:
leaq -384(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -320(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -288(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -272(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -268(%rbp), %bx
movw %bx, (%r10)
movq -312(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -384(%rbp), %ymm1
vmovdqu %ymm1, -320(%rbp)
vmovdqu -352(%rbp), %xmm1
vmovdqu %xmm1, -288(%rbp)
movd -336(%rbp), %xmm2
movd %xmm2, -272(%rbp)
movw -332(%rbp), %bx
movw %bx, -268(%rbp)
.loc_27_2668:
movq -224(%rbp), %rdx
movq %rdx, -288(%rbp)
.IF_NOT_6313:
.loc_27_2670:
leaq -384(%rbp), %rdi
movq -112(%rbp), %rsi
leaq -320(%rbp), %rdx
call generateBahValueSymbol
vmovdqu -384(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -352(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -336(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -332(%rbp), %bx
movw %bx, -140(%rbp)
.loc_27_2671:
leaq -192(%rbp), %rdi
call isEmptySymbol
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6316
.loc_27_2672:
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq $0, %rsi
call asmContext.generateVarSet
addq $128, %rsp
.IF_NOT_6316:
jmp .ELSE_NOT_6317
.IF_NOT_6311:
.loc_27_2674:
.loc_27_2675:
movb 32(%rbp), %dl
movsbq %dl, %rdx
cmpq $1, %rdx
jne .BOOL_AND_6318
movq -128(%rbp), %rax
movq %rax, -400(%rbp)
movq -112(%rbp), %rax
addq $56, %rax
movq %rax, -416(%rbp)
movq -400(%rbp), %rax
movq (%rax), %rdi
movq -416(%rbp), %rax
movq (%rax), %rsi
call isSameType
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6318
movb $1, %al
jmp .BOOL_AND_6318_END
.BOOL_AND_6318:
movb $0, %al
.BOOL_AND_6318_END:
cmpb $0, %al
je .IF_NOT_6324
.loc_27_2676:
movq -128(%rbp), %rax
movq %rax, -400(%rbp)
leaq -256(%rbp), %rdi
movq -112(%rbp), %rsi
movq -400(%rbp), %rax
movq (%rax), %rdx
call generateTypeConversion
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -208(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -204(%rbp), %bx
movw %bx, -140(%rbp)
jmp .ELSE_NOT_6326
.IF_NOT_6324:
.loc_27_2677:
.loc_27_2678:
leaq -256(%rbp), %rdi
movq -112(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -208(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -204(%rbp), %bx
movw %bx, -140(%rbp)
.ELSE_NOT_6326:
.loc_27_2681:
movq -128(%rbp), %rdi
call bahLeftValue.isArrayRecursive
cmpb $0, %al
je .IF_NOT_6327
.loc_27_2682:
leaq -256(%rbp), %rdi
leaq gen(%rip), %rsi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movq -184(%rbp), %rdx
call asmContext.generateTmpSym
addq $64, %rsp
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, -192(%rbp)
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, -160(%rbp)
movd -208(%rbp), %xmm2
movd %xmm2, -144(%rbp)
movw -204(%rbp), %bx
movw %bx, -140(%rbp)
.IF_NOT_6327:
.loc_27_2685:
leaq -256(%rbp), %rdi
movq -128(%rbp), %rsi
call generateBahLeftValueSymbol
.loc_27_2686:
movq -128(%rbp), %rax
addq $88, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .BOOL_AND_6328
movq -128(%rbp), %rax
addq $64, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $16, %rax
movq %rax, %r9
movq %r9, %rax
movq (%rax), %rax
movq %rax, %r8
leaq parserCtx(%rip), %rax
addq $24, %rax
movq %r8, %rdx
cmpq (%rax), %rdx
jne .BOOL_AND_6328
movq -112(%rbp), %rax
addq $138, %rax
movq %rax, -400(%rbp)
movq -400(%rbp), %rax
movb (%rax), %al
movb %al, -401(%rbp)
movb -401(%rbp), %dl
movzbq %dl, %rdx
cmpq $14, %rdx
je .BOOL_OR_6334
movq -112(%rbp), %rax
addq $138, %rax
movq %rax, -416(%rbp)
movq -416(%rbp), %rax
movb (%rax), %al
movb %al, -417(%rbp)
movb -417(%rbp), %dl
movzbq %dl, %rdx
cmpq $4, %rdx
jne .BOOL_AND_6338
movq -112(%rbp), %rax
addq $56, %rax
movq %rax, -432(%rbp)
movq -432(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -448(%rbp)
movq -448(%rbp), %rax
movq (%rax), %rax
movq %rax, -464(%rbp)
movq $8, %rax
cmpq -464(%rbp), %rax
jnb .BOOL_AND_6338
movb $1, %al
jmp .BOOL_AND_6338_END
.BOOL_AND_6338:
movb $0, %al
.BOOL_AND_6338_END:
cmpb $1, %al
jne .BOOL_OR_6334_NOT
.BOOL_OR_6334:
movb $1, %al
jmp .BOOL_OR_6334_END
.BOOL_OR_6334_NOT:
movb $0, %al
.BOOL_OR_6334_END:
cmpb $0, %al
je .BOOL_AND_6328
movb $1, %al
jmp .BOOL_AND_6328_END
.BOOL_AND_6328:
movb $0, %al
.BOOL_AND_6328_END:
cmpb $0, %al
je .IF_NOT_6346
.loc_27_2687:
movq -128(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -144(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -140(%rbp), %bx
movw %bx, (%rdi)
jmp .ELSE_NOT_6347
.IF_NOT_6346:
.loc_27_2688:
.loc_27_2689:
movq -128(%rbp), %rax
movq (%rax), %rax
addq $64, %rax
movb (%rax), %al
movb %al, %dl
movzbq %dl, %rdx
cmpq $2, %rdx
sete %al
leaq gen(%rip), %rdi
subq $64, %rsp
movq %rsp, %r10
vmovdqu -256(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -224(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -208(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -204(%rbp), %bx
movw %bx, (%r10)
subq $64, %rsp
movq %rsp, %r10
vmovdqu -192(%rbp), %ymm1
vmovdqu %ymm1, (%r10)
addq $32, %r10
vmovdqu -160(%rbp), %xmm1
vmovdqu %xmm1, (%r10)
addq $16, %r10
movd -144(%rbp), %xmm2
movd %xmm2, (%r10)
addq $4, %r10
movw -140(%rbp), %bx
movw %bx, (%r10)
movb %al, %sil
movsbl %sil, %esi
call asmContext.generateVarSet
addq $128, %rsp
.ELSE_NOT_6347:
.ELSE_NOT_6317:
.ELSE_NOT_6299:
leave
ret
.global .parseVariableSet_end
.parseVariableSet_end:
.global parseConst
parseConst:
pushq %rbp
movq %rsp, %rbp
subq $272, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2702:
movq -32(%rbp), %rdx
movq %rdx, -64(%rbp)
movq -64(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_6352
movb %al, %r11b
.FOR_LOOP_START_6352:
.loc_27_2703:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rdi
leaq .VAR_4244(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_6357
.loc_27_2704:
jmp .FOR_NOT_6352
.IF_NOT_6357:
addq $1, -64(%rbp)
movq -64(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_6352
.FOR_NOT_6352:
.loc_27_2708:
movq -64(%rbp), %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_6359
.loc_27_2709:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6361(%rip), %rsi
call throwError
.IF_NOT_6359:
.loc_27_2711:
movq -64(%rbp), %rdx
cmpq -32(%rbp), %rdx
jne .IF_NOT_6363
.loc_27_2712:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6365(%rip), %rsi
call throwError
.IF_NOT_6363:
.loc_27_2714:
movq -48(%rbp), %rbx
subq $1, %rbx
cmpq -64(%rbp), %rbx
jne .IF_NOT_6367
.loc_27_2715:
movq -64(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6369(%rip), %rsi
call throwError
.IF_NOT_6367:
.loc_27_2718:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -112(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -80(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -72(%rbp)
.loc_27_2720:
movq -104(%rbp), %rdx
cmpq $2, %rdx
je .IF_NOT_6371
.loc_27_2721:
leaq -112(%rbp), %rdi
leaq .VAR_6372(%rip), %rsi
call throwError
.IF_NOT_6371:
.loc_27_2724:
movq -64(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -128(%rbp)
movq %rdx, -120(%rbp)
.loc_27_2726:
movq -128(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6375
.loc_27_2727:
movq -64(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6178(%rip), %rsi
call throwError
.IF_NOT_6375:
.loc_27_2730:
movq -128(%rbp), %rdx
movq %rdx, -144(%rbp)
.loc_27_2732:
movq -144(%rbp), %rax
addq $135, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6381
.loc_27_2733:
movq -144(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .BOOL_OR_6382
movq -144(%rbp), %rax
addq $138, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movzbq %dl, %rdx
cmpq $9, %rdx
jne .BOOL_AND_6386
movq -144(%rbp), %rax
addq $64, %rax
movq %rax, -240(%rbp)
movq -240(%rbp), %rax
movq (%rax), %rax
addq $135, %rax
movq %rax, -256(%rbp)
movq -256(%rbp), %rax
movb (%rax), %al
movb %al, -257(%rbp)
movb -257(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6386
movb $1, %al
jmp .BOOL_AND_6386_END
.BOOL_AND_6386:
movb $0, %al
.BOOL_AND_6386_END:
cmpb $1, %al
jne .BOOL_OR_6382_NOT
.BOOL_OR_6382:
movb $1, %al
jmp .BOOL_OR_6382_END
.BOOL_OR_6382_NOT:
movb $0, %al
.BOOL_OR_6382_END:
cmpb $0, %al
je .IF_NOT_6394
.loc_27_2734:
movb $0, -145(%rbp)
.loc_27_2735:
movq -144(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $5, %rdx
jne .IF_NOT_6398
.loc_27_2736:
movq -144(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
leaq parserCtx(%rip), %rdi
movq %rax, %rsi
call parserContext.findVar
movq %rax, -160(%rbp)
.loc_27_2737:
movq -160(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6402
.loc_27_2738:
leaq .VAR_6403(%rip), %rdi
leaq .VAR_6404(%rip), %rsi
call __Bah_panic
.IF_NOT_6402:
.loc_27_2740:
movq -160(%rbp), %rax
addq $78, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_6406
.loc_27_2741:
movb $1, -145(%rbp)
.IF_NOT_6406:
.IF_NOT_6398:
.loc_27_2745:
movb -145(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6408
.loc_27_2746:
movq -32(%rbp), %rbx
addq $1, %rbx
leaq -176(%rbp), %rdi
movq -16(%rbp), %rsi
movq %rbx, %rdx
movq -64(%rbp), %rcx
call consumeLeftValue
.loc_27_2747:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq -64(%rbp), %rcx
subq $32, %rsp
movq %rsp, %r10
vmovdqu -176(%rbp), %xmm0
vmovdqu %xmm0, (%r10)
addq $16, %r10
movb -160(%rbp), %bl
movb %bl, (%r10)
movq -128(%rbp), %r8
movq -120(%rbp), %r9
call parseVariableSet
addq $32, %rsp
.loc_27_2748:
movq -176(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $78, %rdi
movb $1, (%rdi)
.loc_27_2749:
leave
ret
.IF_NOT_6408:
.IF_NOT_6394:
.loc_27_2754:
movq -144(%rbp), %rax
addq $64, %rax
movq (%rax), %rdx
movq %rdx, -144(%rbp)
.IF_NOT_6381:
.loc_27_2757:
movq $79, %rdi
call memoryAlloc
movq %rax, -160(%rbp)
movq -160(%rbp), %rdi
addq $24, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -224(%rbp)
vmovdqu %xmm0, -192(%rbp)
movss %xmm0, -176(%rbp)
xorb %al, %al
movb %al, -172(%rbp)
movb %al, -171(%rbp)
movq $-1, -184(%rbp)
vmovdqu -224(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -192(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -176(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -172(%rbp), %bx
movw %bx, (%rdi)
movq -160(%rbp), %rdi
movq -112(%rbp), %rdx
movq %rdx, (%rdi)
movq -128(%rbp), %rax
addq $56, %rax
movq -160(%rbp), %rdi
addq $8, %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -160(%rbp), %rdi
addq $78, %rdi
movb $1, (%rdi)
.loc_27_2764:
leaq parserCtx(%rip), %rdi
movq -160(%rbp), %rsi
call parserContext.addVar
.loc_27_2766:
movq -160(%rbp), %rdi
addq $24, %rdi
movq -128(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leave
ret
.global .parseConst_end
.parseConst_end:
.global parseContinue
parseContinue:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2771:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_6417
.loc_27_2772:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6419(%rip), %rsi
call throwError
.IF_NOT_6417:
.loc_27_2775:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $1, %rdx
je .IF_NOT_6422
.loc_27_2776:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6424(%rip), %rsi
call throwError
.IF_NOT_6422:
.loc_27_2778:
leaq gen(%rip), %rdi
call asmContext.generateForContinue
leave
ret
.global .parseContinue_end
.parseContinue_end:
.global parseBreak
parseBreak:
pushq %rbp
movq %rsp, %rbp
subq $48, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2782:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_6427
.loc_27_2783:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6429(%rip), %rsi
call throwError
.IF_NOT_6427:
.loc_27_2786:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $1, %rdx
je .IF_NOT_6432
.loc_27_2787:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6424(%rip), %rsi
call throwError
.IF_NOT_6432:
.loc_27_2789:
leaq gen(%rip), %rdi
call asmContext.generateForBreak
leave
ret
.global .parseBreak_end
.parseBreak_end:
.global parseAsync
parseAsync:
pushq %rbp
movq %rsp, %rbp
subq $128, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2793:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_6437
.loc_27_2794:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6439(%rip), %rsi
call throwError
.IF_NOT_6437:
.loc_27_2797:
movq -32(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -64(%rbp)
movq %rdx, -56(%rbp)
.loc_27_2799:
movq -64(%rbp), %rdx
cmpq $0, %rdx
je .BOOL_OR_6441
movq -64(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
je .BOOL_OR_6441_NOT
.BOOL_OR_6441:
movb $1, %al
jmp .BOOL_OR_6441_END
.BOOL_OR_6441_NOT:
movb $0, %al
.BOOL_OR_6441_END:
cmpb $0, %al
je .IF_NOT_6446
.loc_27_2800:
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6448(%rip), %rsi
call throwError
.IF_NOT_6446:
.loc_27_2803:
movq -64(%rbp), %rdi
addq $137, %rdi
movb $1, (%rdi)
.loc_27_2805:
leaq -128(%rbp), %rdi
movq -64(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
leave
ret
.global .parseAsync_end
.parseAsync_end:
.global parseLine
parseLine:
pushq %rbp
movq %rsp, %rbp
subq $384, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2810:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -96(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -64(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -56(%rbp)
.loc_27_2812:
leaq parserCtx(%rip), %rdi
addq $80, %rdi
movq -72(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2813:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6449
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $0, %rdx
je .BOOL_AND_6449
movb $1, %al
jmp .BOOL_AND_6449_END
.BOOL_AND_6449:
movb $0, %al
.BOOL_AND_6449_END:
cmpb $0, %al
je .IF_NOT_6454
.loc_27_2814:
leaq gen(%rip), %rdi
movq -72(%rbp), %rsi
call asmContext.generateLineLocation
.IF_NOT_6454:
.loc_27_2817:
movq -88(%rbp), %rdx
cmpq $6, %rdx
jne .IF_NOT_6456
.loc_27_2818:
movq -96(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $35, %dl
jne .IF_NOT_6459
.loc_27_2819:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseHashDirective
jmp .ELSE_NOT_6478
.IF_NOT_6459:
.loc_27_2820:
movq -96(%rbp), %rdi
leaq .VAR_6460(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6461
.loc_27_2821:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseReturn
jmp .ELSE_NOT_6478
.ELSE_NOT_6461:
.loc_27_2822:
movq -96(%rbp), %rdi
leaq .VAR_5741(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6463
.loc_27_2823:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseIf
jmp .ELSE_NOT_6478
.ELSE_NOT_6463:
.loc_27_2824:
movq -96(%rbp), %rdi
leaq .VAR_5715(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6465
.loc_27_2825:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseElse
jmp .ELSE_NOT_6478
.ELSE_NOT_6465:
.loc_27_2826:
movq -96(%rbp), %rdi
leaq .VAR_6466(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6467
.loc_27_2827:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseFor
jmp .ELSE_NOT_6478
.ELSE_NOT_6467:
.loc_27_2828:
movq -96(%rbp), %rdi
leaq .VAR_6468(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6469
.loc_27_2829:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseStruct
jmp .ELSE_NOT_6478
.ELSE_NOT_6469:
.loc_27_2830:
movq -96(%rbp), %rdi
leaq .VAR_6470(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6471
.loc_27_2831:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseConst
jmp .ELSE_NOT_6478
.ELSE_NOT_6471:
.loc_27_2832:
movq -96(%rbp), %rdi
leaq .VAR_5836(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6473
.loc_27_2833:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseContinue
jmp .ELSE_NOT_6478
.ELSE_NOT_6473:
.loc_27_2834:
movq -96(%rbp), %rdi
leaq .VAR_6474(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6475
.loc_27_2835:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseBreak
jmp .ELSE_NOT_6478
.ELSE_NOT_6475:
.loc_27_2836:
movq -96(%rbp), %rdi
leaq .VAR_6476(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .ELSE_NOT_6477
.loc_27_2837:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseAsync
jmp .ELSE_NOT_6478
.ELSE_NOT_6477:
.loc_27_2838:
.loc_27_2839:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rdi
leaq .VAR_6480(%rip), %rsi
call throwError
.ELSE_NOT_6478:
jmp .ELSE_NOT_6490
.IF_NOT_6456:
.loc_27_2841:
movq -88(%rbp), %rdx
cmpq $2, %rdx
jne .BOOL_AND_6481
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, -304(%rbp)
movq $4, %rax
cmpq -304(%rbp), %rax
jnb .BOOL_AND_6481
movq -32(%rbp), %rbx
addq $1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_6481
movq -48(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rdi
leaq .VAR_4320(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_6481
movb $1, %al
jmp .BOOL_AND_6481_END
.BOOL_AND_6481:
movb $0, %al
.BOOL_AND_6481_END:
cmpb $0, %al
je .ELSE_NOT_6489
.loc_27_2842:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
call parseFnDecl
jmp .ELSE_NOT_6490
.ELSE_NOT_6489:
.loc_27_2843:
.loc_27_2844:
movq $0, -112(%rbp)
.loc_27_2845:
movq -32(%rbp), %rdx
movq %rdx, -128(%rbp)
movq -128(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_6491
movb %al, %r11b
.FOR_LOOP_START_6491:
.loc_27_2846:
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rdi
leaq .VAR_4244(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_6494_END
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
leaq .VAR_1880(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_6494_END
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rdi
leaq .VAR_1876(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_6494_END
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -352(%rbp)
movq -352(%rbp), %rdi
leaq .VAR_1865(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
je .BOOL_OR_6494_END
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rdi
leaq .VAR_1861(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_6494_NOT
.BOOL_OR_6494:
movb $1, %al
jmp .BOOL_OR_6494_END
.BOOL_OR_6494_NOT:
movb $0, %al
.BOOL_OR_6494_END:
cmpb $0, %al
je .IF_NOT_6505
.loc_27_2847:
movq -128(%rbp), %rdx
movq %rdx, -112(%rbp)
.loc_27_2848:
jmp .FOR_NOT_6491
.IF_NOT_6505:
addq $1, -128(%rbp)
movq -128(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_6491
.FOR_NOT_6491:
.loc_27_2852:
movq -128(%rbp), %rdx
cmpq -48(%rbp), %rdx
je .IF_NOT_6507
.loc_27_2853:
movq -128(%rbp), %rdx
cmpq -32(%rbp), %rdx
jne .IF_NOT_6509
.loc_27_2854:
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6511(%rip), %rsi
call throwError
.IF_NOT_6509:
.loc_27_2856:
movq -48(%rbp), %rbx
subq $1, %rbx
cmpq -128(%rbp), %rbx
jne .IF_NOT_6513
.loc_27_2857:
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6515(%rip), %rsi
call throwError
.IF_NOT_6513:
.loc_27_2860:
leaq -160(%rbp), %rdi
movq -16(%rbp), %rsi
movq -32(%rbp), %rdx
movq -128(%rbp), %rcx
call consumeLeftValue
.loc_27_2861:
movq -128(%rbp), %rbx
addq $1, %rbx
movq -16(%rbp), %rdi
movq %rbx, %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -176(%rbp)
movq %rdx, -168(%rbp)
.loc_27_2863:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
movq -112(%rbp), %rcx
subq $32, %rsp
movq %rsp, %r10
vmovdqu -160(%rbp), %xmm0
vmovdqu %xmm0, (%r10)
addq $16, %r10
movb -144(%rbp), %bl
movb %bl, (%r10)
movq -176(%rbp), %r8
movq -168(%rbp), %r9
call parseVariableSet
addq $32, %rsp
jmp .ELSE_NOT_6517
.IF_NOT_6507:
.loc_27_2866:
.loc_27_2868:
movq -32(%rbp), %rbx
addq $1, %rbx
movq %rbx, -128(%rbp)
.loc_27_2870:
movq -48(%rbp), %rbx
subq -32(%rbp), %rbx
movq %rbx, %r11
movq %r11, %rdx
cmpq $2, %rdx
jb .BOOL_AND_6518
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, %r10
movq %r10, %rdx
cmpq $2, %rdx
jne .BOOL_AND_6518
movb $1, %al
jmp .BOOL_AND_6518_END
.BOOL_AND_6518:
movb $0, %al
.BOOL_AND_6518_END:
cmpb $0, %al
je .IF_NOT_6523
.loc_27_2871:
movq -128(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_6524
movb %al, %r11b
.FOR_LOOP_START_6524:
.loc_27_2872:
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rdi
leaq .VAR_3823(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .BOOL_AND_6528
movq -128(%rbp), %rbx
addq $-1, %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rdi
leaq .VAR_3813(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_6528
movb $1, %al
jmp .BOOL_AND_6528_END
.BOOL_AND_6528:
movb $0, %al
.BOOL_AND_6528_END:
cmpb $1, %al
je .BOOL_OR_6527_END
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -336(%rbp)
movq -336(%rbp), %rdx
cmpq $10, %rdx
jne .BOOL_AND_6534
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -352(%rbp)
movq -352(%rbp), %rdi
leaq .VAR_843(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_6534
movb $1, %al
jmp .BOOL_AND_6534_END
.BOOL_AND_6534:
movb $0, %al
.BOOL_AND_6534_END:
cmpb $1, %al
jne .BOOL_OR_6527_NOT
.BOOL_OR_6527:
movb $1, %al
jmp .BOOL_OR_6527_END
.BOOL_OR_6527_NOT:
movb $0, %al
.BOOL_OR_6527_END:
cmpb $0, %al
je .IF_NOT_6540
.loc_27_2873:
movq -16(%rbp), %rdi
movq -32(%rbp), %rsi
movq -48(%rbp), %rdx
movq $-1, %rcx
movq $0, %r8
call consumeValue
movq %rax, -144(%rbp)
movq %rdx, -136(%rbp)
.loc_27_2874:
movq -144(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_6542
.loc_27_2875:
movq -144(%rbp), %rax
addq $138, %rax
movq %rax, %r11
movq %r11, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
movzbq %dl, %rdx
cmpq $4, %rdx
je .BOOL_AND_6543
movq -144(%rbp), %rax
addq $136, %rax
movq %rax, %r9
movq %r9, %rax
movb (%rax), %al
movb %al, %r8b
movb %r8b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6543
movb $1, %al
jmp .BOOL_AND_6543_END
.BOOL_AND_6543:
movb $0, %al
.BOOL_AND_6543_END:
cmpb $0, %al
je .IF_NOT_6550
.loc_27_2876:
movq -144(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_6552(%rip), %rsi
call throwError
.IF_NOT_6550:
.loc_27_2878:
leaq -208(%rbp), %rdi
movq -144(%rbp), %rsi
movq $0, %rdx
call generateBahValueSymbol
jmp .ELSE_NOT_6553
.IF_NOT_6542:
.loc_27_2879:
.loc_27_2880:
movq -136(%rbp), %rdx
cmpq -48(%rbp), %rdx
je .IF_NOT_6555
.loc_27_2881:
movq -136(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6557(%rip), %rsi
call throwError
.IF_NOT_6555:
.ELSE_NOT_6553:
.loc_27_2884:
jmp .FOR_NOT_6524
.IF_NOT_6540:
addq $1, -128(%rbp)
movq -128(%rbp), %rdx
cmpq -48(%rbp), %rdx
jb .FOR_LOOP_START_6524
.FOR_NOT_6524:
.IF_NOT_6523:
.loc_27_2890:
movq -128(%rbp), %rdx
cmpq -48(%rbp), %rdx
jne .IF_NOT_6559
.loc_27_2891:
leaq -160(%rbp), %rdi
movq -16(%rbp), %rsi
movq -32(%rbp), %rdx
movq -128(%rbp), %rcx
call consumeLeftValue
.loc_27_2892:
movq $0, -176(%rbp)
.loc_27_2894:
movq -160(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6561
.loc_27_2895:
movq -32(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6563(%rip), %rsi
call throwError
.IF_NOT_6561:
.loc_27_2898:
movq -16(%rbp), %rdi
movq -152(%rbp), %rsi
movq -128(%rbp), %rdx
movq $0, %rcx
call consumeType
movq %rax, -192(%rbp)
movq %rdx, -184(%rbp)
.loc_27_2899:
movq -192(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6565
.loc_27_2900:
movq -152(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, -304(%rbp)
movq -304(%rbp), %rdi
leaq .VAR_6188(%rip), %rsi
call throwError
jmp .ELSE_NOT_6569
.IF_NOT_6565:
.loc_27_2901:
movq -184(%rbp), %rdx
cmpq -128(%rbp), %rdx
je .ELSE_NOT_6569
.loc_27_2902:
movq -184(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
movq %rax, %rdi
leaq .VAR_6192(%rip), %rsi
call throwError
.ELSE_NOT_6569:
.loc_27_2905:
movq -192(%rbp), %rdx
movq %rdx, -176(%rbp)
.loc_27_2906:
movq -160(%rbp), %rdx
movq %rdx, -208(%rbp)
.loc_27_2908:
movb -144(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6573
.loc_27_2909:
movq -208(%rbp), %rax
addq $8, %rax
movq %rax, %rdi
leaq .VAR_6575(%rip), %rsi
call throwError
.IF_NOT_6573:
.loc_27_2912:
movq $79, %rdi
call memoryAlloc
movq %rax, -224(%rbp)
movq -224(%rbp), %rdi
addq $24, %rdi
pxor %xmm0, %xmm0
vmovdqu %ymm0, -288(%rbp)
vmovdqu %xmm0, -256(%rbp)
movss %xmm0, -240(%rbp)
xorb %al, %al
movb %al, -236(%rbp)
movb %al, -235(%rbp)
movq $-1, -248(%rbp)
vmovdqu -288(%rbp), %ymm1
vmovdqu %ymm1, (%rdi)
addq $32, %rdi
vmovdqu -256(%rbp), %xmm1
vmovdqu %xmm1, (%rdi)
addq $16, %rdi
movd -240(%rbp), %xmm2
movd %xmm2, (%rdi)
addq $4, %rdi
movw -236(%rbp), %bx
movw %bx, (%rdi)
movq -160(%rbp), %rax
addq $8, %rax
movq -224(%rbp), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq -224(%rbp), %rdi
addq $8, %rdi
movq -176(%rbp), %rdx
movq %rdx, (%rdi)
movq -208(%rbp), %rdi
addq $64, %rdi
movq -224(%rbp), %rdx
movq %rdx, (%rdi)
.loc_27_2917:
movq -208(%rbp), %rax
addq $64, %rax
leaq parserCtx(%rip), %rdi
movq (%rax), %rsi
call parserContext.addVar
.loc_27_2919:
leaq parserCtx(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .IF_NOT_6581
.loc_27_2920:
leaq parserCtx(%rip), %rax
addq $96, %rax
movb (%rax), %al
cmpb $0, %al
je .IF_NOT_6582
.loc_27_2921:
movq -208(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq -208(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
movq (%rax), %rsi
call asmSymbolStaticName
.loc_27_2922:
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, %r11
movq %r11, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r10
movq %r10, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, %r9
movq -208(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq %rdi, %rdi
addq $8, %rdi
movq %r9, %rax
movq (%rax), %rdx
movq %rdx, (%rdi)
jmp .ELSE_NOT_6589
.IF_NOT_6582:
.loc_27_2923:
.loc_27_2924:
movq -208(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq %rdi, -304(%rbp)
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, -320(%rbp)
movq -320(%rbp), %rax
movq (%rax), %rax
movq %rax, -336(%rbp)
movq -208(%rbp), %rax
addq $64, %rax
movq %rax, -352(%rbp)
movq -352(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -368(%rbp)
movq -368(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -384(%rbp)
movq -304(%rbp), %rdi
leaq gen(%rip), %rsi
movq -336(%rbp), %rax
movq (%rax), %rdx
movq -384(%rbp), %rax
movq (%rax), %rcx
call asmContext.generateGlobalVarDecl
.ELSE_NOT_6589:
jmp .ELSE_NOT_6596
.IF_NOT_6581:
.loc_27_2926:
.loc_27_2927:
movq -208(%rbp), %rdi
addq $64, %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq -208(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
movq %rax, -304(%rbp)
movq -208(%rbp), %rax
addq $64, %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rax
addq $8, %rax
movq %rax, -320(%rbp)
leaq gen(%rip), %rsi
movq -304(%rbp), %rax
movq (%rax), %rdx
movq -320(%rbp), %rax
movq (%rax), %rcx
movq $1, %r8
call asmContext.generateVarDecl
.ELSE_NOT_6596:
.IF_NOT_6559:
.ELSE_NOT_6517:
.ELSE_NOT_6490:
leave
ret
.global .parseLine_end
.parseLine_end:
.global parseLines
parseLines:
pushq %rbp
movq %rsp, %rbp
subq $176, %rsp
movq %rdi, -16(%rbp)
movq %rsi, -32(%rbp)
movq %rdx, -48(%rbp)
.loc_27_2938:
movq $0, -64(%rbp)
.loc_27_2939:
movq $0, -80(%rbp)
.loc_27_2940:
movq -32(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_2941:
movq -48(%rbp), %rdx
movq %rdx, -112(%rbp)
.loc_27_2943:
movq -32(%rbp), %rdx
movq %rdx, -128(%rbp)
.FOR_LOOP_START_6603:
movq -128(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .FOR_NOT_6603
movb %al, %r11b
.loc_27_2944:
movq -128(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
vmovdqu (%rax), %ymm1
vmovdqu %ymm1, -176(%rbp)
addq $32, %rax
movq (%rax), %xmm1
movq %xmm1, -144(%rbp)
addq $8, %rax
movb (%rax), %bl
movb %bl, -136(%rbp)
.loc_27_2946:
movq -168(%rbp), %rdx
cmpq $5, %rdx
jne .BOOL_AND_6605
movq -144(%rbp), %rdx
cmpq -80(%rbp), %rdx
jne .BOOL_AND_6605
movq -152(%rbp), %rdx
cmpq -80(%rbp), %rdx
je .BOOL_AND_6605
movb $1, %al
jmp .BOOL_AND_6605_END
.BOOL_AND_6605:
movb $0, %al
.BOOL_AND_6605_END:
cmpb $0, %al
je .IF_NOT_6609
.loc_27_2947:
movq -152(%rbp), %rdx
movq %rdx, -80(%rbp)
.IF_NOT_6609:
.loc_27_2950:
movq -168(%rbp), %rdx
cmpq $3, %rdx
jne .IF_NOT_6611
.loc_27_2951:
movq -176(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $40, %dl
je .BOOL_OR_6612
movq -176(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $91, %dl
je .BOOL_OR_6612
movq -176(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r9b
movb %r9b, %dl
cmpb $123, %dl
jne .BOOL_OR_6612_NOT
.BOOL_OR_6612:
movb $1, %al
jmp .BOOL_OR_6612_END
.BOOL_OR_6612_NOT:
movb $0, %al
.BOOL_OR_6612_END:
cmpb $0, %al
je .IF_NOT_6619
.loc_27_2952:
addq $1, -64(%rbp)
jmp .ELSE_NOT_6620
.IF_NOT_6619:
.loc_27_2953:
.loc_27_2954:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6622
.loc_27_2955:
leaq -176(%rbp), %rdi
leaq .VAR_4127(%rip), %rsi
call throwError
.IF_NOT_6622:
.loc_27_2957:
subq $1, -64(%rbp)
.loc_27_2958:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .BOOL_AND_6624
movq -176(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $125, %dl
jne .BOOL_AND_6624
movb $1, %al
jmp .BOOL_AND_6624_END
.BOOL_AND_6624:
movb $0, %al
.BOOL_AND_6624_END:
cmpb $0, %al
je .IF_NOT_6628
.loc_27_2959:
movq -128(%rbp), %rbx
addq $1, %rbx
movq %rbx, -112(%rbp)
.loc_27_2960:
movq -96(%rbp), %rdx
cmpq -112(%rbp), %rdx
je .IF_NOT_6630
.loc_27_2961:
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq -112(%rbp), %rdx
call parseLine
.IF_NOT_6630:
.loc_27_2963:
movq -112(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_2964:
movq -112(%rbp), %rdx
cmpq -48(%rbp), %rdx
jnb .IF_NOT_6632
.loc_27_2965:
movq -112(%rbp), %rbx
imulq $41, %rbx
movq -16(%rbp), %rax
movq (%rax), %rax
addq %rbx, %rax
addq $24, %rax
movq (%rax), %rdx
movq %rdx, -80(%rbp)
.IF_NOT_6632:
.IF_NOT_6628:
.loc_27_2968:
addq $1, -128(%rbp)
jmp .FOR_LOOP_START_6603
.ELSE_NOT_6620:
.IF_NOT_6611:
.loc_27_2972:
movq -152(%rbp), %rdx
cmpq -80(%rbp), %rdx
jne .BOOL_OR_6633
movq -176(%rbp), %rdi
leaq .VAR_6635(%rip), %rsi
call __bah_compareStr
cmpb $1, %al
jne .BOOL_OR_6633_NOT
.BOOL_OR_6633:
movb $1, %al
jmp .BOOL_OR_6633_END
.BOOL_OR_6633_NOT:
movb $0, %al
.BOOL_OR_6633_END:
cmpb $0, %al
je .IF_NOT_6636
.loc_27_2973:
movq -64(%rbp), %rdx
cmpq $0, %rdx
jne .IF_NOT_6638
.loc_27_2974:
movq -128(%rbp), %rdx
movq %rdx, -112(%rbp)
.loc_27_2975:
movq -96(%rbp), %rdx
cmpq -112(%rbp), %rdx
je .IF_NOT_6640
.loc_27_2976:
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq -112(%rbp), %rdx
call parseLine
.IF_NOT_6640:
.loc_27_2978:
movq -112(%rbp), %rdx
movq %rdx, -96(%rbp)
.loc_27_2979:
movq -176(%rbp), %rdi
leaq .VAR_6635(%rip), %rsi
call __bah_compareStr
cmpb $0, %al
je .IF_NOT_6642
.loc_27_2980:
addq $1, -96(%rbp)
.IF_NOT_6642:
.IF_NOT_6638:
.loc_27_2983:
movq -152(%rbp), %rdx
movq %rdx, -80(%rbp)
.IF_NOT_6636:
addq $1, -128(%rbp)
jmp .FOR_LOOP_START_6603
.FOR_NOT_6603:
.loc_27_2988:
movq -96(%rbp), %rdx
cmpq -128(%rbp), %rdx
je .IF_NOT_6644
.loc_27_2989:
movq -128(%rbp), %rdx
movq %rdx, -112(%rbp)
.loc_27_2990:
movq -16(%rbp), %rdi
movq -96(%rbp), %rsi
movq -112(%rbp), %rdx
call parseLine
.IF_NOT_6644:
leave
ret
.global .parseLines_end
.parseLines_end:
.global printDebugContext
printDebugContext:
pushq %rbp
movq %rsp, %rbp
subq $112, %rsp
.loc_0_56:
leaq .VAR_6645(%rip), %rax
movq %rax, -16(%rbp)
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rax
movq %rax, -32(%rbp)
leaq .VAR_1400(%rip), %rax
movq %rax, -48(%rbp)
leaq parserCtx(%rip), %rax
addq $80, %rax
movq (%rax), %rax
movq %rax, %rdi
call uintToStr
movq %rax, -64(%rbp)
movl $5, %edi
movq -16(%rbp), %rbx
addl (%rbx), %edi
movq -32(%rbp), %rbx
addl (%rbx), %edi
movq -48(%rbp), %rbx
addl (%rbx), %edi
movq -64(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -80(%rbp)
call memoryAllocSTR_NZ
subq $5, -80(%rbp)
movq -80(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -96(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -16(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -32(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -48(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -112(%rbp), %rdx
movq -80(%rbp), %rdi
addq %rdx, %rdi
movq -64(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -80(%rbp)
movq %rdx, -112(%rbp)
call memcpy
movq -96(%rbp), %rdi
call println
leave
ret
.global .printDebugContext_end
.printDebugContext_end:
.global main
main:
pushq %rbp
movq %rsp, %rbp
subq $1680, %rsp
movq %rdi, -16(%rbp)
.loc_0_60:
movq -16(%rbp), %rdi
call __bah_arrayLength
movq %rax, %r11
movq %r11, %rdx
cmpq $1, %rdx
jne .IF_NOT_6657
.loc_0_61:
movq $0, %rax
leave
ret
.IF_NOT_6657:
.loc_0_64:
call getTimeUnix
movq %rax, -32(%rbp)
.loc_0_65:
movq -16(%rbp), %rax
movq (%rax), %rax
movq (%rax), %rdx
movq %rdx, compilerPath(%rip)
.loc_0_66:
call channel
movq %rax, compileWaitChannel(%rip)
.loc_0_68:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -240(%rbp)
vmovdqu %ymm0, -208(%rbp)
vmovdqu %ymm0, -176(%rbp)
vmovdqu %ymm0, -144(%rbp)
vmovdqu %ymm0, -112(%rbp)
vmovdqu %ymm0, -80(%rbp)
vmovdqu %xmm0, -48(%rbp)
movq $0, -56(%rbp)
movq $0, -64(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -256(%rbp)
movq $16, 24(%rax)
movq -256(%rbp), %rdx
movq %rdx, -72(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -272(%rbp)
movq $54, 24(%rax)
movq -272(%rbp), %rdx
movq %rdx, -80(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -288(%rbp)
movq $118, 24(%rax)
movq -288(%rbp), %rdx
movq %rdx, -88(%rbp)
movb $1, -104(%rbp)
pxor %xmm0, %xmm0
vmovdqu %xmm0, -304(%rbp)
movq $0, -296(%rbp)
movq $0, -304(%rbp)
vmovdqu -304(%rbp), %xmm0
vmovdqu %xmm0, -120(%rbp)
pxor %xmm0, %xmm0
vmovdqu %xmm0, -320(%rbp)
movq $0, -312(%rbp)
movq $0, -320(%rbp)
vmovdqu -320(%rbp), %xmm0
vmovdqu %xmm0, -136(%rbp)
movb $1, -168(%rbp)
movb $1, -200(%rbp)
leaq gen(%rip), %rdx
vmovdqu -240(%rbp), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rdx
vmovdqu -208(%rbp), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rdx
vmovdqu -176(%rbp), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rdx
vmovdqu -144(%rbp), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rdx
vmovdqu -112(%rbp), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rdx
vmovdqu -80(%rbp), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rdx
vmovdqu -48(%rbp), %xmm6
vmovdqu %xmm6, (%rdx)
.loc_0_69:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -448(%rbp)
vmovdqu %ymm0, -416(%rbp)
vmovdqu %ymm0, -384(%rbp)
vmovdqu %ymm0, -352(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -464(%rbp)
movq $8, 24(%rax)
movq -464(%rbp), %rdx
movq %rdx, -344(%rbp)
movb $0, -392(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -480(%rbp)
movq $8, 24(%rax)
movq -480(%rbp), %rdx
movq %rdx, -400(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -496(%rbp)
movq $8, 24(%rax)
movq -496(%rbp), %rdx
movq %rdx, -408(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -512(%rbp)
movq $8, 24(%rax)
movq -512(%rbp), %rdx
movq %rdx, -416(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -528(%rbp)
movq $8, 24(%rax)
movq -528(%rbp), %rdx
movq %rdx, -432(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -544(%rbp)
movq $8, 24(%rax)
movq -544(%rbp), %rdx
movq %rdx, -440(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -560(%rbp)
movq $8, 24(%rax)
movq -560(%rbp), %rdx
movq %rdx, -448(%rbp)
leaq parserCtx(%rip), %rdx
vmovdqu -448(%rbp), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rdx
vmovdqu -416(%rbp), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rdx
vmovdqu -384(%rbp), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rdx
vmovdqu -352(%rbp), %ymm4
vmovdqu %ymm4, (%rdx)
.loc_0_72:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -768(%rbp)
vmovdqu %ymm0, -736(%rbp)
vmovdqu %ymm0, -704(%rbp)
vmovdqu %ymm0, -672(%rbp)
vmovdqu %ymm0, -640(%rbp)
vmovdqu %ymm0, -608(%rbp)
vmovdqu %xmm0, -576(%rbp)
movq $0, -584(%rbp)
movq $0, -592(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -784(%rbp)
movq $16, 24(%rax)
movq -784(%rbp), %rdx
movq %rdx, -600(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -800(%rbp)
movq $54, 24(%rax)
movq -800(%rbp), %rdx
movq %rdx, -608(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -816(%rbp)
movq $118, 24(%rax)
movq -816(%rbp), %rdx
movq %rdx, -616(%rbp)
movb $1, -632(%rbp)
pxor %xmm0, %xmm0
vmovdqu %xmm0, -832(%rbp)
movq $0, -824(%rbp)
movq $0, -832(%rbp)
vmovdqu -832(%rbp), %xmm0
vmovdqu %xmm0, -648(%rbp)
pxor %xmm0, %xmm0
vmovdqu %xmm0, -848(%rbp)
movq $0, -840(%rbp)
movq $0, -848(%rbp)
vmovdqu -848(%rbp), %xmm0
vmovdqu %xmm0, -664(%rbp)
movb $1, -696(%rbp)
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -744(%rbp)
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -768(%rbp)
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -760(%rbp)
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -752(%rbp)
movb $0, -728(%rbp)
leaq initFnGen(%rip), %rdx
vmovdqu -768(%rbp), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rdx
vmovdqu -736(%rbp), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rdx
vmovdqu -704(%rbp), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rdx
vmovdqu -672(%rbp), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rdx
vmovdqu -640(%rbp), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rdx
vmovdqu -608(%rbp), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rdx
vmovdqu -576(%rbp), %xmm6
vmovdqu %xmm6, (%rdx)
.loc_0_80:
pxor %xmm0, %xmm0
vmovdqu %ymm0, -1056(%rbp)
vmovdqu %ymm0, -1024(%rbp)
vmovdqu %ymm0, -992(%rbp)
vmovdqu %ymm0, -960(%rbp)
vmovdqu %ymm0, -928(%rbp)
vmovdqu %ymm0, -896(%rbp)
vmovdqu %xmm0, -864(%rbp)
movq $0, -872(%rbp)
movq $0, -880(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -1072(%rbp)
movq $16, 24(%rax)
movq -1072(%rbp), %rdx
movq %rdx, -888(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -1088(%rbp)
movq $54, 24(%rax)
movq -1088(%rbp), %rdx
movq %rdx, -896(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -1104(%rbp)
movq $118, 24(%rax)
movq -1104(%rbp), %rdx
movq %rdx, -904(%rbp)
movb $1, -920(%rbp)
pxor %xmm0, %xmm0
vmovdqu %xmm0, -1120(%rbp)
movq $0, -1112(%rbp)
movq $0, -1120(%rbp)
vmovdqu -1120(%rbp), %xmm0
vmovdqu %xmm0, -936(%rbp)
pxor %xmm0, %xmm0
vmovdqu %xmm0, -1136(%rbp)
movq $0, -1128(%rbp)
movq $0, -1136(%rbp)
vmovdqu -1136(%rbp), %xmm0
vmovdqu %xmm0, -952(%rbp)
movb $1, -984(%rbp)
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -1032(%rbp)
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -1056(%rbp)
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -1048(%rbp)
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -1040(%rbp)
movb $0, -1016(%rbp)
leaq globalFuncsGen(%rip), %rdx
vmovdqu -1056(%rbp), %ymm1
vmovdqu %ymm1, (%rdx)
addq $32, %rdx
vmovdqu -1024(%rbp), %ymm2
vmovdqu %ymm2, (%rdx)
addq $32, %rdx
vmovdqu -992(%rbp), %ymm3
vmovdqu %ymm3, (%rdx)
addq $32, %rdx
vmovdqu -960(%rbp), %ymm4
vmovdqu %ymm4, (%rdx)
addq $32, %rdx
vmovdqu -928(%rbp), %ymm5
vmovdqu %ymm5, (%rdx)
addq $32, %rdx
vmovdqu -896(%rbp), %ymm6
vmovdqu %ymm6, (%rdx)
addq $32, %rdx
vmovdqu -864(%rbp), %xmm6
vmovdqu %xmm6, (%rdx)
.loc_0_89:
pxor %xmm0, %xmm0
vmovdqu %xmm0, -1152(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -1168(%rbp)
movq $8, 24(%rax)
movq -1168(%rbp), %rdx
movq %rdx, -1144(%rbp)
movq $40, %rdi
call memoryAlloc
movq %rax, -1184(%rbp)
movq $8, 24(%rax)
movq -1184(%rbp), %rdx
movq %rdx, -1152(%rbp)
.loc_0_90:
leaq -1152(%rbp), %rdi
leaq .VAR_6666(%rip), %rsi
leaq .VAR_6667(%rip), %rdx
call flags.addString
.loc_0_91:
leaq -1152(%rbp), %rdi
leaq .VAR_6668(%rip), %rsi
leaq .VAR_6669(%rip), %rdx
call flags.addBool
.loc_0_92:
leaq -1152(%rbp), %rdi
leaq .VAR_6670(%rip), %rsi
leaq .VAR_6671(%rip), %rdx
call flags.addBool
.loc_0_93:
leaq -1152(%rbp), %rdi
leaq .VAR_6672(%rip), %rsi
leaq .VAR_6673(%rip), %rdx
call flags.addBool
.loc_0_94:
leaq -1152(%rbp), %rdi
leaq .VAR_6674(%rip), %rsi
leaq .VAR_6675(%rip), %rdx
call flags.addBool
.loc_0_95:
leaq -1152(%rbp), %rdi
leaq .VAR_6676(%rip), %rsi
leaq .VAR_6677(%rip), %rdx
call flags.addBool
.loc_0_96:
leaq -1152(%rbp), %rdi
leaq .VAR_6678(%rip), %rsi
leaq .VAR_6679(%rip), %rdx
call flags.addBool
.loc_0_97:
leaq -1152(%rbp), %rdi
leaq .VAR_6680(%rip), %rsi
leaq .VAR_6681(%rip), %rdx
call flags.addBool
.loc_0_98:
leaq -1152(%rbp), %rdi
leaq .VAR_2006(%rip), %rsi
leaq .VAR_6683(%rip), %rdx
call flags.addBool
.loc_0_99:
leaq -1152(%rbp), %rdi
leaq .VAR_6684(%rip), %rsi
leaq .VAR_6685(%rip), %rdx
call flags.addBool
.loc_0_101:
leaq -1152(%rbp), %rdi
movq -16(%rbp), %rsi
call flags.parse
.loc_0_103:
leaq -1152(%rbp), %rdi
leaq .VAR_6668(%rip), %rsi
call flags.isSet
cmpb $0, %al
je .IF_NOT_6687
.loc_0_104:
leaq .VAR_6688(%rip), %rax
movq %rax, -1552(%rbp)
movq BAH_VERSION(%rip), %rbx
movq %rbx, -1568(%rbp)
leaq .VAR_1123(%rip), %rax
movq %rax, -1584(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq -1584(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1600(%rbp)
call memoryAllocSTR_NZ
subq $5, -1600(%rbp)
movq -1600(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1616(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1600(%rbp)
movq %rdx, -1632(%rbp)
call memcpy
movq -1632(%rbp), %rdx
movq -1600(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1600(%rbp)
movq %rdx, -1632(%rbp)
call memcpy
movq -1632(%rbp), %rdx
movq -1600(%rbp), %rdi
addq %rdx, %rdi
movq -1584(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1600(%rbp)
movq %rdx, -1632(%rbp)
call memcpy
movq -1616(%rbp), %rdi
call println
.loc_0_105:
leaq .VAR_6696(%rip), %rdi
call println
.loc_0_106:
movq $0, %rax
leave
ret
.IF_NOT_6687:
.loc_0_109:
leaq -1152(%rbp), %rdi
leaq .VAR_6680(%rip), %rsi
call flags.isSet
cmpb $1, %al
je .BOOL_OR_6697_END
leaq -1152(%rbp), %rdi
leaq .VAR_2006(%rip), %rsi
call flags.isSet
cmpb $1, %al
jne .BOOL_OR_6697_NOT
.BOOL_OR_6697:
movb $1, %al
jmp .BOOL_OR_6697_END
.BOOL_OR_6697_NOT:
movb $0, %al
.BOOL_OR_6697_END:
leaq parserCtx(%rip), %rdi
addq $112, %rdi
movb %al, (%rdi)
.loc_0_110:
leaq -1152(%rbp), %rdi
leaq .VAR_2006(%rip), %rsi
call flags.isSet
leaq parserCtx(%rip), %rdi
addq $113, %rdi
movb %al, (%rdi)
.loc_0_111:
leaq -1152(%rbp), %rdi
leaq .VAR_6674(%rip), %rsi
call flags.isSet
movb %al, -1537(%rbp)
movb -1537(%rbp), %dl
movsbq %dl, %rdx
cmpq $0, %rdx
je .BOOL_OR_6701
leaq -1152(%rbp), %rdi
leaq .VAR_2006(%rip), %rsi
call flags.isSet
cmpb $1, %al
jne .BOOL_OR_6701_NOT
.BOOL_OR_6701:
movb $1, %al
jmp .BOOL_OR_6701_END
.BOOL_OR_6701_NOT:
movb $0, %al
.BOOL_OR_6701_END:
leaq gen(%rip), %rdi
addq $40, %rdi
movb %al, (%rdi)
.loc_0_113:
leaq -1152(%rbp), %rdi
leaq .VAR_6670(%rip), %rsi
call flags.isSet
movb %al, isObjectFile(%rip)
.loc_0_114:
leaq -1152(%rbp), %rdi
leaq .VAR_6672(%rip), %rsi
call flags.isSet
movb %al, isSilent(%rip)
.loc_0_116:
leaq -1152(%rbp), %rdi
leaq .VAR_6678(%rip), %rsi
call flags.isSet
cmpb $0, %al
je .IF_NOT_6709
.loc_0_117:
leaq gen(%rip), %rdi
addq $136, %rdi
movb $0, (%rdi)
.loc_0_118:
leaq initFnGen(%rip), %rdi
addq $136, %rdi
movb $0, (%rdi)
.IF_NOT_6709:
.loc_0_121:
pxor %xmm0, %xmm0
movq %xmm0, -1200(%rbp)
xorb %al, %al
movb %al, -1192(%rbp)
leaq .VAR_6710(%rip), %rdx
movq %rdx, -1200(%rbp)
movq BAH_OS(%rip), %rbx
movq %rbx, %rdi
leaq .VAR_392(%rip), %rsi
call __bah_compareStr
movb %al, -1192(%rbp)
movq BAH_boolean_hashes(%rip), %rbx
movq %rbx, -1552(%rbp)
movq BAH_boolean_hashes(%rip), %rdi
call __bah_arrayLength
movq %rax, -1568(%rbp)
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rsi
call __Bah_realocate_arr
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rbx
imulq $9, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -1200(%rbp), %xmm0
movq %xmm0, (%rdi)
addq $8, %rdi
movb -1192(%rbp), %bl
movb %bl, (%rdi)
.loc_0_125:
pxor %xmm0, %xmm0
movq %xmm0, -1216(%rbp)
xorb %al, %al
movb %al, -1208(%rbp)
leaq .VAR_6715(%rip), %rdx
movq %rdx, -1216(%rbp)
movq BAH_OS(%rip), %rbx
movq %rbx, %rdi
leaq .VAR_6717(%rip), %rsi
call __bah_compareStr
movb %al, -1208(%rbp)
movq BAH_boolean_hashes(%rip), %rbx
movq %rbx, -1552(%rbp)
movq BAH_boolean_hashes(%rip), %rdi
call __bah_arrayLength
movq %rax, -1568(%rbp)
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rsi
call __Bah_realocate_arr
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rbx
imulq $9, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -1216(%rbp), %xmm0
movq %xmm0, (%rdi)
addq $8, %rdi
movb -1208(%rbp), %bl
movb %bl, (%rdi)
.loc_0_129:
pxor %xmm0, %xmm0
movq %xmm0, -1232(%rbp)
xorb %al, %al
movb %al, -1224(%rbp)
leaq .VAR_6720(%rip), %rdx
movq %rdx, -1232(%rbp)
movq BAH_OS(%rip), %rbx
movq %rbx, %rdi
leaq .VAR_6722(%rip), %rsi
call __bah_compareStr
movb %al, -1224(%rbp)
movq BAH_boolean_hashes(%rip), %rbx
movq %rbx, -1552(%rbp)
movq BAH_boolean_hashes(%rip), %rdi
call __bah_arrayLength
movq %rax, -1568(%rbp)
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rsi
call __Bah_realocate_arr
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rbx
imulq $9, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -1232(%rbp), %xmm0
movq %xmm0, (%rdi)
addq $8, %rdi
movb -1224(%rbp), %bl
movb %bl, (%rdi)
.loc_0_133:
pxor %xmm0, %xmm0
movq %xmm0, -1248(%rbp)
xorb %al, %al
movb %al, -1240(%rbp)
leaq .VAR_6725(%rip), %rdx
movq %rdx, -1248(%rbp)
leaq -1152(%rbp), %rdi
leaq .VAR_2006(%rip), %rsi
call flags.isSet
movb %al, -1240(%rbp)
movq BAH_boolean_hashes(%rip), %rbx
movq %rbx, -1552(%rbp)
movq BAH_boolean_hashes(%rip), %rdi
call __bah_arrayLength
movq %rax, -1568(%rbp)
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rsi
call __Bah_realocate_arr
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rbx
imulq $9, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -1248(%rbp), %xmm0
movq %xmm0, (%rdi)
addq $8, %rdi
movb -1240(%rbp), %bl
movb %bl, (%rdi)
.loc_0_137:
pxor %xmm0, %xmm0
movq %xmm0, -1264(%rbp)
xorb %al, %al
movb %al, -1256(%rbp)
leaq .VAR_6729(%rip), %rdx
movq %rdx, -1264(%rbp)
movb $0, -1256(%rbp)
movq BAH_boolean_hashes(%rip), %rbx
movq %rbx, -1552(%rbp)
movq BAH_boolean_hashes(%rip), %rdi
call __bah_arrayLength
movq %rax, -1568(%rbp)
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rsi
call __Bah_realocate_arr
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rbx
imulq $9, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -1264(%rbp), %xmm0
movq %xmm0, (%rdi)
addq $8, %rdi
movb -1256(%rbp), %bl
movb %bl, (%rdi)
.loc_0_141:
pxor %xmm0, %xmm0
movq %xmm0, -1280(%rbp)
xorb %al, %al
movb %al, -1272(%rbp)
leaq .VAR_6732(%rip), %rdx
movq %rdx, -1280(%rbp)
movb $1, -1272(%rbp)
movq BAH_boolean_hashes(%rip), %rbx
movq %rbx, -1552(%rbp)
movq BAH_boolean_hashes(%rip), %rdi
call __bah_arrayLength
movq %rax, -1568(%rbp)
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rsi
call __Bah_realocate_arr
movq -1552(%rbp), %rdi
movq -1568(%rbp), %rbx
imulq $9, %rbx
movq (%rdi), %rdi
addq %rbx, %rdi
movq -1280(%rbp), %xmm0
movq %xmm0, (%rdi)
addq $8, %rdi
movb -1272(%rbp), %bl
movb %bl, (%rdi)
.loc_0_145:
leaq .VAR_388(%rip), %rdi
call rope
movq %rax, -1296(%rbp)
.loc_0_147:
movb isObjectFile(%rip), %bl
movb %bl, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6738
.loc_0_148:
leaq .VAR_6739(%rip), %rdi
call rope
leaq gen(%rip), %rdi
addq $32, %rdi
movq %rax, (%rdi)
.loc_0_149:
leaq -1152(%rbp), %rdi
leaq .VAR_6684(%rip), %rsi
call flags.isSet
cmpb $0, %al
je .IF_NOT_6741
.loc_0_150:
leaq .VAR_6742(%rip), %rax
movq %rax, -1552(%rbp)
movq initFnName(%rip), %rbx
movq %rbx, -1568(%rbp)
leaq .VAR_6745(%rip), %rax
movq %rax, -1584(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq -1584(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1600(%rbp)
call memoryAllocSTR_NZ
subq $5, -1600(%rbp)
movq -1600(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1616(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1600(%rbp)
movq %rdx, -1632(%rbp)
call memcpy
movq -1632(%rbp), %rdx
movq -1600(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1600(%rbp)
movq %rdx, -1632(%rbp)
call memcpy
movq -1632(%rbp), %rdx
movq -1600(%rbp), %rdi
addq %rdx, %rdi
movq -1584(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1600(%rbp)
movq %rdx, -1632(%rbp)
call memcpy
movq -1616(%rbp), %rdi
call rope
leaq gen(%rip), %rdi
movq %rax, (%rdi)
jmp .ELSE_NOT_6750
.IF_NOT_6741:
.loc_0_160:
.loc_0_161:
leaq .VAR_6742(%rip), %rax
movq %rax, -1552(%rbp)
movq initFnName(%rip), %rbx
movq %rbx, -1568(%rbp)
leaq .VAR_6754(%rip), %rax
movq %rax, -1584(%rbp)
movq argumentsToArrFunction(%rip), %rbx
movq %rbx, -1600(%rbp)
leaq .VAR_6757(%rip), %rax
movq %rax, -1616(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq -1584(%rbp), %rbx
addl (%rbx), %edi
movq -1600(%rbp), %rbx
addl (%rbx), %edi
movq -1616(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1632(%rbp)
call memoryAllocSTR_NZ
subq $5, -1632(%rbp)
movq -1632(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1648(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1632(%rbp)
movq %rdx, -1664(%rbp)
call memcpy
movq -1664(%rbp), %rdx
movq -1632(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1632(%rbp)
movq %rdx, -1664(%rbp)
call memcpy
movq -1664(%rbp), %rdx
movq -1632(%rbp), %rdi
addq %rdx, %rdi
movq -1584(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1632(%rbp)
movq %rdx, -1664(%rbp)
call memcpy
movq -1664(%rbp), %rdx
movq -1632(%rbp), %rdi
addq %rdx, %rdi
movq -1600(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1632(%rbp)
movq %rdx, -1664(%rbp)
call memcpy
movq -1664(%rbp), %rdx
movq -1632(%rbp), %rdi
addq %rdx, %rdi
movq -1616(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1632(%rbp)
movq %rdx, -1664(%rbp)
call memcpy
movq -1648(%rbp), %rdi
call rope
leaq gen(%rip), %rdi
movq %rax, (%rdi)
.ELSE_NOT_6750:
.loc_0_175:
leaq .VAR_388(%rip), %rdi
call rope
leaq gen(%rip), %rdi
addq $8, %rdi
movq %rax, (%rdi)
.loc_0_176:
leaq .VAR_6763(%rip), %rdi
call rope
leaq gen(%rip), %rdi
addq $16, %rdi
movq %rax, (%rdi)
.loc_0_179:
leaq .VAR_6764(%rip), %rdi
call rope
leaq gen(%rip), %rdi
addq $24, %rdi
movq %rax, (%rdi)
.loc_0_180:
leaq initFnGen(%rip), %rdi
movq initFnName(%rip), %rsi
movq $0, %rdx
movq $0, %rcx
call asmContext.generateFnStart
jmp .ELSE_NOT_6765
.IF_NOT_6738:
.loc_0_181:
.loc_0_182:
leaq gen(%rip), %rdi
addq $40, %rdi
movb $0, (%rdi)
.loc_0_183:
leaq .VAR_388(%rip), %rdi
call rope
leaq gen(%rip), %rdi
addq $32, %rdi
movq %rax, (%rdi)
.loc_0_184:
leaq .VAR_6767(%rip), %rdi
call rope
leaq gen(%rip), %rdi
movq %rax, (%rdi)
.loc_0_185:
leaq .VAR_388(%rip), %rdi
call rope
leaq gen(%rip), %rdi
addq $8, %rdi
movq %rax, (%rdi)
.loc_0_186:
leaq .VAR_6769(%rip), %rdi
call rope
leaq gen(%rip), %rdi
addq $16, %rdi
movq %rax, (%rdi)
.loc_0_187:
leaq .VAR_6764(%rip), %rdi
call rope
leaq gen(%rip), %rdi
addq $24, %rdi
movq %rax, (%rdi)
.ELSE_NOT_6765:
.loc_0_190:
movq -16(%rbp), %rax
movq (%rax), %rax
addq $8, %rax
movq (%rax), %rdx
movq %rdx, -1312(%rbp)
.loc_0_191:
pxor %xmm0, %xmm0
vmovdqu %xmm0, -1328(%rbp)
.loc_0_192:
leaq -1328(%rbp), %rdi
movq -1312(%rbp), %rsi
leaq .VAR_729(%rip), %rdx
call fileStream.open
.loc_0_194:
leaq -1328(%rbp), %rdi
call fileStream.isValid
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6774
.loc_0_195:
leaq .VAR_6775(%rip), %rax
movq %rax, -1552(%rbp)
leaq .VAR_1437(%rip), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1312(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1312(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1600(%rbp), %rdi
call println
.loc_0_196:
movq $1, %rax
leave
ret
.IF_NOT_6774:
.loc_0_199:
leaq -1328(%rbp), %rdi
call fileStream.readContent
movq %rax, -1344(%rbp)
.loc_0_200:
leaq -1328(%rbp), %rdi
call fileStream.close
.loc_0_202:
call readCache
.loc_0_204:
movq -1312(%rbp), %rdi
call absPath
leaq parserCtx(%rip), %rdi
addq $72, %rdi
movq %rax, (%rdi)
.loc_0_205:
leaq parserCtx(%rip), %rdi
addq $64, %rdi
movq -1344(%rbp), %rdx
movq %rdx, (%rdi)
.loc_0_207:
movq -1344(%rbp), %rdi
call lexer
movq %rax, -1360(%rbp)
.loc_0_209:
leaq parserCtx(%rip), %rax
addq $72, %rax
movq (%rax), %rax
leaq gen(%rip), %rdi
movq %rax, %rsi
call asmContext.generateFileLocation
.loc_0_211:
leaq .VAR_394(%rip), %rax
movq %rax, -1552(%rbp)
leaq .VAR_6785(%rip), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1600(%rbp), %rdi
call absPath
movq %rax, -1632(%rbp)
movq -1312(%rbp), %rdi
call absPath
movq %rax, -1648(%rbp)
movq -1632(%rbp), %rdi
movq -1648(%rbp), %rsi
call __bah_compareStr
cmpb $0, %al
jne .BOOL_AND_6783
leaq -1152(%rbp), %rdi
leaq .VAR_6684(%rip), %rsi
call flags.isSet
movb %al, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .BOOL_AND_6783
movb $1, %al
jmp .BOOL_AND_6783_END
.BOOL_AND_6783:
movb $0, %al
.BOOL_AND_6783_END:
cmpb $0, %al
je .IF_NOT_6796
.loc_0_212:
leaq .VAR_394(%rip), %rax
movq %rax, -1552(%rbp)
leaq .VAR_6785(%rip), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1600(%rbp), %rdi
call importFile
.IF_NOT_6796:
.loc_0_216:
movq -1360(%rbp), %rdi
call __bah_arrayLength
movq -1360(%rbp), %rdi
movq $0, %rsi
movq %rax, %rdx
call parseLines
.loc_0_218:
leaq .VAR_388(%rip), %rdx
movq %rdx, -1376(%rbp)
.loc_0_219:
leaq .VAR_388(%rip), %rdx
movq %rdx, -1392(%rbp)
.loc_0_221:
leaq -1152(%rbp), %rdi
leaq .VAR_6666(%rip), %rsi
call flags.isSet
cmpb $0, %al
je .IF_NOT_6807
.loc_0_222:
leaq -1152(%rbp), %rdi
leaq .VAR_6666(%rip), %rsi
call flags.get
movq %rax, -1376(%rbp)
.loc_0_224:
movq -1376(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $46, %dl
je .BOOL_AND_6809
movq -1376(%rbp), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r10b
movb %r10b, %dl
cmpb $47, %dl
je .BOOL_AND_6809
movb $1, %al
jmp .BOOL_AND_6809_END
.BOOL_AND_6809:
movb $0, %al
.BOOL_AND_6809_END:
cmpb $0, %al
je .IF_NOT_6814
.loc_0_225:
movq -1312(%rbp), %rdx
movq %rdx, -1408(%rbp)
.loc_0_226:
movq -1408(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rbx
addq $-1, %rbx
movq %rbx, -1424(%rbp)
movq -1424(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_6816
movb %al, %r10b
.FOR_LOOP_START_6816:
.loc_0_227:
movq -1408(%rbp), %rax
addq $4, %rax
addq -1424(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .IF_NOT_6821
.loc_0_228:
movq -1424(%rbp), %rbx
addq $1, %rbx
movq -1408(%rbp), %rdi
movq $0, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, -1408(%rbp)
.loc_0_229:
jmp .FOR_NOT_6816
.IF_NOT_6821:
subq $1, -1424(%rbp)
movq -1424(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_6816
.FOR_NOT_6816:
.loc_0_232:
movl $5, %edi
movq -1408(%rbp), %rbx
addl (%rbx), %edi
movq -1376(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1552(%rbp)
call memoryAllocSTR_NZ
subq $5, -1552(%rbp)
movq -1552(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1568(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1408(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1552(%rbp)
movq %rdx, -1584(%rbp)
call memcpy
movq -1584(%rbp), %rdx
movq -1552(%rbp), %rdi
addq %rdx, %rdi
movq -1376(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1552(%rbp)
movq %rdx, -1584(%rbp)
call memcpy
movq -1568(%rbp), %rdx
movq %rdx, -1376(%rbp)
.IF_NOT_6814:
.loc_0_235:
movq -1376(%rbp), %rdx
movq %rdx, -1392(%rbp)
.loc_0_236:
movq -1392(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rbx
addq $-1, %rbx
movq %rbx, -1408(%rbp)
movq -1408(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_6827
movb %al, %r10b
.FOR_LOOP_START_6827:
.loc_0_237:
movq -1392(%rbp), %rax
addq $4, %rax
addq -1408(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .IF_NOT_6832
.loc_0_238:
jmp .FOR_NOT_6827
.IF_NOT_6832:
.loc_0_240:
movq -1392(%rbp), %rax
addq $4, %rax
addq -1408(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $46, %dl
jne .IF_NOT_6835
.loc_0_241:
movq -1392(%rbp), %rdi
movq $0, %rsi
movq -1408(%rbp), %rdx
call strSubstitute
movq %rax, -1392(%rbp)
.loc_0_242:
jmp .FOR_NOT_6827
.IF_NOT_6835:
subq $1, -1408(%rbp)
movq -1408(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_6827
.FOR_NOT_6827:
jmp .ELSE_NOT_6836
.IF_NOT_6807:
.loc_0_246:
.loc_0_247:
movq -1312(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %rbx
addq $-4, %rbx
movq -1312(%rbp), %rdi
movq $0, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, -1376(%rbp)
.loc_0_248:
movq -1312(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %rbx
addq $-4, %rbx
movq -1312(%rbp), %rdi
movq $0, %rsi
movq %rbx, %rdx
call strSubstitute
movq %rax, -1392(%rbp)
.ELSE_NOT_6836:
.loc_0_251:
leaq gen(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq .VAR_6842(%rip), %rdi
call rope
movq -1552(%rbp), %rdi
movq %rax, %rsi
call rope.add
leaq gen(%rip), %rdi
addq $32, %rdi
movq %rax, (%rdi)
.loc_0_252:
call generateRuntimeDebugInfo
.loc_0_254:
movb isObjectFile(%rip), %bl
movb %bl, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6846
.loc_0_255:
leaq initFnGen(%rip), %rdi
call asmContext.generateFnEnd
.loc_0_256:
leaq gen(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq .VAR_6848(%rip), %rdi
call rope
movq -1552(%rbp), %rdi
movq %rax, %rsi
call rope.add
leaq gen(%rip), %rdi
addq $16, %rdi
movq %rax, (%rdi)
.loc_0_257:
leaq gen(%rip), %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq gen(%rip), %rax
addq $32, %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
leaq .VAR_6852(%rip), %rdi
call rope
movq %rax, -1584(%rbp)
leaq gen(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq -1584(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq -1568(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq -1552(%rbp), %rdi
movq %rax, %rsi
call rope.add
leaq gen(%rip), %rdi
addq $8, %rdi
movq %rax, (%rdi)
.loc_0_258:
leaq gen(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq initFnGen(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
leaq globalFuncsGen(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, -1584(%rbp)
movq -1568(%rbp), %rdi
movq -1584(%rbp), %rsi
call rope.add
movq %rax, -1600(%rbp)
movq -1552(%rbp), %rdi
movq -1600(%rbp), %rsi
call rope.add
leaq gen(%rip), %rdi
addq $24, %rdi
movq %rax, (%rdi)
jmp .ELSE_NOT_6861
.IF_NOT_6846:
.loc_0_259:
.loc_0_260:
leaq gen(%rip), %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq gen(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq -1552(%rbp), %rdi
movq %rax, %rsi
call rope.add
leaq gen(%rip), %rdi
addq $8, %rdi
movq %rax, (%rdi)
.loc_0_261:
leaq gen(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq globalFuncsGen(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq -1552(%rbp), %rdi
movq %rax, %rsi
call rope.add
leaq gen(%rip), %rdi
addq $24, %rdi
movq %rax, (%rdi)
.ELSE_NOT_6861:
.loc_0_264:
movb isSilent(%rip), %bl
movb %bl, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_6868
.loc_0_265:
leaq .VAR_6869(%rip), %rax
movq %rax, -1552(%rbp)
movq totalLines(%rip), %rdi
call intToStr
movq %rax, -1568(%rbp)
leaq .VAR_6872(%rip), %rax
movq %rax, -1584(%rbp)
call getTimeUnix
movq %rax, %rbx
subq -32(%rbp), %rbx
movq %rbx, -1600(%rbp)
movq $1000000, %rbx
movq -1600(%rbp), %rax
cqto
idivq %rbx
movq %rax, %rdi
call intToStr
movq %rax, -1616(%rbp)
leaq .VAR_6878(%rip), %rax
movq %rax, -1632(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq -1584(%rbp), %rbx
addl (%rbx), %edi
movq -1616(%rbp), %rbx
addl (%rbx), %edi
movq -1632(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1648(%rbp)
call memoryAllocSTR_NZ
subq $5, -1648(%rbp)
movq -1648(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1664(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1648(%rbp)
movq %rdx, -1680(%rbp)
call memcpy
movq -1680(%rbp), %rdx
movq -1648(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1648(%rbp)
movq %rdx, -1680(%rbp)
call memcpy
movq -1680(%rbp), %rdx
movq -1648(%rbp), %rdi
addq %rdx, %rdi
movq -1584(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1648(%rbp)
movq %rdx, -1680(%rbp)
call memcpy
movq -1680(%rbp), %rdx
movq -1648(%rbp), %rdi
addq %rdx, %rdi
movq -1616(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1648(%rbp)
movq %rdx, -1680(%rbp)
call memcpy
movq -1680(%rbp), %rdx
movq -1648(%rbp), %rdi
addq %rdx, %rdi
movq -1632(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1648(%rbp)
movq %rdx, -1680(%rbp)
call memcpy
movq -1664(%rbp), %rdi
call println
.IF_NOT_6868:
.loc_0_268:
movq $0, -1408(%rbp)
.FOR_LOOP_START_6883:
movq evalTmpOFiles(%rip), %rdi
call __bah_arrayLength
cmpq -1408(%rbp), %rax
jle .FOR_NOT_6883
movb %al, %r11b
.loc_0_269:
movq -1408(%rbp), %rbx
salq $3, %rbx
movq evalTmpOFiles(%rip), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
movq -1552(%rbp), %rdi
call removeFile
addq $1, -1408(%rbp)
jmp .FOR_LOOP_START_6883
.FOR_NOT_6883:
.loc_0_273:
leaq -1152(%rbp), %rdi
leaq .VAR_6676(%rip), %rsi
call flags.isSet
cmpb $0, %al
je .IF_NOT_6887
.loc_0_274:
movq -1376(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rbx
addq $-1, %rbx
movq %rbx, -1408(%rbp)
movq -1408(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_6889
movb %al, %r10b
.FOR_LOOP_START_6889:
.loc_0_275:
movq -1376(%rbp), %rax
addq $4, %rax
addq -1408(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .IF_NOT_6894
.loc_0_276:
jmp .FOR_NOT_6889
.IF_NOT_6894:
.loc_0_278:
movq -1376(%rbp), %rax
addq $4, %rax
addq -1408(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $46, %dl
jne .IF_NOT_6897
.loc_0_279:
jmp .FOR_NOT_6889
.IF_NOT_6897:
subq $1, -1408(%rbp)
movq -1408(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_6889
.FOR_NOT_6889:
.loc_0_282:
movq -1408(%rbp), %rdx
cmpq $-1, %rdx
je .BOOL_OR_6898
movq -1376(%rbp), %rax
addq $4, %rax
addq -1408(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $46, %dl
je .BOOL_OR_6898_NOT
.BOOL_OR_6898:
movb $1, %al
jmp .BOOL_OR_6898_END
.BOOL_OR_6898_NOT:
movb $0, %al
.BOOL_OR_6898_END:
cmpb $0, %al
je .IF_NOT_6902
.loc_0_283:
leaq .VAR_6903(%rip), %rax
movq %rax, -1552(%rbp)
movl $5, %edi
movq -1376(%rbp), %rbx
addl (%rbx), %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1568(%rbp)
call memoryAllocSTR_NZ
subq $5, -1568(%rbp)
movq -1568(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1584(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1376(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
movq -1600(%rbp), %rdx
movq -1568(%rbp), %rdi
addq %rdx, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
movq -1584(%rbp), %rdx
movq %rdx, -1376(%rbp)
.IF_NOT_6902:
.loc_0_287:
leaq -1328(%rbp), %rdi
movq -1376(%rbp), %rsi
leaq .VAR_784(%rip), %rdx
call fileStream.open
.loc_0_288:
leaq gen(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq gen(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
leaq gen(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq -1568(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq -1552(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, %rdi
call rope.toStr
leaq -1328(%rbp), %rdi
movq %rax, %rsi
call fileStream.writeFile
.loc_0_289:
leaq -1328(%rbp), %rdi
call fileStream.close
.loc_0_290:
movq $0, %rax
leave
ret
.IF_NOT_6887:
.loc_0_293:
cmpb $0, isObjectFile(%rip)
je .IF_NOT_6915
.loc_0_294:
movq -1376(%rbp), %rdi
call __bah_strlenSTR
movq %rax, %r11
movq %r11, %rbx
addq $-1, %rbx
movq %rbx, -1408(%rbp)
movq -1408(%rbp), %rdx
cmpq $-1, %rdx
je .FOR_NOT_6917
movb %al, %r10b
.FOR_LOOP_START_6917:
.loc_0_295:
movq -1376(%rbp), %rax
addq $4, %rax
addq -1408(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .IF_NOT_6922
.loc_0_296:
jmp .FOR_NOT_6917
.IF_NOT_6922:
.loc_0_298:
movq -1376(%rbp), %rax
addq $4, %rax
addq -1408(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $46, %dl
jne .IF_NOT_6925
.loc_0_299:
jmp .FOR_NOT_6917
.IF_NOT_6925:
subq $1, -1408(%rbp)
movq -1408(%rbp), %rdx
cmpq $-1, %rdx
jne .FOR_LOOP_START_6917
.FOR_NOT_6917:
.loc_0_303:
movq -1408(%rbp), %rdx
cmpq $-1, %rdx
je .BOOL_OR_6926
movq -1376(%rbp), %rax
addq $4, %rax
addq -1408(%rbp), %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $46, %dl
je .BOOL_OR_6926_NOT
.BOOL_OR_6926:
movb $1, %al
jmp .BOOL_OR_6926_END
.BOOL_OR_6926_NOT:
movb $0, %al
.BOOL_OR_6926_END:
cmpb $0, %al
je .IF_NOT_6930
.loc_0_304:
leaq .VAR_6903(%rip), %rax
movq %rax, -1552(%rbp)
movl $5, %edi
movq -1376(%rbp), %rbx
addl (%rbx), %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1568(%rbp)
call memoryAllocSTR_NZ
subq $5, -1568(%rbp)
movq -1568(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1584(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1376(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
movq -1600(%rbp), %rdx
movq -1568(%rbp), %rdi
addq %rdx, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
movq -1584(%rbp), %rdx
movq %rdx, -1376(%rbp)
.IF_NOT_6930:
.loc_0_307:
leaq .VAR_6936(%rip), %rax
movq %rax, -1552(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1376(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1568(%rbp)
call memoryAllocSTR_NZ
subq $5, -1568(%rbp)
movq -1568(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1584(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
movq -1600(%rbp), %rdx
movq -1568(%rbp), %rdi
addq %rdx, %rdi
movq -1376(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
leaq -1456(%rbp), %rdi
movq -1584(%rbp), %rsi
call command
.loc_0_308:
leaq gen(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq gen(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
leaq gen(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq -1568(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq -1552(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, %rdi
call rope.toStr
movq %rax, -1432(%rbp)
.loc_0_309:
leaq -1456(%rbp), %rdi
call command.run
.loc_0_310:
movq $0, %rax
leave
ret
.IF_NOT_6915:
.loc_0_313:
leaq .VAR_6936(%rip), %rax
movq %rax, -1552(%rbp)
leaq .VAR_810(%rip), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1392(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1392(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
leaq -1456(%rbp), %rdi
movq -1600(%rbp), %rsi
call command
.loc_0_314:
leaq gen(%rip), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
leaq gen(%rip), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
leaq gen(%rip), %rax
addq $24, %rax
movq (%rax), %rax
movq -1568(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq -1552(%rbp), %rdi
movq %rax, %rsi
call rope.add
movq %rax, %rdi
call rope.toStr
movq %rax, -1432(%rbp)
.loc_0_315:
leaq -1456(%rbp), %rdi
call command.run
movq %rax, -1472(%rbp)
.loc_0_317:
movq -1440(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_6959
.loc_0_318:
leaq .VAR_6960(%rip), %rdi
call println
.loc_0_319:
movq -1472(%rbp), %rdi
call println
.loc_0_320:
movq $1, %rax
leave
ret
.IF_NOT_6959:
.loc_0_323:
leaq .VAR_388(%rip), %rdx
movq %rdx, -1488(%rbp)
.loc_0_324:
movq $0, -1408(%rbp)
.FOR_LOOP_START_6962:
leaq parserCtx(%rip), %rax
addq $48, %rax
movq (%rax), %rax
movq %rax, -1552(%rbp)
movq -1552(%rbp), %rdi
call __bah_arrayLength
cmpq -1408(%rbp), %rax
jle .FOR_NOT_6962
movb %al, %r11b
.loc_0_325:
movq -1408(%rbp), %rbx
salq $3, %rbx
leaq parserCtx(%rip), %rax
addq $48, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
addq $4, %rax
movb (%rax), %al
movb %al, %r11b
movb %r11b, %dl
cmpb $47, %dl
jne .IF_NOT_6967
.loc_0_326:
leaq .VAR_1009(%rip), %rax
movq %rax, -1552(%rbp)
movq -1408(%rbp), %rbx
salq $3, %rbx
leaq parserCtx(%rip), %rax
addq $48, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1488(%rbp), %rbx
addl (%rbx), %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1488(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1600(%rbp), %rdx
movq %rdx, -1488(%rbp)
.loc_0_327:
addq $1, -1408(%rbp)
jmp .FOR_LOOP_START_6962
.IF_NOT_6967:
.loc_0_329:
leaq .VAR_6974(%rip), %rax
movq %rax, -1552(%rbp)
movq -1408(%rbp), %rbx
salq $3, %rbx
leaq parserCtx(%rip), %rax
addq $48, %rax
movq (%rax), %rax
movq (%rax), %rax
addq %rbx, %rax
movq (%rax), %rax
movq %rax, -1568(%rbp)
movl $5, %edi
movq -1488(%rbp), %rbx
addl (%rbx), %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1584(%rbp)
call memoryAllocSTR_NZ
subq $5, -1584(%rbp)
movq -1584(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1600(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1488(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1616(%rbp), %rdx
movq -1584(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1584(%rbp)
movq %rdx, -1616(%rbp)
call memcpy
movq -1600(%rbp), %rdx
movq %rdx, -1488(%rbp)
addq $1, -1408(%rbp)
jmp .FOR_LOOP_START_6962
.FOR_NOT_6962:
.loc_0_332:
leaq parserCtx(%rip), %rax
addq $88, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
je .FOR_NOT_6980
movb %al, %r10b
.FOR_LOOP_START_6980:
.loc_0_333:
movq compileWaitChannel(%rip), %rdi
call channel.receive
.loc_0_334:
leaq parserCtx(%rip), %rax
addq $88, %rax
movq %rax, %rdx
subq $1, (%rdx)
leaq parserCtx(%rip), %rax
addq $88, %rax
movq (%rax), %rax
movq %rax, %r11
movq %r11, %rdx
cmpq $0, %rdx
jne .FOR_LOOP_START_6980
.FOR_NOT_6980:
.loc_0_337:
call writeCache
.loc_0_340:
leaq .VAR_6985(%rip), %rax
movq %rax, -1552(%rbp)
leaq .VAR_1009(%rip), %rax
movq %rax, -1568(%rbp)
leaq .VAR_1009(%rip), %rax
movq %rax, -1584(%rbp)
leaq .VAR_6991(%rip), %rax
movq %rax, -1600(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1376(%rbp), %rbx
addl (%rbx), %edi
movq -1568(%rbp), %rbx
addl (%rbx), %edi
movq -1488(%rbp), %rbx
addl (%rbx), %edi
movq -1584(%rbp), %rbx
addl (%rbx), %edi
movq -1392(%rbp), %rbx
addl (%rbx), %edi
movq -1600(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1616(%rbp)
call memoryAllocSTR_NZ
subq $5, -1616(%rbp)
movq -1616(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1632(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1648(%rbp), %rdx
movq -1616(%rbp), %rdi
addq %rdx, %rdi
movq -1376(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1648(%rbp), %rdx
movq -1616(%rbp), %rdi
addq %rdx, %rdi
movq -1568(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1648(%rbp), %rdx
movq -1616(%rbp), %rdi
addq %rdx, %rdi
movq -1488(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1648(%rbp), %rdx
movq -1616(%rbp), %rdi
addq %rdx, %rdi
movq -1584(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1648(%rbp), %rdx
movq -1616(%rbp), %rdi
addq %rdx, %rdi
movq -1392(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1648(%rbp), %rdx
movq -1616(%rbp), %rdi
addq %rdx, %rdi
movq -1600(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
leaq -1536(%rbp), %rdi
movq -1632(%rbp), %rsi
call command
.loc_0_341:
leaq -1536(%rbp), %rdi
call command.run
movq %rax, -1472(%rbp)
.loc_0_343:
leaq .VAR_810(%rip), %rax
movq %rax, -1552(%rbp)
movl $5, %edi
movq -1392(%rbp), %rbx
addl (%rbx), %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1568(%rbp)
call memoryAllocSTR_NZ
subq $5, -1568(%rbp)
movq -1568(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1584(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1392(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
movq -1600(%rbp), %rdx
movq -1568(%rbp), %rdi
addq %rdx, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1568(%rbp)
movq %rdx, -1600(%rbp)
call memcpy
movq -1584(%rbp), %rdi
call removeFile
.loc_0_344:
movq -1520(%rbp), %rdx
cmpq $0, %rdx
je .IF_NOT_7002
.loc_0_345:
leaq .VAR_7003(%rip), %rdi
call println
.loc_0_346:
movq -1472(%rbp), %rdi
call println
.loc_0_347:
movq $1, %rax
leave
ret
.IF_NOT_7002:
.loc_0_350:
movb isSilent(%rip), %bl
movb %bl, %r11b
movb %r11b, %dl
movsbq %dl, %rdx
cmpq $0, %rdx
jne .IF_NOT_7006
.loc_0_351:
leaq .VAR_7007(%rip), %rax
movq %rax, -1552(%rbp)
call getTimeUnix
movq %rax, %rbx
subq -32(%rbp), %rbx
movq %rbx, -1568(%rbp)
movq $1000000, %rbx
movq -1568(%rbp), %rax
cqto
idivq %rbx
movq %rax, %rdi
call intToStr
movq %rax, -1584(%rbp)
leaq .VAR_7013(%rip), %rax
movq %rax, -1600(%rbp)
movl $5, %edi
movq -1552(%rbp), %rbx
addl (%rbx), %edi
movq -1584(%rbp), %rbx
addl (%rbx), %edi
movq -1600(%rbp), %rbx
addl (%rbx), %edi
movq %rdi, -1616(%rbp)
call memoryAllocSTR_NZ
subq $5, -1616(%rbp)
movq -1616(%rbp), %rdi
movl %edi, (%rax)
movq %rax, -1632(%rbp)
addq $4, %rax
movq %rax, %rdi
movq -1552(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1648(%rbp), %rdx
movq -1616(%rbp), %rdi
addq %rdx, %rdi
movq -1584(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1648(%rbp), %rdx
movq -1616(%rbp), %rdi
addq %rdx, %rdi
movq -1600(%rbp), %rsi
movl (%rsi), %edx
addq $4, %rsi
movq %rdi, -1616(%rbp)
movq %rdx, -1648(%rbp)
call memcpy
movq -1632(%rbp), %rdi
call println
.IF_NOT_7006:
.loc_0_358:
movq $0, %rax
leave
ret
.global .main_end
.main_end:
.global .__Bah_init
.__Bah_init:
pushq %rbp
movq %rsp, %rbp
call GC_setStackBase
call GC_init
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $1, 24(%rax)
movq $6, 8(%rax)
movq $6, 16(%rax)
movq $6, %rdi
call memoryAllocSTR
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
movb $40, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $1, %rdi
movb $41, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $2, %rdi
movb $123, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $3, %rdi
movb $125, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $4, %rdi
movb $91, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $5, %rdi
movb $93, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_395(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $1, 24(%rax)
movq $15, 8(%rax)
movq $15, 16(%rax)
movq $15, %rdi
call memoryAllocSTR
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
movb $33, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $1, %rdi
movb $61, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $2, %rdi
movb $124, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $3, %rdi
movb $38, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $4, %rdi
movb $37, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $5, %rdi
movb $43, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $6, %rdi
movb $45, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $7, %rdi
movb $42, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
movb $47, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $9, %rdi
movb $44, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $10, %rdi
movb $60, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $11, %rdi
movb $62, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $12, %rdi
movb $58, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $13, %rdi
movb $59, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $14, %rdi
movb $94, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_396(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $18, 8(%rax)
movq $18, 16(%rax)
movq $144, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_398(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_399(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_400(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_401(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_402(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_403(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $48, %rdi
leaq .VAR_404(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $56, %rdi
leaq .VAR_405(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $64, %rdi
leaq .VAR_406(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
leaq .VAR_407(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $80, %rdi
leaq .VAR_408(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $88, %rdi
leaq .VAR_409(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $96, %rdi
leaq .VAR_410(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $104, %rdi
leaq .VAR_411(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $112, %rdi
leaq .VAR_412(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $120, %rdi
leaq .VAR_413(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $128, %rdi
leaq .VAR_414(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $136, %rdi
leaq .VAR_415(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_397(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $6, 8(%rax)
movq $6, 16(%rax)
movq $48, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_442(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_443(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_444(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_445(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_446(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_447(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_441(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $6, 8(%rax)
movq $6, 16(%rax)
movq $48, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_449(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_450(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_451(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_452(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_453(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_454(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_448(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $6, 8(%rax)
movq $6, 16(%rax)
movq $48, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_456(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_457(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_458(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_459(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_460(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_461(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_455(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $6, 8(%rax)
movq $6, 16(%rax)
movq $48, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_463(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_464(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_465(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_466(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_467(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_468(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_462(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
movq ASM_arguments_registers_8(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq ASM_arguments_registers_16(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
movq ASM_arguments_registers_32(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq ASM_arguments_registers_64(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_469(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $16, 8(%rax)
movq $16, 16(%rax)
movq $128, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_471(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_472(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_473(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_474(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_475(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_476(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $48, %rdi
leaq .VAR_477(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $56, %rdi
leaq .VAR_478(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $64, %rdi
leaq .VAR_479(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
leaq .VAR_480(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $80, %rdi
leaq .VAR_481(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $88, %rdi
leaq .VAR_482(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $96, %rdi
leaq .VAR_483(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $104, %rdi
leaq .VAR_484(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $112, %rdi
leaq .VAR_485(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $120, %rdi
leaq .VAR_486(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_470(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $16, 8(%rax)
movq $16, 16(%rax)
movq $128, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_488(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_489(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_490(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_491(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_492(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_493(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $48, %rdi
leaq .VAR_494(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $56, %rdi
leaq .VAR_495(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $64, %rdi
leaq .VAR_496(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
leaq .VAR_497(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $80, %rdi
leaq .VAR_498(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $88, %rdi
leaq .VAR_499(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $96, %rdi
leaq .VAR_500(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $104, %rdi
leaq .VAR_501(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $112, %rdi
leaq .VAR_502(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $120, %rdi
leaq .VAR_503(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_487(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_505(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_506(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_445(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_444(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_504(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_510(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_511(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_452(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_451(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_509(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_510(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_511(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_452(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_451(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_514(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_510(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_511(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_452(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_451(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_519(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
movq ASM_syscall_registers_8(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq ASM_syscall_registers_16(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
movq ASM_syscall_registers_32(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq ASM_syscall_registers_64(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_524(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $10, 8(%rax)
movq $10, 16(%rax)
movq $80, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_506(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_444(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_446(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_447(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_530(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_531(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $48, %rdi
leaq .VAR_532(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $56, %rdi
leaq .VAR_533(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $64, %rdi
leaq .VAR_534(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
leaq .VAR_535(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_525(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $10, 8(%rax)
movq $10, 16(%rax)
movq $80, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_511(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_451(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_453(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_454(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_541(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_542(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $48, %rdi
leaq .VAR_543(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $56, %rdi
leaq .VAR_544(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $64, %rdi
leaq .VAR_545(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
leaq .VAR_546(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_536(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $10, 8(%rax)
movq $10, 16(%rax)
movq $80, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_548(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_458(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_460(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_461(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_552(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_553(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $48, %rdi
leaq .VAR_554(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $56, %rdi
leaq .VAR_555(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $64, %rdi
leaq .VAR_556(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
leaq .VAR_557(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_547(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $10, 8(%rax)
movq $10, 16(%rax)
movq $80, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_559(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_465(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_467(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_468(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_563(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_564(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $48, %rdi
leaq .VAR_565(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $56, %rdi
leaq .VAR_566(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $64, %rdi
leaq .VAR_567(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $72, %rdi
leaq .VAR_568(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_558(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
movq ASM_op_registers_8(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq ASM_op_registers_16(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
movq ASM_op_registers_32(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq ASM_op_registers_64(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_569(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_571(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_572(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_510(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_505(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_570(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_463(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_456(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_449(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_442(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_575(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $6, 8(%rax)
movq $6, 16(%rax)
movq $48, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_581(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_582(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_583(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_584(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_585(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_586(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_580(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $2, 8(%rax)
movq $2, 16(%rax)
movq $16, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_588(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_589(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_587(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $6, 8(%rax)
movq $6, 16(%rax)
movq $48, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_593(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_593(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_595(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_595(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_590(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $6, 8(%rax)
movq $6, 16(%rax)
movq $48, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_581(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_582(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_600(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_600(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
leaq .VAR_595(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $40, %rdi
leaq .VAR_595(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_597(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_605(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_606(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_607(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_608(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_604(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_610(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_611(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_612(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_613(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_609(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_615(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_616(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_617(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_618(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_614(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_622(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_623(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_619(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_627(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_628(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_624(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $5, 8(%rax)
movq $5, 16(%rax)
movq $40, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
movq ASM_or(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
movq ASM_xor(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
movq ASM_and(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
movq ASM_shift_left(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $32, %rdi
movq ASM_shift_right(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_629(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_631(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_632(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_633(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_634(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_630(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_639(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_635(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_644(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_640(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_646(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_647(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_648(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_649(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_645(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_651(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_652(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_653(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_654(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_650(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_656(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_657(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_658(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_659(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_655(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_661(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_662(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_663(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_664(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_660(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_666(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_667(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_668(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_669(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_665(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_671(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_672(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_673(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_674(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_670(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_676(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_677(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_678(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_679(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_675(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_683(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_684(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_680(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_688(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_689(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_685(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_693(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_634(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_690(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_698(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_699(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_695(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_703(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_704(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_700(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_708(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_709(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_705(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq $4, 8(%rax)
movq $4, 16(%rax)
movq $32, %rdi
call memoryAlloc
movq -16(%rbp), %rdi
movq %rax, (%rdi)
movq %rax, %rdi
movq -16(%rbp), %rdi
movq (%rdi), %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $8, %rdi
leaq .VAR_591(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $16, %rdi
leaq .VAR_713(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rdi
movq (%rdi), %rdi
addq $24, %rdi
leaq .VAR_714(%rip), %rdx
movq %rdx, (%rdi)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_710(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_717(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $8, 24(%rax)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_1664(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
movq $40, %rdi
call memoryAlloc
movq %rax, -16(%rbp)
movq $9, 24(%rax)
movq -16(%rbp), %rax
leaq .VAR_ARRAY_3713(%rip), %rdi
movq (%rax), %rdx
movq %rdx, (%rdi)
popq %rbp
ret
.global ..__Bah_init_end
..__Bah_init_end:
.global .Bah_async_28_131
.Bah_async_28_131:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq %rdi, -16(%rbp)
movq -16(%rbp), %rax
movq (%rax), %rax
movq %rax, -32(%rbp)
movq -16(%rbp), %rax
addq $8, %rax
movq (%rax), %rax
movq %rax, -48(%rbp)
movq -16(%rbp), %rax
addq $16, %rax
movq (%rax), %rax
movq %rax, -64(%rbp)
movq -16(%rbp), %rax
addq $24, %rax
movq (%rax), %rax
movq -32(%rbp), %rdi
movq -48(%rbp), %rsi
movq -64(%rbp), %rdx
movq %rax, %rcx
call parallelObjCompile
leave
ret
.global ..Bah_async_28_131_end
..Bah_async_28_131_end:
