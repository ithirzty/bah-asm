#import "./state.bah"

isSameType(a bahType*, b bahType*) bool {
    return a.toStr() == b.toStr()

    if a.type != b.type || a.size != b.size {
        return false
    }

    if a.type == BAH_TYPE_STRCT {
        return a.child.name == b.child.name
    }

    if a.type == BAH_TYPE_ARRAY {
        return isSameType(a.child, b.child)
    }
    
    if a.type == BAH_TYPE_FUNC {
        if a.ret != null && b.ret == null || a.ret == null && b.ret != null {
            return false
        }

        if a.ret != null && isSameType(a.ret, b.ret) == false {
            return false
        }

        argA = a.child
        argB = b.child
        for argA != null, argA = argA.next {
            if argB == null {
                return false
            }

            if isSameType(argA, argB) == false {
                return false
            }

            argB = argB.next
        }

        return argB == null
    }

    if a.type == BAH_TYPE_TUPLE {
        argA = a.child
        argB = b.child
        for argA != null, argA = argA.next {
            if argB == null {
                return false
            }

            if isSameType(argA, argB) == false {
                return false
            }

            argB = argB.next
        }

        return argB == null
    }
    
    return true
}


reversableCompatibleTypes(a bahType*, b bahType*, isRev bool) bool {
    //handle struct types, fn...
    if a.type == BAH_TYPE_PTR && (b.isPtr || b.isNativePtr || b.type == BAH_TYPE_TUPLE) {
        return true
    }

    if a.type == BAH_TYPE_UINT && b.type == BAH_TYPE_INT {
        return true
    }

    if isRev == false {
        return reversableCompatibleTypes(b, a, true)
    }

    return false
}

compatibleTypes(a bahType*, b bahType*) bool {
    if a == null || b == null {
        return false
    }

    for a.type == BAH_TYPE_CUSTOM_TYPE {
        a = a.child.child
    }

    for b.type == BAH_TYPE_CUSTOM_TYPE {
        b = b.child.child
    }


    if a.type == b.type {

        for a.isPtr {
            a = a.child
        }

        for b.isPtr {
            b = b.child
        }

        if a.type == BAH_TYPE_FUNC {

            if a.ret != null || b.ret != null {
                if compatibleTypes(a.ret, b.ret) == false {
                    return false
                }
            }


            currType = a.child
            bcurrType = b.child
            for currType != null, currType = currType.next {                
                if bcurrType == null {
                    return false
                }

                if compatibleTypes(currType, bcurrType) == false {
                    return false
                }
                bcurrType = bcurrType.next
            }

            if bcurrType != null {
                return false
            }
        
        }

        if a.type == BAH_TYPE_STRCT {
            if a.child.name == b.child.name {
                return true
            }

            extd = a.ret
            for extd != null, extd = extd.ret {
                if extd.child.name == b.child.name {
                    return true
                }
            }

            extd = b.ret
            for extd != null, extd = extd.ret {
                if extd.child.name == a.child.name {
                    return true
                }
            }


            return false
        }

        return true
    }

    return reversableCompatibleTypes(a, b, false)
}

containsPtr(type bahType*) bool {
    if type.isPtr || type.isNativePtr || type.type == BAH_TYPE_STR || type.type == BAH_TYPE_PTR || type.type == BAH_TYPE_TUPLE || type.type == BAH_TYPE_ARRAY || type.type == BAH_TYPE_BUFFER {
        return true
    }

    if type.type == BAH_TYPE_STRCT {
        field = type.child.next
        for field != null, field = field.next {
            if containsPtr(field) {
                return true
            }
        }
    }

    return false
}